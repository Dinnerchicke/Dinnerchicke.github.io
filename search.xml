<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>comShell</title>
    <url>/2020/10/06/comShell/</url>
    <content><![CDATA[<h1 id="Shell常用指令"><a href="#Shell常用指令" class="headerlink" title="Shell常用指令"></a>Shell常用指令</h1><p><img src="/2020/10/06/comShell/1.jpg"></p>
<h2 id="文件及命令"><a href="#文件及命令" class="headerlink" title="文件及命令"></a>文件及命令</h2><ul>
<li>cat 显示文件内容</li>
<li>cd ..返回上级目录 cd ../..返回上两级目录</li>
<li>pwd 显示工作路径</li>
<li>more 显示文件内容，空格向后，b向前</li>
<li>head 查看文件开头</li>
<li>tail 查看文件末尾</li>
<li>rm -f 文件名 删除文件</li>
<li>rm -rf 强制删除</li>
<li>cp file1 file2 复制文件</li>
<li>gzip 文件名/目录名 压缩后面文件或文件夹，-d解压</li>
<li>tail -f 文件名 跟踪文件的增长情况，-n显示文件尾部n行内容</li>
<li><em>ranger</em> 好使的浏览文件方法 gg顶部，G底部，g 定位，f查找，还支持鼠标点击！</li>
</ul>
<h2 id="系统常用"><a href="#系统常用" class="headerlink" title="系统常用"></a>系统常用</h2><ul>
<li>ls -s查看目录详细文件信息</li>
<li>top 查看当前系统中耗费资源最多进程</li>
<li>data 系统当前时间</li>
<li>ps -ax 查看所有进程</li>
<li>df -h 查看磁盘剩余资源</li>
<li>kill PID 杀死进程，-KILL强制杀死</li>
<li>ss -tlnp 查看哪些进程使用了监听端口</li>
<li>ps aux | grep java | grep -v grep 显示出所有java进程，处理当前grep进程(常用管道命令，grep处理字符串)</li>
<li>shutdown  -h now 关闭系统</li>
<li>strace 跟踪系统调用的执行，-p进程号，-c -p运行一段时间后停止获取数据，-o输出结果，-tt时刻调用，-y路径，-c调用次数等</li>
<li>netstat 统计网络相关协议数据</li>
<li>perf 系统性能分析</li>
<li>free -h 查看内存</li>
<li>dstat 综合分析，-c cpu，-d磁盘，-i 中断统计，-l负载均衡统计，-m内存统计，-n网络统计，-p 进程统计</li>
<li>reboot 重启</li>
<li>logout 注销</li>
</ul>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li>Ctrl+c 终止进程</li>
<li>Ctrl+l  清屏</li>
<li>Ctrl+q 退出</li>
<li>/&gt; 将前面一条命令的输出写入到后面的文本中，文本清空后写入</li>
<li>/&gt;&gt; 同&gt;，文本不清空</li>
<li>| 管道命令，以前一个命令的输出作为输入运行，如cat 1.txt | grep ‘hello’ 打印1.txt中带有hello字符串的行</li>
</ul>
<h2 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>gg 跳到首行</li>
<li>G 跳到末行</li>
<li>:n 跳到n行</li>
</ul>
<h3 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h3><ul>
<li>u undo，取消上一步操作</li>
<li>Ctrl+r 返回到undo之前</li>
</ul>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><ul>
<li>dd 删除光标所在行</li>
<li>dG 删除光标所在行到末尾行的所有内容</li>
<li>D 删除光标所在处到行尾的内容</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>vuePDesign</title>
    <url>/2020/11/12/vuePDesign/</url>
    <content><![CDATA[<h1 id="vueProgramDesign"><a href="#vueProgramDesign" class="headerlink" title="vueProgramDesign"></a>vueProgramDesign</h1><p>按照项目目录进行规划</p>
<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>自动生成</p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>项目的基本配置项</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>在这里进行项目的接口封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> 函数名(<span class="params">payload</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        method:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        data:payload</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h3><p>静态文件目录</p>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒加载</span></span><br><span class="line">component:<span class="function">()=&gt;</span></span><br><span class="line">	<span class="keyword">import</span> (<span class="string">&quot;路径&quot;</span>),</span><br></pre></td></tr></table></figure>



<h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><p>放图标</p>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>vuex状态管理</p>
<h3 id="styles"><a href="#styles" class="headerlink" title="styles"></a>styles</h3><p>里面放sass代码</p>
<h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>全局调用js</p>
<h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3><p>页面</p>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a>component</h3><p>页面views调用的component组件</p>
<h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><p>空</p>
<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>调用组件的地方</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Js-pink</title>
    <url>/2020/11/10/Js-pink/</url>
    <content><![CDATA[<h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="浏览器执行Js"><a href="#浏览器执行Js" class="headerlink" title="浏览器执行Js"></a>浏览器执行Js</h3><p> 浏览器分为：</p>
<ul>
<li>渲染引擎：用来解析HTML与CSS，俗称内核，如chrome的blink</li>
<li>JS引擎：也称为JS解释器，用来读取网页中Js代码，对其处理后执行，如chrome的v8</li>
</ul>
<h3 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成"></a>JS组成</h3><p><img src="/2020/11/10/Js-pink/1.jpg"></p>
<ul>
<li>ECMAScript：规定js的编程语法和基础核心知识</li>
<li>BOM：浏览器对象模型，可以与浏览器窗口进行互动的对象结构，通过BOM可以操作浏览器窗口，如弹出框，跳转等</li>
<li>DOM：文档对象模型，是处理可扩展标记语言的标准编程接口，通过DOM提供的接口可以对页面上元素进行各种操作</li>
</ul>
<h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><blockquote>
<p>主要学BOM和DOM</p>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h4><p><img src="/2020/11/10/Js-pink/2.jpg"></p>
<ul>
<li>文档：一个页面就是一个文档，在DOM中使用document表示</li>
<li>元素：页面中所有标签都是元素，DOM中使用element表示</li>
<li>节点：网页中所有内容都是节点(标签、属性、文本、注释等)，DOM中使用Node表示</li>
</ul>
<h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID,文档.根据元素找到id,id为字符串,返回对象</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(element);<span class="comment">//打印返回的元素对象，更好查看里面的属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据标签名获取元素，返回对象集合，以伪数组的形式存储</span></span><br><span class="line"><span class="comment">//如果没有这个元素返回空数组</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">//可以指定父元素，获取里面的子元素name</span></span><br><span class="line"><span class="keyword">let</span> ol=element.getElementsByName(<span class="string">&#x27;ol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据类名获取</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择器,返回指定选择器的第一个元素对象</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;选择器&#x27;</span>);<span class="comment">//如.box 类名，#nav id，p 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择器,返回选择器所有</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;选择器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取body元素</span></span><br><span class="line"><span class="keyword">let</span> body=<span class="built_in">document</span>.body;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取html元素</span></span><br><span class="line"><span class="keyword">let</span> html=<span class="built_in">document</span>.documentElement;</span><br></pre></td></tr></table></figure>



<h4 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h4><blockquote>
<p>事件：触发–响应机制</p>
</blockquote>
<p>事件组成：</p>
<ul>
<li>事件源：事件被触发的对象</li>
<li>事件类型：如何触发 什么事件 鼠标点击还是经过</li>
<li>事件处理程序： 通过函数方式完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h5><ol>
<li>获取事件源</li>
<li>注册事件(绑定事件)</li>
<li>添加事件处理程序(函数赋值)</li>
</ol>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onlick</td>
<td>鼠标左键</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>onfocus</td>
<td>鼠标焦点</td>
</tr>
<tr>
<td>onblur</td>
<td>失去焦点</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标移动</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标弹起触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按下触发</td>
</tr>
</tbody></table>
<h5 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变元素内容,去除html标签，空格和换行去掉</span></span><br><span class="line">element.innerText=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//改变元素内容，包括html标签，同时保留空格和换行(推荐)</span></span><br><span class="line">element.innerHTML=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//这两个方法也可以用于获取内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//src、href 改变</span></span><br><span class="line">element.src=<span class="string">&quot;&quot;</span></span><br><span class="line">element.href=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改表单元素的属性,</span></span><br><span class="line">input.value=<span class="string">&quot;被点击了&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.disabled=<span class="literal">true</span>;<span class="comment">//this指向的是事件函数的调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//样式属性修改</span></span><br><span class="line"><span class="built_in">this</span>.style.backgroundColor=<span class="string">&#x27;purple&#x27;</span>;<span class="comment">//修改行内样式</span></span><br><span class="line">box.style.display=<span class="string">&quot;none&quot;</span>;<span class="comment">//修改类样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用className修改样式属性</span></span><br><span class="line"><span class="built_in">this</span>.className=<span class="string">&#x27;change&#x27;</span>;<span class="comment">//修改className修改类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排他思想，给多个按钮增加点击事件</span></span><br><span class="line"><span class="keyword">let</span> btns=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">            btns[i].style.backgroundColor=<span class="string">&#x27;&#x27;</span>;<span class="comment">//将所有元素清除样式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.style.backgroundColor=<span class="string">&#x27;pink&#x27;</span>;<span class="comment">//留下新元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取自定义属性值</span></span><br><span class="line">element.属性 <span class="comment">//获取内置属性值</span></span><br><span class="line">element.getAttribute(<span class="string">&#x27;属性&#x27;</span>) <span class="comment">//获得自定义属性,如标签内aaa=&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置属性值</span></span><br><span class="line">element.属性=<span class="string">&#x27;&#x27;</span><span class="comment">//设置内置属性</span></span><br><span class="line">element.setAttribute(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)<span class="comment">//设置自定义属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line">div.removeAttribute(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//H5设置自定义属性</span></span><br><span class="line">div data-index=<span class="string">&quot;1&quot;</span><span class="comment">//data-自定义属性名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//H5设置获取自定义属性的方法,dataset是一个集合，里面存放了所有以data开头的自定义属性</span></span><br><span class="line">div.dataset.index</span><br><span class="line">div.dataset[<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line"><span class="comment">//如果自定义属性有多个-连接的单词，我们获取的时候采取驼峰命名法</span></span><br><span class="line"><span class="comment">//data-list-name</span></span><br><span class="line">div.dataset[<span class="string">&#x27;listName&#x27;</span>]</span><br></pre></td></tr></table></figure>



<p>tab栏切换的本质是隐藏和显示</p>
<p><img src="/2020/11/10/Js-pink/3.jpg"></p>
<h4 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h4><blockquote>
<p>利用父子兄弟节点关系获取元素</p>
<p>逻辑性较强，但兼容性较差</p>
</blockquote>
<p>节点基本属性：</p>
<ul>
<li>nodeType(节点类型)</li>
<li>nodeName(节点名称)</li>
<li>nodeValue(节点值)</li>
</ul>
<p>nodeType:</p>
<ul>
<li>1：元素节点(主要)</li>
<li>2：属性节点</li>
<li>3：文本节点:换行等</li>
</ul>
<h5 id="获取父子兄弟节点"><a href="#获取父子兄弟节点" class="headerlink" title="获取父子兄弟节点"></a>获取父子兄弟节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父子</span></span><br><span class="line"><span class="comment">//父级节点,得到离元素最近的父亲节点，如果找不到则返回null</span></span><br><span class="line">node.parentNode</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有子节点，包括换行等文本节点，不提倡使用childNodes</span></span><br><span class="line">node.childNodes</span><br><span class="line"><span class="comment">//获取元素子节点</span></span><br><span class="line">node.children</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个子节点</span></span><br><span class="line">node.firstChild</span><br><span class="line"><span class="comment">//最后一个子节点</span></span><br><span class="line">node.lastChild</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个元素子节点,有兼容性问题，下同</span></span><br><span class="line">node.firstElementChild</span><br><span class="line"><span class="comment">//最后一个子节点</span></span><br><span class="line">node.lastElementChild</span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容性解决方法，通用</span></span><br><span class="line">node.children[<span class="number">0</span>]</span><br><span class="line">node.children[ol.children.length<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下一个兄弟节点，包含元素节点或者文本节点等等</span></span><br><span class="line">node.nextSibling</span><br><span class="line"><span class="comment">//上一个兄弟节点，上同</span></span><br><span class="line">node.previousSibling</span><br><span class="line"></span><br><span class="line"><span class="comment">//下一个兄弟元素节点</span></span><br><span class="line">node.nextElementSibling</span><br><span class="line"><span class="comment">//上一个</span></span><br><span class="line">node.previousElementSibling</span><br></pre></td></tr></table></figure>



<h5 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建节点</span></span><br><span class="line"><span class="keyword">let</span> li=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="comment">//2.添加节点,node是父级，li是子级</span></span><br><span class="line">ul.appendChild(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lili=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">ul.insertBefore(lili,ul.children[<span class="number">0</span>])<span class="comment">//在ul第一个孩子前添加lili</span></span><br></pre></td></tr></table></figure>



<h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除子元素</span></span><br><span class="line">node.removeChild(child)</span><br><span class="line"></span><br><span class="line"><span class="comment">//阻止链接跳转</span></span><br><span class="line">javascript:;</span><br></pre></td></tr></table></figure>



<h5 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;如果括号参数为空或者为false,则为浅拷贝，只克隆赋值节点本身，不克隆里面的子节点</span><br><span class="line">&#x2F;&#x2F;如果括号为true，深拷贝，复制里面的内容</span><br><span class="line">node.cloneNode()</span><br></pre></td></tr></table></figure>



<h4 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h4><h5 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h5><h6 id="传统注册方式"><a href="#传统注册方式" class="headerlink" title="传统注册方式"></a>传统注册方式</h6><ul>
<li>on开头的事件onclick</li>
<li>特点：注册事件的唯一性</li>
<li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li>
</ul>
<h6 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h6><ul>
<li>addEventListener()</li>
<li>同一个元素同一个元素可以注册多个监听器</li>
<li>按照注册顺序执行</li>
</ul>
<p>addEventListener(type,listener[,useCapture])</p>
<ul>
<li>type:事件类型字符串，如click、mouseover</li>
<li>listener：事件处理函数</li>
<li>useCapture，可选参数，默认false</li>
</ul>
<h5 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h5><h6 id="传统注册方式-1"><a href="#传统注册方式-1" class="headerlink" title="传统注册方式"></a>传统注册方式</h6><p>eventTarget.onclick=null;</p>
<h6 id="方法监听注册方式-1"><a href="#方法监听注册方式-1" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h6><p>eventTarget.addEventListener(type,fn)</p>
<p>function fn(){</p>
<p>​    …//不能使用默认函数的方式，里面的fn不用加小括号<br>​            removeEventListener(type,fn)</p>
<p>}</p>
<h4 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h4><p><img src="/2020/11/10/Js-pink/4.jpg"></p>
<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul>
<h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;&#125;<span class="comment">//这个event可以自动机命名，如e等</span></span><br><span class="line"><span class="comment">//这个event就是事件对象,可以通过这个对象判断用户按了哪个键</span></span><br><span class="line"></span><br><span class="line">e.target<span class="comment">//返回的是触发事件的对象</span></span><br><span class="line"><span class="built_in">this</span><span class="comment">//返回的是绑定事件的对象</span></span><br></pre></td></tr></table></figure>

<h5 id="常见属性和方法"><a href="#常见属性和方法" class="headerlink" title="常见属性和方法"></a>常见属性和方法</h5><table>
<thead>
<tr>
<th>事件对象属性方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.target</td>
<td>返回触发事件的对象</td>
</tr>
<tr>
<td>e.type</td>
<td>返回事件的类型</td>
</tr>
<tr>
<td>e.cancelBubble</td>
<td>该属性阻止冒泡</td>
</tr>
<tr>
<td>e.preventDefault()</td>
<td>阻止默认事件，如阻止链接跳转</td>
</tr>
<tr>
<td>e.stopPropagation()</td>
<td>阻止冒泡 标准</td>
</tr>
</tbody></table>
<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>事件冒泡坏处</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻止冒泡</span></span><br><span class="line">e.stopPropagation()</span><br></pre></td></tr></table></figure>



<h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>使用事件冒泡好处 </p>
<blockquote>
<p>需要给每个dom注册事件太麻烦，故需要事件委托</p>
<p><em>事件委托原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</em></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给父节点添加监听器，利用事件冒泡影响每一个子节点</span></span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    e.target.style.backgroundColor=<span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止鼠标右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	e.preventDefault();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁止鼠标选中</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>BOM浏览器对象模型，其核心对象是window，兼容性较差</p>
</blockquote>
<p>window对象：</p>
<ul>
<li>它是JS访问浏览器窗口的一个接口</li>
<li>它是一个全局对象，定义在全局作用域中的变量，如alert()，其实是window.alert()</li>
</ul>
<h4 id="window常见事件"><a href="#window常见事件" class="headerlink" title="window常见事件"></a>window常见事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗口加载事件,当文档内容完全加载完成(样式表、图片、flash等)会触发该事件</span></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//窗口加载事件，不包括样式表、图片、flash等</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整窗口大小事件</span></span><br><span class="line"><span class="built_in">window</span>.onresize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.innerWidth<span class="comment">//当前屏幕的宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器-一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(调用函数,<span class="string">&#x27;毫秒数&#x27;</span>)</span><br><span class="line"><span class="comment">//停止定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutID)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器-多次</span></span><br><span class="line"><span class="built_in">setInterval</span>(回调函数，<span class="string">&#x27;毫秒数&#x27;</span>)</span><br><span class="line"><span class="comment">//停止定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timeoutID)</span><br></pre></td></tr></table></figure>



<h4 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h4><blockquote>
<p>this最终指向调用它的对象</p>
<ol>
<li>全局作用域或普通函数中this指向全局对象window(定时器里的this也是)</li>
<li>方法调用中谁调用this指向谁</li>
<li>构造函数中this指向构造函数实例</li>
</ol>
</blockquote>
<h4 id="js执行队列"><a href="#js执行队列" class="headerlink" title="js执行队列"></a>js执行队列</h4><blockquote>
<p>js是单线程的</p>
<p>H5提出多线程标准，允许js创建多线程，于是js出现同步和异步</p>
<p>事件循环：主线程不断重复获得任务、执行任务、再获取再执行，故这种机制称为事件循环(event loop)</p>
</blockquote>
<p>js执行顺序：</p>
<ol>
<li>将同步任务放入主线程执行栈中</li>
<li>而异步任务通过异步进程处理决定要不要把异步任务放入任务队列中(是否调用回调函数)</li>
<li>同步任务完成后，读取消息队列并执行</li>
</ol>
<h5 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h5><p>js所有同步任务放到主线程执行栈上</p>
<h5 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h5><p>js的异步是通过<em>回调函数</em>实现的</p>
<p>异步任务类型：</p>
<ul>
<li>普通事件：如click、resize等</li>
<li>资源加载：如load、error等</li>
<li>定时器：如setInterval、setTimeout等</li>
</ul>
<p>异步任务相关<em>回调函数</em>添加到<em>任务队列</em>中(也称消息队列)</p>
<h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><blockquote>
<p>window对象提供了一个location属性用于获取或设置窗体的url，返回的是对象，故也称location对象</p>
</blockquote>
<h5 id="location跳转"><a href="#location跳转" class="headerlink" title="location跳转"></a>location跳转</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.href=<span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line">location.assign()<span class="comment">//跟href一样，可以跳转页面(也称为重定向页面)，记录历史，可以后退</span></span><br><span class="line">location.replace()<span class="comment">//替换当前页面，因为不记录历史，所以不能后退</span></span><br><span class="line">location.reload()<span class="comment">//重新加载液面，相当于f5，如果参数为true则强制刷新ctrl+f5</span></span><br></pre></td></tr></table></figure>



<h4 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.userAgent<span class="comment">//匹配navigator的userAgent知道用户用什么登陆</span></span><br></pre></td></tr></table></figure>



<h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">back()<span class="comment">//后退</span></span><br><span class="line">forward()<span class="comment">//前进</span></span><br><span class="line">go()<span class="comment">//前进后退功能，参数如果是1前进1，-1后退1</span></span><br></pre></td></tr></table></figure>



<h4 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h4><h5 id="offset元素偏移量"><a href="#offset元素偏移量" class="headerlink" title="offset元素偏移量"></a>offset元素偏移量</h5><ul>
<li>获得元素距离带有定位父元素的距离</li>
<li>获得元素自身的大小</li>
<li>返回的数都不带单位</li>
<li>offset用于获取值合适，style适合修改值</li>
</ul>
<p>常用属性：</p>
<ul>
<li>element.offsetParent:返回作为该元素带有定位的父元素</li>
<li>element.offsetTop：带有定位父元素距上边距离</li>
<li>element.offsetLeft：带有定位父元素距左边距离</li>
<li>element.offsetWidth：返回自身包括padding，边框，内容区宽度</li>
<li>element.offsetHeight：返回自身包括padding，边框，内容区高度</li>
</ul>
<h5 id="client元素可视区"><a href="#client元素可视区" class="headerlink" title="client元素可视区"></a>client元素可视区</h5><blockquote>
<p>通过client可以动态获得该元素的边框大小、元素大小</p>
</blockquote>
<ul>
<li>element.clientTop：返回元素上边框大小</li>
<li>element.clientLeft：返回元素左边框大小</li>
<li>element.clientWidth：返回自身包括padding、内容区的宽度、不含边框，返回数值不含单位</li>
<li>element.clientHeight：：返回自身包括padding、内容区的高度、不含边框，返回数值不含单位</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//立即执行函数,创建了一个独立作用域，避免了命名冲突问题</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;())</span><br></pre></td></tr></table></figure>



<h5 id="scroll滚动条"><a href="#scroll滚动条" class="headerlink" title="scroll滚动条"></a>scroll滚动条</h5><ul>
<li>element.scrollTop：返回被卷的上侧距离</li>
<li>element.scrollLeft：左侧</li>
<li>element.scrollWidth：返回自身实际宽度</li>
<li>element.scrollHeight：返回自身实际高度</li>
</ul>
<h4 id="mouseenter和mouseover事件区别"><a href="#mouseenter和mouseover事件区别" class="headerlink" title="mouseenter和mouseover事件区别"></a>mouseenter和mouseover事件区别</h4><blockquote>
<p>mouseenter只会经过自身盒子触发，mouseover鼠标经过自身和子盒子都会触发</p>
</blockquote>
<h4 id="js轮播图"><a href="#js轮播图" class="headerlink" title="js轮播图"></a>js轮播图</h4><p>点击滚动</p>
<p><img src="/2020/11/10/Js-pink/5.jpg"></p>
<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><blockquote>
<p>只能存储字符串，可以将对象JSON.stringfy()编码后存储</p>
</blockquote>
<h5 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h5><blockquote>
<p>容纳约5M</p>
<p>生命周期为关闭浏览器窗口</p>
<p>在同一个窗口下数据可以共享</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(key,value)</span><br><span class="line">sessionStorage.getItem(key)</span><br><span class="line">sessionStorage.removeItem(key)</span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>



<h5 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h5><blockquote>
<p>容纳约20M</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(key,value)</span><br><span class="line"><span class="built_in">localStorage</span>.getItem(key)</span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key)</span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>C3基础</title>
    <url>/2020/11/06/C3/</url>
    <content><![CDATA[<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><blockquote>
<p>CSS:层叠样式表，同样是标记语言</p>
</blockquote>
<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>CSS构成：选择器以及一条或多条声明</p>
<p><img src="/2020/11/06/C3/1.jpg"></p>
<p>注释:/* */</p>
<h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//展开风格</span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">	color: pink;//属性值前面，冒号后面有个空格</span><br><span class="line">	<span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><blockquote>
<p>选择器就是根据不同需求把不同<em>标签</em>选出来</p>
</blockquote>
<p>分为：</p>
<ul>
<li>基础选择器:由单个选择器组成，包括标签选择器(标签名)，类选择器(class)，id选择器(id)和通配符选择器()</li>
<li>复合选择器:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标签选择器,p标签*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类选择器,.类名，class=&quot;类名&quot;，不能用标签如.div*/</span></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">div class=&quot;cup J_Cup&quot;/* 一个标签多个类名 中间用空格隔开 */</span><br><span class="line"><span class="comment">/*id选择器,id只能调用一次*/</span></span><br><span class="line"><span class="selector-id">#id</span>名&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通配符选择器  对所有标签都使用*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">类命名规则：</span></span><br><span class="line"><span class="comment">头:header</span></span><br><span class="line"><span class="comment">内容:content</span></span><br><span class="line"><span class="comment">尾:footer</span></span><br><span class="line"><span class="comment">导航:nav</span></span><br><span class="line"><span class="comment">侧栏:sidebar</span></span><br><span class="line"><span class="comment">栏目:column</span></span><br><span class="line"><span class="comment">页面外围控制整体布局宽度:wrapper</span></span><br><span class="line"><span class="comment">登陆条:loginbar</span></span><br><span class="line"><span class="comment">标志:logo</span></span><br><span class="line"><span class="comment">广告:banner</span></span><br><span class="line"><span class="comment">热点:hot</span></span><br><span class="line"><span class="comment">新闻:news</span></span><br><span class="line"><span class="comment">下载:download</span></span><br><span class="line"><span class="comment">子导航:subnav</span></span><br><span class="line"><span class="comment">菜单:menu</span></span><br><span class="line"><span class="comment">子菜单:submenu</span></span><br><span class="line"><span class="comment">搜索:search</span></span><br><span class="line"><span class="comment">友情链接:friendlink</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字体系列 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="comment">/*Microsoft Yahei*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体大小 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体粗细 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;<span class="comment">/*bold, bolder,lighter,number(bold:700) 实际开发提倡使用数字*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体样式 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:normal;<span class="comment">/*italic 倾斜, */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*字体符合属性 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="comment">/*font:font-style font-weight font-size/line-height font-family 按顺序</span></span><br><span class="line"><span class="comment">    不需要的属性可以省略，但必须暴溜font-size和font-family属性,否则不起作用*/</span></span><br><span class="line">    <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span>/<span class="number">20px</span> <span class="string">&#x27;Microsoft yahei&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*文本颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文本对齐-只能用于设置水平对齐*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*装饰文本*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;<span class="comment">/*underline,overline,line-through*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文本缩进,只缩进首行，em:当前文字大小距离*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-index</span>:<span class="number">2em</span>;<span class="comment">/*当前文字两个大小单位*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*行间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内部样式表：写到style标签中*/</span></span><br><span class="line"><span class="comment">/*行内样式表：写到行内*/</span></span><br><span class="line"><span class="comment">/*外部样式表*/</span></span><br></pre></td></tr></table></figure>



<h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><p>右边CSS可以暂时改变样式，CSS里面样式前面黄色感叹号被划掉代表样式有问题</p>
<p><img src="/2020/11/06/C3/2.jpg"></p>
<h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><h3 id="快速生成html"><a href="#快速生成html" class="headerlink" title="快速生成html"></a>快速生成html</h3><ul>
<li>生成标签：直接输入标签名，按tab即可</li>
<li>生成多个相同标签：输入标签名*n即可，如div*3</li>
<li>如果有父子级关系的标签，用&gt;即可，如ul&gt;li</li>
<li>如果有兄弟关系的标签，用+即可，如div+p</li>
<li>如果生成带有类名或者id名字的，直接写.demo或#two，生成一个div</li>
<li>如果生成的div类是有顺序的，可以用自增符号$</li>
</ul>
<h3 id="快速生成css"><a href="#快速生成css" class="headerlink" title="快速生成css"></a>快速生成css</h3><p>css基本采取简写即可</p>
<ul>
<li>w200，即可生成width:200px</li>
<li>lh26，即可生成line-height:26px</li>
</ul>
<h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><p>VSCODE自带的，右键Shift+Alt+F</p>
<h2 id="CSS符合选择器"><a href="#CSS符合选择器" class="headerlink" title="CSS符合选择器"></a>CSS符合选择器</h2><p>分为：</p>
<ul>
<li>后代选择器</li>
<li>子选择器</li>
<li>并集选择器</li>
<li>伪类选择器</li>
</ul>
<h3 id="后代选择器-重要"><a href="#后代选择器-重要" class="headerlink" title="后代选择器(重要)"></a>后代选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以选择父元素里子元素，也可以是孙子	选择ol父元素中的li进行渲染，只渲染li的元素*/</span></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="子选择器-重要"><a href="#子选择器-重要" class="headerlink" title="子选择器(重要)"></a>子选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 亲儿子选择器，必须是最近的才行，只渲染li而不渲染li的儿子孙子等*/</span></span><br><span class="line"><span class="selector-tag">ol</span>&gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="并集选择器-重要"><a href="#并集选择器-重要" class="headerlink" title="并集选择器(重要)"></a>并集选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择多组标签*/</span></span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="comment">/*约定并集选择器竖着写*/</span></span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*链接伪类需要按照顺序才能生效*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>	<span class="comment">/*未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>	<span class="comment">/*已被访问*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>	<span class="comment">/*鼠标指针位于上面的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>	<span class="comment">/*选择活动链接，按下未弹起*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*焦点伪类选择器	一般表单元素才能focus*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h2><p>元素分类：</p>
<ul>
<li>块元素</li>
<li>行内元素</li>
</ul>
<h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><ul>
<li>常见块元素:div,h</li>
</ul>
<p>特点:</p>
<ul>
<li>自己独占一行</li>
<li>高度、宽度、内外边距都能改变</li>
<li>宽度默认是容器的100%</li>
<li>是一个容器盒子，里面可以放行内或者块级元素</li>
<li>文字类元素里面不能使用块级元素，如p，h1等</li>
</ul>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul>
<li>常见的行内元素:a,strong,b,em,i,del,s,ins,u,span</li>
</ul>
<p>特点:</p>
<ul>
<li>相邻行内元素在一行上</li>
<li>高，宽设置是无效的</li>
<li>默认宽度就是本身内容的宽度</li>
<li>行内只能容纳文本或者其他行内元素</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul>
<li>行内块元素:img,input,td同时拥有块元素和行内元素的特点</li>
</ul>
<p>特点：</p>
<ul>
<li>和相邻行内元素在一行上，但是他们之间有间隙，一行可以显示多个</li>
<li>默认宽度就是它本身的宽度</li>
<li>高度、行高、内外边距可以控制</li>
</ul>
<h3 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*如增加链接a的触发范围 */</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;<span class="comment">/*转换成块级元素*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline;<span class="comment">/*转换成行内元素*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-block;<span class="comment">/*转换为行内块元素*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*CSS垂直居中*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/*让height=line-height*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>();</span><br><span class="line">    <span class="attribute">background-repeat</span>:repeat/no-repeat/repeat-x/repeat-y</span><br><span class="line">        <span class="comment">/*平铺，不平铺，沿x轴平铺，沿y轴平铺*/</span></span><br><span class="line">    background-position:center top;</span><br><span class="line">        <span class="comment">/*改变背景图片在背景中的位置,</span></span><br><span class="line"><span class="comment">    	left,right,center,top,</span></span><br><span class="line"><span class="comment">    	如果只写一个方位名词，则第二个值默认居中*/</span></span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line">		<span class="comment">/*精确背景位置	x轴 y轴*/</span>    </span><br><span class="line">    <span class="attribute">background-attachment</span>:scroll;</span><br><span class="line">    	<span class="comment">/*视差滚动scroll,固定:fixed*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景属性复合写法*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景颜色半透明*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)<span class="comment">/*最后一个是透明度0~1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS层叠性</span></span><br><span class="line"><span class="comment">样式冲突，遵循就近原则，样式不冲突，不会层叠</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CSS继承性</span></span><br><span class="line"><span class="comment">子标签会继承父标签的部分样式</span></span><br><span class="line"><span class="comment">如text-,font-,line-这些元素开头的可以继承,以及color属性</span></span><br><span class="line"><span class="comment">行高的继承:子元素会继承父元素的行高，即使子元素跟父元素的文字大小不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CSS优先级</span></span><br><span class="line"><span class="comment">当同一个元素有多个选择器时,</span></span><br><span class="line"><span class="comment">选择器相同，执行层叠性</span></span><br><span class="line"><span class="comment">选择性不同，按照权重</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选择器</th>
<th>选择器权重</th>
</tr>
</thead>
<tbody><tr>
<td>继承 或者*</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>类选择器，伪类选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>ID选择器</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>行内样式 style=“”</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>!important 重要的</td>
<td>无穷大</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*复合选择器会有权重叠加的问题</span></span><br><span class="line"><span class="comment">权重相加</span></span><br><span class="line"><span class="comment">但永远不会进位*/</span></span><br></pre></td></tr></table></figure>



<h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><blockquote>
<p>HTML中的布局元素可以当成盒子，封装周边的元素，包括边框，外边距，内边距和实际内容</p>
</blockquote>
<img src="/2020/11/06/C3/3.jpg" style="zoom: 67%;">

<h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框(border)"></a>边框(border)</h3><p>组成：</p>
<ul>
<li>宽度：border-width，单位px</li>
<li>样式：border-style，如solid实线，dashed虚线，dotted点线</li>
<li>颜色：border-color</li>
</ul>
<p>特点：</p>
<ul>
<li>复合写法：border:1px solid red;没有顺序</li>
<li>分边框：border-top、bottom、left、right</li>
<li>表格细线边框：因为表格会有两边边框加一起两倍大小的现象，所以需要border-collapse:collapse;合并</li>
</ul>
<h3 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h3><blockquote>
<p>设置盒子边框与内容的距离</p>
<p>padding-top/bottom/left/right</p>
</blockquote>
<p>复合属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*padding符合属性*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;<span class="comment">/*1个值，上下左右5px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;<span class="comment">/*2个值，上下5px 左右10px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span>;<span class="comment">/*3个值，上5px 左右10px 下20px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">25px</span>;<span class="comment">/*4个值，顺时针 上5px 右10px...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果盒子本身没有指定width/height属性，则padding不会撑开盒子大小，给定的才会撑开</li>
</ul>
<h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h3><blockquote>
<p>设置盒子与盒子之间的距离</p>
<p>margin-left/right/top/bottom</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">外边距可以让块级盒子水平居中，条件为</span></span><br><span class="line"><span class="comment">1.盒子必须指定宽度</span></span><br><span class="line"><span class="comment">2.盒子的左右外边距设为auto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="comment">/*上下为0，左右为auto，常用*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">行内元素水平居中: text-align:center</span></span><br><span class="line"><span class="comment">行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，设置了也没用</span></span><br><span class="line"><span class="comment">但是块级元素和行内块元素就可以了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">嵌套块元素垂直外边距塌陷</span></span><br><span class="line"><span class="comment">两个嵌套关系的块元素，父元素有上外边距同时子元素也有，此时父元素会塌陷较大的外边距值</span></span><br><span class="line"><span class="comment">解决方法:为父元素添加overflow:hidden</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*不会增加盒子大小*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除全部内外边距*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="圆角边框-重点"><a href="#圆角边框-重点" class="headerlink" title="圆角边框(重点)"></a>圆角边框(重点)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*圆角边框*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	border-radius:10px;/*可以是px也可以是百分值*/‘</span><br><span class="line">    <span class="selector-tag">border-radius</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;<span class="comment">/*顺时针*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="盒子阴影-重点"><a href="#盒子阴影-重点" class="headerlink" title="盒子阴影(重点)"></a>盒子阴影(重点)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*盒子阴影*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>) inset;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    水平阴影 垂直阴影 模糊距离 阴影的尺寸 阴影的颜色 将外部阴影改为内部阴影</span></span><br><span class="line"><span class="comment">    前两个必需，后面非必须</span></span><br><span class="line"><span class="comment">    盒子阴影不占用空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*鼠标经过添加阴影效果*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>) inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><blockquote>
<p>浮动可以改变元素标签默认的排列方式</p>
<p>float属性用于创建浮动框,移动直到遇到左边缘或右边缘及包含块或另一个浮动框的边缘</p>
<p> 多个块级元素纵向排列找标准流，横向排列找浮动</p>
<p>浮动元素经常和标准流的父级搭配使用</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>:none/left/right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浮动特性-重难点"><a href="#浮动特性-重难点" class="headerlink" title="浮动特性(重难点)"></a>浮动特性(重难点)</h3><p>特性：</p>
<ul>
<li>浮动元素会脱离标准流的控制(俗称脱标)</li>
<li>浮动的盒子不再保留原先的位置，即不占有位置</li>
<li>如果有多个盒子设置浮动，他们会按照属性值一行内显示且顶端对齐</li>
<li>浮动的元素贴在一起没有缝隙</li>
<li>元素添加浮动后会拥有行内块元素的特性</li>
<li>一个元素浮动了，理论上其余的兄弟元素也要浮动</li>
</ul>
<p>浮动与标准流：</p>
<ul>
<li><p>浮动只会压住后面的标准流，前面的标准流不会被压住</p>
</li>
<li><p>浮动后有标准流，标准流会出现在浮动的下面</p>
</li>
</ul>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><blockquote>
<p>因为浮动盒子是不占有位置的，所以父元素没有高度了，会对后面元素排版产生影响</p>
<p>所以需要清除浮动</p>
<p>清除浮动的本质是清除浮动元素造成的影响</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">	<span class="attribute">clear</span>:both;<span class="comment">/*一般开发用both*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*额外标签法：</span></span><br><span class="line"><span class="comment">找到最后一个浮动标签，写clear:both;*/</span></span><br><span class="line">div class=&quot;a&quot;</span><br><span class="line">div class=&quot;b&quot;</span><br><span class="line">div class=&quot;clear&quot;/*最后一个标签,必须是块级元素才行*/</span><br><span class="line"></span><br><span class="line"><span class="comment">/*父级添加overflow*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*优点：简洁；缺点：无法显示溢出的部分*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*父级添加:after伪元素法,给每个后面添加新盒子*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*双伪元素清除浮动*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow</span><br><span class="line">2.自身属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</span><br><span class="line">3.文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</span><br><span class="line">4.其他属性(CSS3)：content&#x2F;cursor&#x2F;boorder-radius&#x2F;box-shadow...</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*导航栏	.nav*&#x2F;</span><br><span class="line">使用li+a表示链接</span><br><span class="line">给li加浮动变为一行</span><br></pre></td></tr></table></figure>



<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><blockquote>
<p>定位=定位模式+边偏移</p>
</blockquote>
<h3 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h3><ul>
<li>static:静态定位</li>
<li>relative:相对定位</li>
<li>absolute:绝对定位</li>
<li>fixed:固定定位</li>
</ul>
<h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><p>子级使用绝对定位，父级则需要使用相对定位</p>
<ul>
<li>子级绝对定位，不会占有位置，可以放到父盒子的任何一个地方，不会影响其他的兄弟盒子</li>
<li>父盒子需要加定位限制子盒子在父盒子内显示</li>
<li>父盒子布局需要占有位置所以只能是相对定位</li>
</ul>
<h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><p>静态定位按照标准流特性摆放位置，没有边偏移</p>
<p>很少用到，了解即可</p>
<h4 id="相对定位-重要"><a href="#相对定位-重要" class="headerlink" title="相对定位(重要)"></a>相对定位(重要)</h4><ul>
<li>相对定位是在元素移动位置时，相对于它原来的位置</li>
<li>虽然它相对于自己原来位置，但是它原来的位置保留，后面的盒子仍然以标准流方式对待他</li>
<li>最典型的应用是给绝对定位当爹的</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/11/06/C3/4.jpg" alt="原位置" style="zoom: 33%;">

<img src="/2020/11/06/C3/5.jpg" alt="相对定位后" style="zoom: 33%;">

<h4 id="绝对定位-重要"><a href="#绝对定位-重要" class="headerlink" title="绝对定位(重要)"></a>绝对定位(重要)</h4><ul>
<li>绝对定位时元素在移动位置时，相对于它祖先元素来说的</li>
<li>没有祖先元素或祖先元素没有定位，则根据浏览器的为准</li>
<li>如果父元素有定位，则以最近一级有定位父级元素为准</li>
<li>绝对定位不再占有原先位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="固定定位-重要"><a href="#固定定位-重要" class="headerlink" title="固定定位(重要)"></a>固定定位(重要)</h4><ul>
<li>固定定位是元素固定于浏览器可视区域的位置</li>
<li>主要使用在浏览器滚动元素时位置不改变</li>
<li>以浏览器的可视窗口为参照点移动元素</li>
<li>跟父元素没有关系</li>
<li>固定定位不占有原先位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*固定到版心右侧*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">405px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h4><p>相对定位和固定定位混合</p>
<ul>
<li>以浏览器的可视窗口为参照点移动元素</li>
<li>粘性定位占有原先位置</li>
<li>必须添加top、left、bottom、right 其中一个才有效 </li>
<li>兼容性较差</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:sticky;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><ul>
<li>top 相对于其父元素上边线的距离</li>
<li>bottom 相对于其父元素下边线的距离</li>
<li>left 相对于其父元素左边线的距离</li>
<li>right 相对于其父元素右边线的距离</li>
</ul>
<h3 id="定位叠放"><a href="#定位叠放" class="headerlink" title="定位叠放"></a>定位叠放</h3><p>盒子重叠时使用z-index控制盒子前后次序</p>
<ul>
<li>如果属性值相同，则按书写顺序，后来居上</li>
<li>z-index默认取值auto，可以为正负数</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">100px</span>;<span class="comment">/*盒子的50%*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定位特殊特性"><a href="#定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">行内元素添加绝对或者固定定位，可以直接设置高度和宽度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">weight</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">块级元素添加绝对或者固定定位，不给宽度或者高度，默认大小是内容大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="绝对-固定定位会压住盒子"><a href="#绝对-固定定位会压住盒子" class="headerlink" title="绝对/固定定位会压住盒子"></a>绝对/固定定位会压住盒子</h4><ul>
<li>浮动元素不同，只会压住下面标准流的盒子，不会压住下面标准流盒子里面的文字(图片)</li>
<li>绝对定位/固定定位会压住下面标准流的所有内容</li>
</ul>
<h2 id="显示-隐藏元素"><a href="#显示-隐藏元素" class="headerlink" title="显示/隐藏元素"></a>显示/隐藏元素</h2><ul>
<li>display</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display值</p>
<ul>
<li>none：隐藏对象，不占有原位置</li>
<li>block：除了转化为块级元素外，还有显示元素的意思</li>
</ul>
<h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p>visibility值：</p>
<ul>
<li>inherit：继承父对象的可见性</li>
<li>visible：可见</li>
<li>hidden：不可见，继续占有原位置</li>
</ul>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>对溢出部分显示/隐藏</p>
<ul>
<li>有定位的盒子，慎用overflow:hidden，因为它会隐藏多余的部分</li>
</ul>
<p>overflow值：</p>
<ul>
<li>visible</li>
<li>hidden</li>
<li>scroll：滚动条，没有超出也有</li>
<li>auto：在溢出时加滚动条</li>
</ul>
<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><blockquote>
<p>将网页中多个背景小图片整合到大图片，减少请求次数</p>
<p>背景图片经常更换故不用这种方法</p>
<p>基本原理是将精灵图移动到想显示的背景，background-position，一般是负值</p>
<p>适用于一些结构和样式较复杂的图片</p>
<p>缺点：图片文件还是较大的，图片放大缩小会失真，更换复杂</p>
</blockquote>
<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><blockquote>
<p>主要用于显示网页中通用、常用的一些小图标</p>
<p>本质是文字</p>
<p>适用于一些结构和演示比较简单的的小图标</p>
</blockquote>
<p>网站：</p>
<ul>
<li>icomoon</li>
<li>iconfont</li>
</ul>
<h3 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h3><img src="/2020/11/06/C3/6.jpg" style="zoom: 67%;">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">fontsize</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">cursor</span>:default;<span class="comment">/*默认*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:pointer;<span class="comment">/*小手*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:move;<span class="comment">/*移动*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:text;<span class="comment">/*文本*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:not-allowed;<span class="comment">/*禁止*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*取消表单轮廓*/</span></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">	<span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取消文本域拖拽*/</span></span><br><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line">	<span class="attribute">resize</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><blockquote>
<p>用于设置一个元素的垂直对齐方式，但它只针对行内元素或行内块元素有效</p>
</blockquote>
<p>vertical-align:</p>
<ul>
<li>bottom：底线对齐</li>
<li>middle：中线对齐</li>
<li>top：顶线对齐</li>
</ul>
<h3 id="解决图片底侧空白缝隙"><a href="#解决图片底侧空白缝隙" class="headerlink" title="解决图片底侧空白缝隙"></a>解决图片底侧空白缝隙</h3><p>因为行内块元素会和文字的基线对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法一：改对齐,提倡*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>:bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法二：将图片改为行内块元素*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="溢出的文字用省略号"><a href="#溢出的文字用省略号" class="headerlink" title="溢出的文字用省略号"></a>溢出的文字用省略号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单行文本溢出省略号*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;<span class="comment">/*不允许换行*/</span></span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;<span class="comment">/*文字溢出的时候用省略号*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*多行文本溢出显示省略号:有兼容性问题,一般用在webkit*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">    <span class="attribute">display</span>:-webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><h4 id="margin负值应用"><a href="#margin负值应用" class="headerlink" title="margin负值应用"></a>margin负值应用</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*多边框时margin出现双倍宽度，不同于原来的表格*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框选中四边*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*1.盒子没有定位时*/</span></span><br><span class="line">    <span class="attribute">position</span>: relative;<span class="comment">/*不选相对定位右边会被覆盖*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*2.盒子有定位，提高层级即可*/</span></span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片周围浮动文字"><a href="#图片周围浮动文字" class="headerlink" title="图片周围浮动文字"></a>图片周围浮动文字</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*浮动元素不会压住文字*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="行内块巧妙运用"><a href="#行内块巧妙运用" class="headerlink" title="行内块巧妙运用"></a>行内块巧妙运用</h4><p>分页码</p>
<h4 id="CSS三角巧妙运用"><a href="#CSS三角巧妙运用" class="headerlink" title="CSS三角巧妙运用"></a>CSS三角巧妙运用</h4><p><img src="/2020/11/06/C3/7.jpg"></p>
<h2 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h2>]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>H5</title>
    <url>/2020/11/06/H5/</url>
    <content><![CDATA[<h1 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>浏览器内核(渲染引擎)：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>Trident</td>
<td>IE、猎豹、360、百度</td>
</tr>
<tr>
<td>FireFox</td>
<td>Gecko</td>
<td>火狐</td>
</tr>
<tr>
<td>Safari</td>
<td>Webkit</td>
<td>苹果</td>
</tr>
<tr>
<td>Chrome/Opera</td>
<td>Blink</td>
<td>chrome/opera，blink其实是webkit的分支</td>
</tr>
</tbody></table>
<h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><p>包括结构、表现和行为</p>
<table>
<thead>
<tr>
<th>标准</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>结构用于对网页元素进行分类和整理，HTML</td>
</tr>
<tr>
<td>表现</td>
<td>表现用于设置网页元素的版式、颜色大小等外观样式，CSS</td>
</tr>
<tr>
<td>行为</td>
<td>行为是指网页模型的定义及交互的编写，JavaScript</td>
</tr>
</tbody></table>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul>
<li>!DOCTYPE:文档类型声明，告诉浏览器使用哪种HTML版本来显示网页</li>
<li>lang:当前文档的显示语言，如zh-CN中文，en英文</li>
<li>charset:字符集，如UTF-8</li>
</ul>
<p>其余部分学过，略过</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/11/06/ES6/</url>
    <content><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>var：</p>
<ul>
<li>可以重复声明</li>
<li>没有块级作用域</li>
</ul>
<p>let/const：</p>
<ul>
<li>不可以重复声明</li>
<li>有块级作用域</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>如果只有一个参数()可以省略</li>
<li>如果只有一个返回值{}可以省略</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有一个参数</span></span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="params">a</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">return</span> a*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个返回值</span></span><br><span class="line"><span class="keyword">let</span> show=<span class="function">(<span class="params">a,index</span>)=&gt;</span>a*<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h2 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b,c,...</span>)//可以有多个参数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//作用：</span></span><br><span class="line"><span class="function">//1.收集剩余参数</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">show</span>(<span class="params">a,b,...args</span>)</span></span><br><span class="line"><span class="function">//2.展开数组</span></span><br><span class="line"><span class="function"><span class="title">show</span>(<span class="params">...arr</span>)</span></span><br><span class="line">//即将arr=[]里面的东西全部拿出来</span><br></pre></td></tr></table></figure>



<h2 id="默认参数-amp-解构赋值"><a href="#默认参数-amp-解构赋值" class="headerlink" title="默认参数&amp;解构赋值"></a>默认参数&amp;解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b=<span class="number">5</span>,c=<span class="number">10</span></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值:解构赋值必须声明和赋值一起</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> &#123;a,c,d&#125;=&#123;<span class="attr">a</span>:<span class="number">12</span>,<span class="attr">c</span>:<span class="number">5</span>,<span class="attr">d</span>:<span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">let</span> [json,arr,string]=[&#123;<span class="attr">a</span>:<span class="number">5</span>,<span class="attr">b</span>:<span class="number">10</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">&#x27;aaa&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map、reduce、filter、forEach</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map,映射</span></span><br><span class="line"><span class="keyword">let</span> result=arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce汇总</span></span><br><span class="line"><span class="keyword">let</span> result=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tmp,item,index</span>)</span>&#123;<span class="comment">//分别是暂时的结果,输入的值,索引</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter过滤器</span></span><br><span class="line">arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(...)&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;<span class="comment">//true返回</span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;&#125;)<span class="comment">//false不返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach迭代器</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.startsWith(<span class="string">&#x27;a&#x27;</span>)<span class="comment">//以a开头的字符串</span></span><br><span class="line">str.endsWith(<span class="string">&#x27;b&#x27;</span>)<span class="comment">//以b结尾的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模版字符串</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">`aaa<span class="subst">$&#123;title&#125;</span>`</span><span class="comment">//模版字符串使用反单引号,取变量用$&#123;&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面向对象</span></span><br><span class="line">Class User&#123;</span><br><span class="line">	constractor(name,pass)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name=name</span><br><span class="line">		<span class="built_in">this</span>.pass=pass</span><br><span class="line">	&#125;</span><br><span class="line">	showName()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,pass,level)&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,pass)</span><br><span class="line">        <span class="built_in">this</span>.level=level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel()&#123;<span class="comment">//其余方法可以从父类继承</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> v1=<span class="keyword">new</span> VipUser(<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">v1.showName()</span><br></pre></td></tr></table></figure>



<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(json)<span class="comment">//把json变成字符串，不然就是一个object</span></span><br><span class="line"><span class="comment">//str转JSON标准写法</span></span><br><span class="line"><span class="comment">//1.只能用双引号</span></span><br><span class="line"><span class="comment">//2.所有名字都必须用引号包起来</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;&#123;&quot;a&quot;:12,&quot;b&quot;:5&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> json=<span class="built_in">JSON</span>.parse(str) <span class="comment">//把字符串变成json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON简写</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> json=&#123;<span class="attr">a</span>:a,<span class="attr">b</span>:b&#125;</span><br><span class="line"><span class="keyword">let</span> json=&#123;a,b,<span class="attr">c</span>:<span class="number">55</span>&#125;<span class="comment">//当名字和值一样时可以简写</span></span><br></pre></td></tr></table></figure>



<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Promise用同步的方式写异步方法,封装</span></span><br><span class="line"><span class="comment">//Promise.all 多个请求都同时成功才res，不然err</span></span><br><span class="line"><span class="built_in">Promise</span>.all([$.ajax(),$.ajax()].then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise.race 竞速</span></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">    </span><br><span class="line">])</span><br></pre></td></tr></table></figure>



<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Generator 生成器--特殊函数,中间能暂停</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span><span class="comment">//暂停,可以用来请求数据</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line">genObj.next()<span class="comment">//执行a</span></span><br><span class="line">genObj.next()<span class="comment">//执行b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//yield传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> a=<span class="keyword">yield</span><span class="comment">//暂停</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    alert(a)<span class="comment">//结果为5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line">genObj.next(<span class="number">12</span>)<span class="comment">//没法给yield传参</span></span><br><span class="line">genObj.next(<span class="number">5</span>)<span class="comment">//执行b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//yield 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">12</span><span class="comment">//暂停,可以用来请求数据</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line"><span class="keyword">let</span> res1=genObj.next()</span><br><span class="line"><span class="built_in">console</span>.log(res1)<span class="comment">//value:12,done:fales</span></span><br><span class="line"><span class="keyword">let</span> res2=genObj.next()</span><br><span class="line"><span class="built_in">console</span>.log(res2)<span class="comment">//value:undefind,done:true</span></span><br></pre></td></tr></table></figure>



<h3 id="Runner实例"><a href="#Runner实例" class="headerlink" title="Runner实例"></a>Runner实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">runner(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> data1=<span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">	<span class="keyword">let</span> data2=<span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模块通过webpack编译才能使用</span></span><br><span class="line"><span class="built_in">module</span>.exports&#123;</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    entry:<span class="string">&#x27;./js/index.js&#x27;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">        filename:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出(export)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span><span class="comment">//默认成员</span></span><br><span class="line"><span class="comment">//导入(import)</span></span><br><span class="line"><span class="keyword">import</span> mod1 <span class="keyword">from</span> <span class="string">&#x27;./mod1&#x27;</span> <span class="comment">//相当于import default mod1 from &#x27;./mod1&#x27; 引入default成员</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mod1 <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span> <span class="comment">//引入所有成员</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b <span class="keyword">as</span> name2&#125; <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化</title>
    <url>/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><h2 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h2><p>使用模块化思想进行划分，举tabbar例子</p>
<ol>
<li><p>如App.vue调用tabbar，使用import调用maintabbar，components里面调用，就可以在template里面调用该组件maintabbar/</p>
<p><img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/1.jpg"></p>
</li>
<li><p>在components里面创建common和content，common里面写多个项目都可以调用的组件，content里面写目前项目使用的<img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/2.jpg"></p>
</li>
<li><p>content里面的组件调用common公用组件tabbar和tabbarItem去实现目前项目所需的tabbar<img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/3.jpg"></p>
</li>
<li><p>maintabbar的template写入tabbar，tabbar里面写tabbaritem，tabbaritem里面写img slot插槽和div slot插槽，并导入tabbar和tabbaritem</p>
<p><img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/4.jpg"></p>
</li>
<li><p>插槽里的name注意和tabbaritem里面一致</p>
<p><img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/5.jpg">tabbar.vue</p>
<p><img src="/2020/11/02/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/6.jpg">tabbarItem.vue</p>
</li>
</ol>
<h2 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h2>]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>vueP1</title>
    <url>/2020/10/23/vueP1/</url>
    <content><![CDATA[<h1 id="VueP1"><a href="#VueP1" class="headerlink" title="VueP1"></a>VueP1</h1><h2 id="vue目录"><a href="#vue目录" class="headerlink" title="vue目录"></a>vue目录</h2><p><img src="/2020/10/23/vueP1/1.png"></p>
<p>项目加载main.js-&gt;app.vue-&gt;index.js-&gt;helloworld.vue</p>
<ul>
<li>mainjs:程序入口，初始化vue实例并使用插件，加载各种公用组件</li>
<li>APPvue:主组件，页面入口文件，构建定义及页面组件归集</li>
<li>router indexjs：准备好的路由组件注册到路由里</li>
<li>index.html:文件路口</li>
<li>node_modules：依赖模块</li>
<li>build：配置webpack基本配置、开发环境配置等</li>
</ul>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>webpack.base.conf.js 注释createLintingRule()清除拼写检查</li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul>
<li>template:写html模版，且内部必须有一个根元素div</li>
<li>script:写JavaScript</li>
<li>style:写样式</li>
<li>div:块级元素，将文档分割，固定换行</li>
<li>export default: 导出模块，当别的模块需要导出数据时</li>
<li>new Vue() 写在mainjs，其他文件使用export default就行</li>
</ul>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>Model ViewModel View</p>
<img src="/2020/10/23/vueP1/1.jpg" style="zoom:150%;">

<p>DOM Listeners：DOM监听</p>
<p>Data Bindings：数据绑定</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="/2020/10/23/vueP1/2.png"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs数据泄漏</title>
    <url>/2020/10/22/nodejs%E6%95%B0%E6%8D%AE%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<h1 id="Nodejs内存泄漏"><a href="#Nodejs内存泄漏" class="headerlink" title="Nodejs内存泄漏"></a>Nodejs内存泄漏</h1><h2 id="第一部分：寻找原因"><a href="#第一部分：寻找原因" class="headerlink" title="第一部分：寻找原因"></a>第一部分：寻找原因</h2><p>前几天老是发现后台挂了，去检查nohup.out文件发现报了JS内存泄漏</p>
<p><img src="/2020/10/22/nodejs%E6%95%B0%E6%8D%AE%E6%B3%84%E6%BC%8F/1.jpg"></p>
<p>一运行20m以后就到100%CPU，node使用的CPU一直在增加，是node内存泄漏的标志</p>
<p>由于前后端都是用基于JS，所以先得排查是前端还是后端的问题</p>
<p>前端把nginx停了以后，发现CPU还是增长，所以应该不是前端问题</p>
<h2 id="第二部分：排查后端"><a href="#第二部分：排查后端" class="headerlink" title="第二部分：排查后端"></a>第二部分：排查后端</h2><p>从网上查到Nodejs的内存泄漏有以下可能</p>
<ol>
<li>全局变量 (排除)</li>
<li>闭包 (排除)</li>
<li>事件监听 (待排查)</li>
<li>缓存使用不当 (可能)</li>
<li>内存没有即时释放 (排除，查看了node使用内存)</li>
<li>SetTimeOut方法 (待排查)</li>
</ol>
<blockquote>
<p><em>先关闭了Egg定时器发现CPU增长不是线性增长而是阶梯增长的，但是还会增加到100%</em></p>
<p><em>然后关了监听还是如此，但是可以跑24h了，缓存用的也不是很多</em>，缓存使用不当也排除了</p>
</blockquote>
<h2 id="第三部分：意外之喜"><a href="#第三部分：意外之喜" class="headerlink" title="第三部分：意外之喜"></a>第三部分：意外之喜</h2><p>在整理Linux命令的时候使用了netstat指令</p>
<p>后面发现一直在给以前项目发数据包</p>
<p>于是去问后端怎么回事</p>
<p>原来是WAMP没有关掉</p>
<p>关掉后CPU就在3-20%之间来回了</p>
<p>舒服了</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>crawl:Fund</title>
    <url>/2020/10/20/crawl-Fund/</url>
    <content><![CDATA[<h1 id="爬虫：基金"><a href="#爬虫：基金" class="headerlink" title="爬虫：基金"></a>爬虫：基金</h1><p>因为发现以前找基金的方法太经验化了，所以准备整个排序</p>
<ul>
<li>去除了三年以内的建立的基金</li>
<li>去除了部分值</li>
<li>去除了累计净值&lt;1的基金</li>
<li>去除了三年和&lt;100%的基金</li>
</ul>
<p>部分结果展示：</p>
<p><img src="/2020/10/20/crawl-Fund/1.jpg"></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>python：3.8</p>
<p>工具：Spyder</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getL</span>():</span></span><br><span class="line">    url=<span class="string">&#x27;http://fund.eastmoney.com/data/rankhandler.aspx?op=ph&amp;dt=kf&amp;ft=zs&amp;rs=&amp;gs=0&amp;sc=1nzf&amp;st=desc&amp;sd=2019-10-18&amp;ed=2020-10-20&amp;qdii=|&amp;tabSubtype=,,,,,&amp;pi=1&amp;pn=10000&amp;dx=1&amp;v=0.9486377750883621&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fund.eastmoney.com&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fund.eastmoney.com/data/fundranking.html&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    funds=[]<span class="comment">#基金列表</span></span><br><span class="line">    datas=eval(re.findall(<span class="string">&#x27;\[.*?\]&#x27;</span>,text,re.S)[<span class="number">0</span>])<span class="comment">#[]找到基金信息</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        funds.append(data)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;funds.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;基金代码,基金名称,名字缩写,日期,单位净值,累计净值,日增长率,近一周,近一月,近三月,近六月,近一年,近两年,近三年,今年来,成立来,1,2,3,4,手续费,5,6,7,8\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> fund <span class="keyword">in</span> funds:</span><br><span class="line">            f.write(fund+<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#写入文件</span></span><br><span class="line">    fileNameStr = <span class="string">&#x27;funds.csv&#x27;</span></span><br><span class="line">    DataDF = pd.read_csv(fileNameStr,encoding = <span class="string">&quot;gbk&quot;</span>,dtype = str)<span class="comment">#读取csv文件</span></span><br><span class="line">    DataDF.drop(<span class="string">&#x27;日期&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)<span class="comment">#去除列</span></span><br><span class="line">    DataDF.drop(<span class="string">&#x27;日增长率&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近一周&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近一月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近三月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近六月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;今年来&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;1&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;2&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;3&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;4&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;5&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;6&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;7&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;8&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;名字缩写&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近一年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近两年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近三年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;累计净值&#x27;</span>].replace(<span class="string">&#x27;0.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    add= <span class="keyword">lambda</span> x,y,z:float(x)+float(y)+float(z)</span><br><span class="line">    DataDF[<span class="string">&#x27;三年和&#x27;</span>] = DataDF.apply(<span class="keyword">lambda</span> x:add(x[<span class="string">&#x27;近一年&#x27;</span>],x[<span class="string">&#x27;近两年&#x27;</span>],x[<span class="string">&#x27;近三年&#x27;</span>]),axis=<span class="number">1</span>)</span><br><span class="line">    DataDF.sort_values(by=<span class="string">&#x27;三年和&#x27;</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">True</span>)<span class="comment">#排序</span></span><br><span class="line">    DataDF.to_csv(<span class="string">&#x27;funds.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>,index=<span class="literal">False</span>, line_terminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>():</span><span class="comment">#在getL()里面replace不了不知道为什么</span></span><br><span class="line">    fileNameStr = <span class="string">&#x27;funds.csv&#x27;</span></span><br><span class="line">    DataDF = pd.read_csv(fileNameStr,encoding = <span class="string">&quot;gbk&quot;</span>,dtype = str)</span><br><span class="line">    DataDF[<span class="string">&#x27;三年和&#x27;</span>].replace(<span class="string">&#x27;^[0-9]&#123;1&#125;[0-9]&#123;1&#125;.&#123;1&#125;[0-9]*$&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.dropna(how=<span class="string">&#x27;any&#x27;</span>,inplace=<span class="literal">True</span>)<span class="comment">#去除整行有缺失值的</span></span><br><span class="line">    DataDF.to_csv(<span class="string">&#x27;funds.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>,index=<span class="literal">False</span>, line_terminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    getL()</span><br><span class="line">    cut()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>



<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>也没有涉及到多个页面，就小试牛刀</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>crawl</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>crawl:Picture</title>
    <url>/2020/10/20/crawl-Picture/</url>
    <content><![CDATA[<h1 id="爬虫：爬取图片"><a href="#爬虫：爬取图片" class="headerlink" title="爬虫：爬取图片"></a>爬虫：爬取图片</h1><p>无意间在知乎上看见爬妹子图的爬虫教程，很感兴趣，但是可惜妹子图网站没了</p>
<p>但这并不能阻挡我使用爬虫</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>python版本：3.6.3</p>
<p>工具：python自带IDLE</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>因为我个人比较喜欢直接开干所以直接放代码，要说的都在注释里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局对象好调用</span></span><br><span class="line">d1=&#123;<span class="number">0</span>:<span class="string">&#x27;0&#x27;</span>&#125;<span class="comment">#字典对象</span></span><br><span class="line">c=<span class="number">1</span><span class="comment">#计数</span></span><br><span class="line">title=<span class="string">&#x27;&#x27;</span><span class="comment">#标题</span></span><br><span class="line">UserAgent_List = [<span class="comment">#因为长时间爬网站会发现并拒绝访问，所以爬一次重新换一次头，用random实现</span></span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getL</span>():</span><span class="comment">#获取页面内容</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List</span><br><span class="line">    url=<span class="string">&#x27;...&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),<span class="comment">#random使用头部</span></span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span><span class="comment">#gbk编码</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    <span class="comment">#print(bs.prettify()) # 格式化html结构</span></span><br><span class="line">    title=bs.find(<span class="string">&#x27;tbody&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&#x27;table-layout:fixed;&#x27;</span>&#125;).findAll(<span class="string">&#x27;tr&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;tr3 t_one tac&#x27;</span>&#125;)<span class="comment">#通过寻找bs里面的标签来寻找内容，如前面就是在寻找tbody里面有style：table...属性的标签</span></span><br><span class="line">    <span class="keyword">global</span> c<span class="comment">#引用全局变量</span></span><br><span class="line">    <span class="keyword">global</span> d1</span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> title:</span><br><span class="line">        txd=tx.findAll(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> txdd <span class="keyword">in</span> txd:</span><br><span class="line">            txa=str(<span class="string">&#x27;...&#x27;</span>+txdd.find(<span class="string">&#x27;a&#x27;</span>).attrs[<span class="string">&quot;href&quot;</span>])<span class="comment">#attrs寻找属性</span></span><br><span class="line">            txb=str(txdd.find(<span class="string">&#x27;a&#x27;</span>).contents[<span class="number">0</span>])<span class="comment">#contents获取标签里的明文内容</span></span><br><span class="line">            txd=str(tx.contents)</span><br><span class="line">            d1[c]=txa</span><br><span class="line">            <span class="keyword">if</span> (re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd) ):<span class="comment">#正则表达匹配繁体字</span></span><br><span class="line">                txc=str(re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd).group(<span class="number">0</span>))<span class="comment">#group获取正则匹配结果</span></span><br><span class="line">                <span class="keyword">if</span>(txc!=<span class="string">&#x27;[...]&#x27;</span> <span class="keyword">and</span> txc!=<span class="string">&#x27;[...]&#x27;</span>):</span><br><span class="line">                    print(str(c)+<span class="string">&#x27;.&#x27;</span>+txc+txb+<span class="string">&#x27;\n&#x27;</span>+txa+<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                    c=c+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exc</span>(<span class="params">url</span>):</span><span class="comment">#执行下载</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),</span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    <span class="comment">#print(bs.prettify()) # 格式化html结构</span></span><br><span class="line">    <span class="keyword">global</span> title</span><br><span class="line">    title=bs.find(<span class="string">&#x27;head&#x27;</span>).find(<span class="string">&#x27;meta&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;description&#x27;</span>&#125;).attrs[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">    num=re.search(<span class="string">&#x27;[0-9]\d&#x27;</span>, title)</span><br><span class="line">    print(num.group())<span class="comment">#group()获得匹配结果</span></span><br><span class="line">    print(title)</span><br><span class="line">    os.makedirs(<span class="string">&#x27;py/&#x27;</span>+title)</span><br><span class="line">    t=bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;t t2&#x27;</span>&#125;).findAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> t:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        b=str(a)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            txd=tx.attrs[<span class="string">&quot;ess-data&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        img_html = requests.get(txd, headers=headers) </span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;py/&#x27;</span>+title+<span class="string">&#x27;/&#x27;</span>+b+<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#存为图片</span></span><br><span class="line">            f.write(img_html.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(str(a)+<span class="string">&#x27;.&#x27;</span>+txd)<span class="comment">#打印链接</span></span><br><span class="line">            a=a+<span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;下载结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span>():</span><span class="comment">#选择列表下载</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        getL()</span><br><span class="line">        d1.values() </span><br><span class="line">        print(<span class="string">&#x27;数字列表样例(1,7,10,50)&#x27;</span>)</span><br><span class="line">        lists = ast.literal_eval(input(<span class="string">&quot;请输入数字列表，使用逗号隔开: 注意必须是英文括号逗号&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span><br><span class="line">            exc(d1[l])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;请记得删除下载失败的文件夹否则会报错&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;要删除的文件夹为当前目录下:py/&#x27;</span>+title)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topic</span>():</span><span class="comment">#选择主题下载</span></span><br><span class="line">        getL()</span><br><span class="line">        f=input(<span class="string">&#x27;请选择主题1.[...] 2.[...] 3.[...]&#x27;</span>)</span><br><span class="line">        d2=&#123;<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">        <span class="keyword">elif</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">        <span class="keyword">elif</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdl</span>(<span class="params">t</span>):</span><span class="comment">#主题具体下载</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List<span class="comment">#图省事复制粘贴的getH()</span></span><br><span class="line">    url=<span class="string">&#x27;...&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),</span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    title=bs.find(<span class="string">&#x27;tbody&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&#x27;table-layout:fixed;&#x27;</span>&#125;).findAll(<span class="string">&#x27;tr&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;tr3 t_one tac&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> title:</span><br><span class="line">        txd=tx.findAll(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> txdd <span class="keyword">in</span> txd:</span><br><span class="line">            txa=str(<span class="string">&#x27;https://cl.hn32.xyz/&#x27;</span>+txdd.find(<span class="string">&#x27;a&#x27;</span>).attrs[<span class="string">&quot;href&quot;</span>])</span><br><span class="line">            txb=str(txdd.find(<span class="string">&#x27;a&#x27;</span>).contents[<span class="number">0</span>])</span><br><span class="line">            txd=str(tx.contents)</span><br><span class="line">            <span class="keyword">if</span> (re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd) ):<span class="comment">#匹配繁体字</span></span><br><span class="line">                txc=str(re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd).group(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">if</span>(txc==t):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        exc(txa)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;请选择列表/主题下载&#x27;</span>)</span><br><span class="line">    e=input(<span class="string">&#x27;列表下载输入1，主题下载输入2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> e==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        w()</span><br><span class="line">    <span class="keyword">elif</span> e==<span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        topic()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入错误请重新输入&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>



<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>当时写了几个小时吧，还是很有意思的，简而言之就是对标签内容的获取然后下载</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>crawl</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>comPy</title>
    <url>/2020/10/12/comPy/</url>
    <content><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>常用库与响应操作</p>
<h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)) <span class="comment">#[1, 2, 3, 4, 5, 6]  将一个可迭代对象转换成列表</span></span><br><span class="line"></span><br><span class="line">tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) <span class="comment">#(1, 2, 3, 4, 5, 6)将一个可迭代对象转换成元组</span></span><br><span class="line"></span><br><span class="line">reversed() <span class="comment">#将一个序列翻转, 返回翻转序列的迭代器</span></span><br><span class="line"></span><br><span class="line">slice(start_index:end_index:step) <span class="comment">#列表的切片 st开始，en结束，step方向&gt;0，从左往右反之向左</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">slice(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">#[2,3]</span></span><br><span class="line"></span><br><span class="line">repr() <span class="comment">#返回一个对象的String形式</span></span><br><span class="line"></span><br><span class="line">len() <span class="comment">#返回一个对象中元素的个数</span></span><br><span class="line"></span><br><span class="line">sorted() <span class="comment">#对可迭代对象进行排序操作(lamda)</span></span><br><span class="line"></span><br><span class="line">all() <span class="comment">#可迭代对象中全是True才是True</span></span><br><span class="line">any() <span class="comment">#可迭代对象中有一个是True才是True</span></span><br><span class="line"></span><br><span class="line">filter() <span class="comment">#用lamda过滤</span></span><br><span class="line"></span><br><span class="line">map(f, lst) <span class="comment"># 把可迭代对象中的每一个元素传递给前面的函数进行处理. 处理的结果会返回成迭代器[1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line">range() <span class="comment">#生成数据</span></span><br><span class="line">next() <span class="comment">#迭代器向下执行一次, 内部实际使用了__ next__()方法返回迭代器的下一个项目</span></span><br><span class="line">iter() <span class="comment">#获取迭代器</span></span><br><span class="line"></span><br><span class="line">eval() <span class="comment">#执行字符串类型的编码并返回结果，如输入8+9 返回17</span></span><br><span class="line">exec() <span class="comment">#执行代码但不返回内容</span></span><br><span class="line">compile() <span class="comment">#将字符串类型的代码编码. 代码对象能够通过exec语句来执行或者eval()进行求值</span></span><br><span class="line"></span><br><span class="line">hash() <span class="comment">#获取到对象的hash值</span></span><br><span class="line"></span><br><span class="line">dir() <span class="comment">#查看对象的内置属性</span></span><br></pre></td></tr></table></figure>



<h3 id="you-get-获取媒体内容"><a href="#you-get-获取媒体内容" class="headerlink" title="you-get 获取媒体内容"></a>you-get 获取媒体内容</h3><p>you-get用于从Web下载媒体内容(视频)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载视频</span></span><br><span class="line">you-get 视频地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定存储位置和重命名</span></span><br><span class="line">you-get -o 存放的绝对路径 -O 新名称 视频地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看视频信息</span></span><br><span class="line">you-get -i 视频地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择下载清晰度和格式</span></span><br><span class="line"></span><br><span class="line">you-get --format=视频格式 视频地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载图片同视频</span></span><br></pre></td></tr></table></figure>



<h3 id="爬评论"><a href="#爬评论" class="headerlink" title="爬评论"></a>爬评论</h3>]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2020/10/07/nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>高并发多连接</li>
<li>生态好</li>
<li>跨平台</li>
<li>稳定</li>
</ul>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="/2020/10/07/nginx/1.jpg"></p>
<p>特点：</p>
<ul>
<li>访问原来无法访问的资源，如Google</li>
<li>可以做缓存</li>
<li>客户端认证</li>
<li>记录用户访问记录</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理服务器将客户端发给服务器的请求按照一定规则分发给后端服务器</p>
<p><img src="/2020/10/07/nginx/2.jpg"></p>
<p>特点：</p>
<ul>
<li>保证内网安全：隐藏服务器信息</li>
<li>负载均衡</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>comGit</title>
    <url>/2020/10/06/comGit/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><img src="/2020/10/06/comGit/3.jpg" alt="30" style="zoom:70%;">

<p><img src="/2020/10/06/comGit/4.jpg"></p>
<h3 id="常用命令解析"><a href="#常用命令解析" class="headerlink" title="常用命令解析"></a>常用命令解析</h3><ul>
<li><p>git init 初始化本地仓库，目录下会多加.git隐藏目录</p>
</li>
<li><p>git add  .  把文件修改添加到暂存区</p>
</li>
<li><p>git commit 把暂存区的内容提交到当前分支</p>
</li>
<li><p>git remote add origin … 将本地仓库与远程库关联</p>
</li>
<li><p>git push -u origin master 把本地库的所有内容推送到远程库中，-u参数推送与关联</p>
</li>
<li><p>git push origin master 本地提交后，推送到远程库</p>
</li>
<li><p>git status 查看仓库当前状态</p>
</li>
<li><p>git branch 查看当前分支</p>
</li>
<li><p>git log 查看提交日志</p>
</li>
<li><p>git remote 查看远程库信息</p>
</li>
<li><p>git reset –hard HEAD^ 回退到上一个版本</p>
</li>
<li><p>git reset –hard HEAD commit_id 退到/进到，指定commit的哈希码回退到指定版本</p>
</li>
<li><p>git checkout -b dev 创建新分支dev并切换到dev</p>
</li>
<li><p>git checkout dev 切换到dev分支</p>
</li>
<li><p>git pull 包含一个git fetch和一个git merge</p>
</li>
</ul>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>origin为远程库名称</li>
</ul>
<h2 id="开发者端"><a href="#开发者端" class="headerlink" title="开发者端"></a>开发者端</h2><h3 id="空项目"><a href="#空项目" class="headerlink" title="空项目"></a>空项目</h3><p>在gitlab上创建项目后</p>
<ol>
<li><p>输入git config –global user.name “用户名”</p>
</li>
<li><p>输入git config –global user.email “邮箱”</p>
</li>
<li><p>git init</p>
</li>
<li><p>git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#56;&#x31;&#46;&#x36;&#56;&#46;&#55;&#x33;&#46;&#x35;&#53;">&#103;&#105;&#116;&#x40;&#56;&#x31;&#46;&#x36;&#56;&#46;&#55;&#x33;&#46;&#x35;&#53;</a>:cdx/testp.git  (放项目clone地址)<img src="/2020/10/06/comGit/1.jpg"></p>
</li>
<li><p>git add . //把文件</p>
</li>
<li><p>git commit</p>
</li>
<li><p>git push  -u origin dev</p>
</li>
</ol>
<h3 id="非空项目"><a href="#非空项目" class="headerlink" title="非空项目"></a>非空项目</h3><p>​    往git上传代码</p>
<ol>
<li><p>git add .</p>
</li>
<li><p>git commit -m “(写你的改动描述)” </p>
</li>
<li><p>git pull  #拉服务器代码</p>
</li>
<li><p>git status</p>
<p><img src="/2020/10/06/comGit/2.jpg"></p>
</li>
<li><p>git push</p>
</li>
</ol>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>等到开发者把代码git push origin dev到服务器端后</p>
<p>服务器配置后在命令行输入git pull origin dev将代码拉到本地运行</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2020/10/06/DOM/</url>
    <content><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>大概看了一下第十章的内容，问了学长，个人将DOM归纳为</p>
<ul>
<li>描述HTML结构–节点树(数据结构)</li>
<li>DOM的方法提供给JS一个动态改变HTML的方法–比如弹出框或者增加行</li>
<li>剩下的文章内容就是描述那些方法了，如果用框架的话可以不用考虑这些</li>
</ul>
<p>剩下的内容等以后看源码的时候结合起来思考吧，现在太虚无缥缈了</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
        <category>JS红宝书</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件、目录与磁盘格式</title>
    <url>/2020/10/05/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Linux的文件权限与目录配置"><a href="#Linux的文件权限与目录配置" class="headerlink" title="Linux的文件权限与目录配置"></a>Linux的文件权限与目录配置</h1><p>r(读权限)：表示你可以查询该目录下的文件名，如ls指令</p>
<p>w(写指令)：</p>
<ul>
<li>建立新的文件与目录</li>
<li>删除已存在的文件或目录(不论权限如何，就算只有w也可以！！！)</li>
<li>将已经存在的文件或目录进行更名</li>
<li>移动该目录内的文件、目录位置</li>
</ul>
<p>x(执行权限)</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>内容</th>
<th>r</th>
<th>w</th>
<th>x</th>
</tr>
</thead>
<tbody><tr>
<td>文件</td>
<td>详细数据data</td>
<td>读到文件内容</td>
<td>修改文件内容</td>
<td>执行文件内容</td>
</tr>
<tr>
<td>目录</td>
<td>文件名</td>
<td>读到文件名</td>
<td>修改文件名</td>
<td>进入该目录的权限</td>
</tr>
</tbody></table>
<h2 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h2><p>使用命令ls -al，文件类型权限如下图-rw-r–r–.</p>
<p><img src="/2020/10/05/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/1.jpg"></p>
<p>第一个字符代表这个文件类型，常见的如下：</p>
<ul>
<li>[d]：目录</li>
<li>[-]：文件</li>
<li>[l]：链接文件</li>
</ul>
<p>接下来的三个为一组：</p>
<ul>
<li>第一组为文件拥有者可具备的权限：rw-表示读写权限，但不可执行</li>
<li>第二组为加入此用户组账号的权限</li>
<li>第三组为非本人且没有加入本用户组的其他账号的权限</li>
</ul>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>chgrp：修改文件所属用户组</p>
<p>chown：修改文件拥有者，用此命令需要用数字指代权限，r=4，w=2，x=1，如rwx=7</p>
<p>chmod：修改文件的权限</p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>文件名之前多一个(.)，说明此文件为隐藏文件</li>
<li>root不受系统的权限限制，所有无论文件权限是什么，默认root都可以读写</li>
<li>通常开放的目录至少会具备rx这两个权限</li>
<li>Linux的文件没有扩展名，一个文件能否被执行，与属性有关系，与文件名没关系</li>
</ul>
<h2 id="Linux目录配置–FHS"><a href="#Linux目录配置–FHS" class="headerlink" title="Linux目录配置–FHS"></a>Linux目录配置–FHS</h2><blockquote>
<p>根目录(/)所在的分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内</p>
</blockquote>
<h3 id="根目录下："><a href="#根目录下：" class="headerlink" title="根目录下："></a>根目录下：</h3><p>FHS要求必须要存在的目录：</p>
<ul>
<li>/bin：存放执行文件，此目录下放置的是单人维护模式下还能够使用的命令</li>
<li>/boot：此目录放置启动会使用到的文件</li>
<li>/dev：任何设备和接口设备都以文件形式存在于此目录</li>
<li>/etc：系统内的配置文件几乎都放置在这个目录，FHS建议不要放置可执行文件在这个目录</li>
<li>/lib：此目录放置的是启动时会用到的函数库</li>
<li>/media：此目录放置的是可删除的设备，包括软盘、光盘、DVD等设备</li>
<li>/mnt：暂时挂载某些额外的设备可以放在此目录</li>
<li>/opt：第三方辅助软件放置的目录，如KDE桌面管理系统</li>
<li>/run：系统启动后产生的各项信息</li>
<li>/sbin：启动过程需要的，里面包括了启动、修复、还原系统所需要的命令</li>
<li>/srv：一些网络服务启动后，这些服务所需要使用的数据目录</li>
<li>/tmp：让一般用户或是正在执行的程序暂时放置文件的地方，这个目录任何人都能够存取</li>
<li>/usr：后续介绍</li>
<li>/var：后续介绍</li>
</ul>
<p>FHS建议可以存在的目录：</p>
<ul>
<li>/home：系统默认家目录</li>
<li>/root：系统管理员的家目录</li>
</ul>
<h3 id="usr目录下："><a href="#usr目录下：" class="headerlink" title="usr目录下："></a>usr目录下：</h3><p><em>usr指的是UNIX Software Resource，即操作系统软件资源放置的目录，而不是user用户数据</em></p>
<p>FHS要求必须要存在的目录：</p>
<ul>
<li>/usr/bin/：所有一般用户能够使用的命令都放在这里</li>
<li>/usr/lib/：与/lib功能相同，/lib链接到此目录</li>
<li>/usr/local/：管理员在本机安装自己下载的软件，建议安装到此目录</li>
<li>/usr/sbin/：非系统正常运行所需要的系统命令</li>
<li>/usr/share/：主要放置只读的数据文件，当然也包括共享文件</li>
</ul>
<p>FHS建议可以存在的目录：</p>
<ul>
<li>/usr/include/：C/C++等程序语言的头文件(header)与包含文件(include)放置处</li>
<li>/usr/libexec/：某些不被一般用户常用的执行文件或脚本</li>
<li>/usr/src/：一般源代码建议放置到这里</li>
</ul>
<h3 id="var目录下："><a href="#var目录下：" class="headerlink" title="var目录下："></a>var目录下：</h3><p><em>var目录主要针对经常性变动的文件</em></p>
<p>​    FHS要求必须要存在的目录：</p>
<ul>
<li>/var/cache/：应用程序运行过程中的缓存</li>
<li>/var/lib/：程序执行过程中，需要使用的数据文件放置的目录</li>
<li>/var/lock/：给设备上锁</li>
<li>/var/log/：日志文件</li>
<li>/var/mail/：个人电子邮箱</li>
<li>/var/run/：某些程序或是服务启动后，会将PID放到这个目录下</li>
<li>/var/spool/：这个目录通常放置一些队列数据，即排队等待其他程序使用的数据</li>
</ul>
<h3 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>. ：代表当前目录，也可以用./表示</li>
<li>.. ：代表上一层目录，也可以用../表示</li>
<li>当出现找不到命令时，代表该命令不在环境变量$PATH目录下</li>
</ul>
<h1 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h1><p>有关命令：</p>
<ul>
<li>ls：查看文件与目录名称</li>
<li>cp：复制;注意：在默认的条件下，cp的源文件与目标文件的权限不同，目标文件的拥有者是操作者本身</li>
<li>rm：删除文件或目录</li>
<li>mv：移动文件或目录，也可以修改文件名</li>
</ul>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><ul>
<li>cat：由第一行开始显示文件内容</li>
<li>tac：从最后一行开始显示</li>
<li>nl：显示时，同时输出行号</li>
<li>more：一页一页显示文件内容</li>
<li>less：与more类似，但是可以往前翻</li>
<li>head：只看前几行</li>
<li>tail：只看后几行</li>
<li>od：以二进制的方式读取文件内容</li>
<li>touch：修改文件时间或创建新文件</li>
</ul>
<h2 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h2><p>umask：查看文件默认权限，指的是该默认值需要减掉的权限，如umask0022，默认权限为7755</p>
<p>chattr：配置文件隐藏属性</p>
<p>lsattr：显示文件隐藏属性</p>
<h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><p>SUID</p>
<p>SGID</p>
<p>SBIT</p>
<h2 id="命令与文件查找"><a href="#命令与文件查找" class="headerlink" title="命令与文件查找"></a>命令与文件查找</h2><ul>
<li><p>which：脚本文件查找，即查找执行文件</p>
</li>
<li><p>whereis：特定目录中查找文件</p>
</li>
<li><p>locate：依据/var/lib/mlocate内的数据库记录</p>
</li>
<li><p>find：常用查找</p>
</li>
</ul>
<h1 id="Linux磁盘与文件管理系统"><a href="#Linux磁盘与文件管理系统" class="headerlink" title="Linux磁盘与文件管理系统"></a>Linux磁盘与文件管理系统</h1><h2 id="文件系统特性"><a href="#文件系统特性" class="headerlink" title="文件系统特性"></a>文件系统特性</h2><blockquote>
<p>磁盘分区完毕后还需要格式化，因为每种操作系统所设置的文件属性/权限并不同，所以需要格式化以成为操作系统可以使用的</p>
<p>文件系统通常会将文件权限(rwx)与文件属性(拥有者、用户组等)放在不同的区块，权限与属性放到inode中，实际数据则放置到数据区块中。</p>
<p>而超级区块会记录整个文件系统的整体信息，包括inode与数据区块的总量、使用量、剩余量等。</p>
<p>inode记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的区块号码。</p>
</blockquote>
<p><em>inode记录的信息：</em></p>
<ul>
<li>该文件的读写属性(rwx)</li>
<li>该文件的拥有者与用户组(owner、group)</li>
<li>该文件大小</li>
<li>该文件建立或状态改变的时间(ctime)</li>
<li>最近一次读取时间(atime)</li>
<li>最近修改时间(mtime)</li>
<li>定义文件特性的标识(flag)</li>
<li>该文件真正内容的指向(pointer)</li>
</ul>
<blockquote>
<p>系统读取的文件时需要先找到inode，并分析inode所记录的权限与用户是否符合，若符合才能读取</p>
</blockquote>
<p><em>Superblock(超级区块)记录的信息：</em></p>
<ul>
<li>数据区块与inode的总量</li>
<li>未使用与已使用的inode与数据区块数量</li>
<li>数据库与inode的大小</li>
<li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘的时间等文件系统相关信息</li>
<li>一个有效位数值，若此文件系统被挂载，则为0，未挂载为1</li>
</ul>
<p><em>硬链接：</em></p>
<blockquote>
<p>一般一个文件，目录-&gt;文件名-&gt;inode-&gt;文件内容，硬链接则增加一个目录下文件名指向相同inode</p>
<p>硬链接的限制：1.不能跨文件系统 2.不能链接目录</p>
</blockquote>
<p><em>符号链接：</em></p>
<blockquote>
<p>符号链接就是建立一个独立的文件，读取这个文件相当于读取这个文件指向的链接的文件名，相当于windows的快捷方式</p>
</blockquote>
<h2 id="磁盘分区、格式化检验与挂载"><a href="#磁盘分区、格式化检验与挂载" class="headerlink" title="磁盘分区、格式化检验与挂载"></a>磁盘分区、格式化检验与挂载</h2><p>在Linux系统中，当新增一个磁盘时，有以下操作需做：</p>
<ol>
<li>对磁盘进行划分，以建立磁盘分区</li>
<li>对磁盘格式化，以建立文件系统</li>
<li>检验文件系统</li>
<li>建立挂载点，并挂载到挂载点</li>
</ol>
<p>挂载注意事项：</p>
<ul>
<li>单一文件系统不应该挂载在不同挂载点中</li>
<li>单一目录不应该重复挂载多个文件系统</li>
<li>作为挂载点的目录，理论上应该是已存在空目录</li>
<li>根目录/是必须挂载的，而且一定要先于其他挂载点被挂载进来</li>
<li>如若进行卸载，必须先将工作目录移到挂载点(及子目录)之外</li>
</ul>
<h1 id="压缩技术"><a href="#压缩技术" class="headerlink" title="压缩技术"></a>压缩技术</h1><p>原理：</p>
<ul>
<li>一种将文件中没有使用到的空间空出来，以让文件占用空间变小</li>
<li>一种类似有100个1，压缩技术记录为100个1</li>
</ul>
<h2 id="Linux系统常见的压缩命令"><a href="#Linux系统常见的压缩命令" class="headerlink" title="Linux系统常见的压缩命令"></a>Linux系统常见的压缩命令</h2><table>
<thead>
<tr>
<th></th>
<th>gzip</th>
<th>xz</th>
</tr>
</thead>
<tbody><tr>
<td>压缩比</td>
<td>较低</td>
<td>高</td>
</tr>
<tr>
<td>所用时间</td>
<td>较短</td>
<td>较长</td>
</tr>
</tbody></table>
<h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><p>记住以下即可：</p>
<ul>
<li>压缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</li>
<li>查询：tar -jtv -f filename.tar.bz2</li>
<li>解查询：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>鸟哥的Linux私房菜</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的规划与安装</title>
    <url>/2020/10/05/Linux%E7%9A%84%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Linux的规划与安装"><a href="#Linux的规划与安装" class="headerlink" title="Linux的规划与安装"></a>Linux的规划与安装</h1><p>linux版本号：</p>
<ul>
<li>奇数：开发板</li>
<li>偶数：稳定版</li>
</ul>
<h2 id="计算机概论"><a href="#计算机概论" class="headerlink" title="计算机概论"></a>计算机概论</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>CPU里面含有两个主要的单元：<em>算逻单元</em>和<em>控制单元</em></p>
<blockquote>
<p>CPU里面的数据都是从内存里来的，也就是说，<em>输入单元-&gt;内存-&gt;CPU-&gt;内存-&gt;输出单元。</em></p>
</blockquote>
<p>CPU里面含有的指令集：</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>精简指令集(RISC)</th>
<th>复杂指令集(CISC)</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>指令运行时间很短，完成的操作也简单。</td>
<td>指令运行时间长，指令数目多而且复杂。</td>
</tr>
<tr>
<td>使用该架构的CPU</td>
<td>ARM</td>
<td>AMD、Intel、VIA</td>
</tr>
<tr>
<td>实例</td>
<td>手机、导航系统、网络设备(交换机、路由器)</td>
<td>个人电脑</td>
</tr>
</tbody></table>
<h4 id="CPU运行参数"><a href="#CPU运行参数" class="headerlink" title="CPU运行参数"></a>CPU运行参数</h4><p>CPU的频率表示CPU每秒钟可以进行的工作次数，频率目前仅能用来比较同款CPU的速度。</p>
<p>CPU每次能够处理的数据量称为字长，64位代表CPU一次可以读写64bit的数据。</p>
<p>早期CPU有南北桥，如今因为北桥限制频率问题，北桥被整合到CPU中。</p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ul>
<li>CPU具有向下兼容能力，如i7可以兼容i5</li>
</ul>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p><img src="/2020/10/05/Linux%E7%9A%84%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/1.png" alt="image-20200526095428528"></p>
<p>L2是与CPU频率相同的SRAM(静态随机存取内存)，被整合到CPU内部，其价格高，速度快，用于提示CPU运行性能，里面存放常用的程序或数据。</p>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>显卡影响屏幕分辨率和颜色深度。</p>
<p>显卡通过GPU的控制芯片来与CPU、内存等通信。</p>
<h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>机械硬盘的读取通过主轴马达让碟片转动，机械手臂读写来完成。</p>
<p>固态硬盘则是用闪存做的大容量存储设备。</p>
<h2 id="主机规划与磁盘分区"><a href="#主机规划与磁盘分区" class="headerlink" title="主机规划与磁盘分区"></a>主机规划与磁盘分区</h2><blockquote>
<p><em>在Linux中，每个设备相当于一个文件</em>，几乎所有硬件设备都在/dev这个目录下</p>
</blockquote>
<h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><blockquote>
<p>磁盘利用参考对照<em>柱面</em>或<em>扇区号码</em>来分区。</p>
</blockquote>
<p>整块磁盘的<em>第一个扇区</em>特别重要，它记录了磁盘的重要信息。</p>
<p>扇区是磁盘的最小单位，如以前的磁盘的扇区为512字节，如今有4K的扇区</p>
<table>
<thead>
<tr>
<th></th>
<th>MBR</th>
<th>GPT</th>
</tr>
</thead>
<tbody><tr>
<td>安全性</td>
<td>较低，仅有一个扇区记录区分信息</td>
<td>较高，不仅前面有34个LBA，磁盘最后的34个LBA用来备份</td>
</tr>
<tr>
<td>支持磁盘大小</td>
<td>无法使用2.2TB以上的内容</td>
<td>支持2.2TB以上</td>
</tr>
<tr>
<td>引导程序区块大小</td>
<td>较小，只有446字节</td>
<td>较大，整个LBA0</td>
</tr>
</tbody></table>
<h4 id="MBR-MS-DOS-分区表"><a href="#MBR-MS-DOS-分区表" class="headerlink" title="MBR(MS-DOS)分区表"></a>MBR(MS-DOS)分区表</h4><p>MBR第一个扇区的512字节通常会有这些：</p>
<ul>
<li>主引导记录：可以安装启动引导程序的地方，有446字节</li>
<li>分区表：记录整块硬盘分区的状态，有64字节，最多仅能有四组记录区，每组记录区记录了该区段的起始与结束的柱面号码。</li>
</ul>
<p>分区表：</p>
<p>​    分区表里的四组记录区称为主要(Primary)或扩展(Extended)分区</p>
<ul>
<li>主要分区：第一个扇区的64字节，可以被格式化</li>
<li>扩展分区：记录额外扇区的分区信息，并不能格式化</li>
<li>逻辑分区：扩展分区划分的分区，可以被格式化</li>
</ul>
<p>MBR的缺陷：</p>
<ul>
<li>操作系统无法使用2.2TB以上的磁盘容量</li>
<li>MBR仅有一个区块，若被破坏，难以恢复</li>
<li>MBR存放启动引导程序的区块仅446字节，无法存储较多的程序代码</li>
</ul>
<h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>逻辑分区号码：1-4分区是保留给主要/扩展分区，因此第一个逻辑分区是从5开始的</li>
</ul>
<h4 id="GPT磁盘分区表"><a href="#GPT磁盘分区表" class="headerlink" title="GPT磁盘分区表"></a>GPT磁盘分区表</h4><blockquote>
<p>如今的扇区大小已经有4K，为了兼容以前的512字节，GPT大多使用所谓的逻辑区块地址(LBA)来处理。</p>
</blockquote>
<p>GPT模式结构：</p>
<ul>
<li>LBA0：存储第一阶段的启动引导程序</li>
<li>LBA1：这个部分记录了分区表本身的位置和大小，同时记录了备份用的GPT分区，还放置了分区表的校验码</li>
<li>LBA2-33：实际记录分区信息处</li>
</ul>
<h3 id="启动流程中的BIOS与UEFI启动检测程序"><a href="#启动流程中的BIOS与UEFI启动检测程序" class="headerlink" title="启动流程中的BIOS与UEFI启动检测程序"></a>启动流程中的BIOS与UEFI启动检测程序</h3><h4 id="BIOS启动流程"><a href="#BIOS启动流程" class="headerlink" title="BIOS启动流程"></a>BIOS启动流程</h4><p>如下：</p>
<ol>
<li>BIOS：启动主动执行的固件，会认识第一个可启动的设备</li>
<li>MBR：第一个可启动设备的第一个扇区内的主引导记录块，内含启动引导代码</li>
<li>启动引导程序(boot loader)：一个可读取内核文件来执行的软件</li>
<li>内核文件：开始启动操作系统</li>
</ol>
<p>boot loader的主要任务如下：</p>
<ul>
<li>提供选项：用户可选择不同的启动选项，即多重引导到不同操作系统</li>
<li>加载内核文件：直接指向可使用的程序区段来启动操作系统</li>
<li>转交其他启动引导程序：将启动管理功能转交给其他启动引导程序负责，也与多重引导有关</li>
</ul>
<h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>启动扇区除了可以安装在MBR外，还可以安装在每个分区的启动扇区(boot loader)，这种特性才能造就“多重引导”</li>
</ul>
<h4 id="UEFI-BIOS"><a href="#UEFI-BIOS" class="headerlink" title="UEFI BIOS"></a>UEFI BIOS</h4><p>与传统BIOS对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>传统BIOS</th>
<th>UEFI</th>
</tr>
</thead>
<tbody><tr>
<td>硬件资源控制</td>
<td>16位</td>
<td>CPU保护模式</td>
</tr>
<tr>
<td>扩充方式</td>
<td>通过IRQ连接</td>
<td>直接加载驱动程序</td>
</tr>
<tr>
<td>第三方厂商支持</td>
<td>较差</td>
<td>较多且可支持多平台</td>
</tr>
<tr>
<td>图形能力</td>
<td>较差</td>
<td>较好</td>
</tr>
<tr>
<td>内置简化操作系统环境</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><ul>
<li>目录树：/，即以根目录为主</li>
<li>挂载：即利用一个目录当成进入点，将磁盘分区的数据放在该目录下，此目录称为挂载点</li>
<li>swap分区：当物理内存不足时，将不常用数据放到swap分区，而将速度较快的物理内存留给需要的程序使用。且该分区不会挂载在根目录下</li>
<li>每个账号都有自己的工作目录，如账号ccc，则此目录就在/home/ccc</li>
</ul>
<h3 id="Linux重要热键"><a href="#Linux重要热键" class="headerlink" title="Linux重要热键"></a>Linux重要热键</h3><ul>
<li>Tab：具有命令补全与文件补齐的功能，按下第一次为<em>命令补全</em>，第二次为<em>文件补齐</em></li>
<li>Ctrl+C：中断目前程序</li>
<li>Ctrl+D：键盘输入结束</li>
<li>Shift+Page UP/Page down：翻页</li>
<li>命令–help：命令的基本用法与选项参数。</li>
<li>man 命令：命令操作说明</li>
<li>关机：shutdown</li>
<li>重启：reboot</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>鸟哥的Linux私房菜</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS安装win7</title>
    <url>/2020/10/03/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h1><p>今天被差遣去给太上皇装双系统，macOS加个Win7</p>
<h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul>
<li><p>电脑：Mac mini 2014，系统10.14.6，四核i5 4G，500G机械硬盘</p>
</li>
<li><p>系统iso镜像–GHOST win7</p>
</li>
<li><p>PE：给系统分区，重要是分成NTFS格式以供Win使用</p>
</li>
<li><p>磁盘：需要NTFS格式</p>
</li>
<li><p>u盘：主流以UEFI方式安装</p>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>按实际步骤来：</p>
<ol>
<li>将PE安装到U盘上，将系统镜像ISO放到U盘，这次使用的是16G的u盘，微PE格式化U盘，第一次使用exFAT格式格式化失败了，第二次用NTFS才成功，可能因为原格式是NTFS的</li>
<li>接下来将U盘插入主机，重启电脑按Alt(即苹果的options)，进入u盘系统</li>
<li>因为可以将mac os抹除，而且原mac os分区老是失败，故直接将硬盘重新分区，用diskgenius格式化</li>
<li><strong><em>此时为重点！：因为win10、win8是GPT分区的，而win7是MBR分区的，所以此时需要将硬盘格式转化为MBR分区才能装上win7！然后重建主引导记录</em></strong></li>
<li>分了一个C一个D盘均为NTFS格式，紧接着使用ghost一键安装win7</li>
<li>因为前几次老是引导出错，所以在结束以后修复了一下引导，成功！</li>
<li>重启电脑，按Alt进入新出现的硬盘图标下面写着windows</li>
<li>开始写入驱动，后面按着程序来就行了，安装win7成功！</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次因为是在另一个主机上所以没有截图，刚开始准备用boot camp装双系统比较稳健，但是后面硬盘总是不让分区，又说可以直接抹除硬盘，所以直接重新分区。之前以为只要将盘分NTFS格式就行，但是后来老是进不去系统，搜了一下发现还要将硬盘设为MBR分区才可以，重新设置以后就可以成功进入win7了</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩</title>
    <url>/2020/10/03/%E8%89%B2%E5%BD%A9/</url>
    <content><![CDATA[<h1 id="色彩基础"><a href="#色彩基础" class="headerlink" title="色彩基础"></a>色彩基础</h1><h2 id="HSB色彩属性"><a href="#HSB色彩属性" class="headerlink" title="HSB色彩属性"></a>HSB色彩属性</h2><p>颜色具有三大属性</p>
<p>H：色相，颜色的名字，如红色色相</p>
<p>S：饱和度</p>
<p>B：明度</p>
<p><img src="/2020/10/03/%E8%89%B2%E5%BD%A9/2.jpg"></p>
<p>红色0°，蓝色240°，绿色120°</p>
<h3 id="色相搭配"><a href="#色相搭配" class="headerlink" title="色相搭配"></a>色相搭配</h3><p>同类色搭配</p>
<p>以0°为基准，夹角在15°以内的颜色视为同类色，取出三个颜色形成同类色搭配</p>
<p>邻近色搭配</p>
<p>夹角在45°以内的颜色视为邻近色，取三个形成邻近色搭配</p>
<p>对比色搭配</p>
<p>夹角在120°以内的视为对比色，形成对比色搭配</p>
<p>互补色搭配</p>
<p>夹角在180°内取两种颜色为互补色</p>
<h2 id="七大色调"><a href="#七大色调" class="headerlink" title="七大色调"></a>七大色调</h2><ul>
<li><p>色调：由饱和度和明度结合产生</p>
</li>
<li><p>饱和度，也称为纯度，指的是一个颜色的纯净程度</p>
</li>
<li><p>明度：亮度</p>
</li>
</ul>
<p><img src="/2020/10/03/%E8%89%B2%E5%BD%A9/3.png"></p>
<p>白色调</p>
<p>优点：素雅，文艺，干净，极简</p>
<p>缺点：乏味，单调</p>
<p>粉色调</p>
<p>优点：清秀，天真，可爱</p>
<p>缺点：软弱，无力</p>
<p>明色调</p>
<p>优点：年轻，活力，阳光</p>
<p>缺点：廉价，缺乏品质感</p>
<p>鲜色调</p>
<p>优点：刺激，活力，强力</p>
<p>缺点：生硬，廉价</p>
<p>灰色调(高级灰)</p>
<p>优点：品质，高端</p>
<p>缺点：缺少活力</p>
<p>深色调</p>
<p>优点：成熟，稳重，大气</p>
<p>缺点：压抑，阴暗，不透气</p>
<p>黑色调</p>
<p>优点：神秘，厚重</p>
<p>缺点：压抑</p>
<h2 id="六大搭配原则"><a href="#六大搭配原则" class="headerlink" title="六大搭配原则"></a>六大搭配原则</h2><p>互补色平衡</p>
<p>找到主色后，在色环上找到这个颜色的互补色即180°</p>
<p>对比色平衡</p>
<p>找到主色后，在色环上找到这个颜色的互补色即120°</p>
<p>冷暖平衡</p>
<p>红黄橙为暖色系，绿青蓝蓝色系</p>
<p>当大面积为暖色(冷色)时，需要冷色(暖色)来平衡画面</p>
<p>深浅平衡</p>
<p>主色调是浅色(深色)，需要辅以深色(浅色)来平衡</p>
<p>色彩面积平衡</p>
<p>大概为：</p>
<p>主色占70%</p>
<p>辅助色占25%</p>
<p>点缀色占5%</p>
<p>有彩色和无彩色平衡</p>
<p>有彩色和无彩色搭配</p>
<p>花色和纯色平衡</p>
<p>较为复杂的画面需要辅以纯色，一部分为花色，则需要辅以纯色搭配</p>
]]></content>
      <categories>
        <category>DLife</category>
        <category>knowLedge</category>
      </categories>
      <tags>
        <tag>knowLedge</tag>
      </tags>
  </entry>
  <entry>
    <title>水果</title>
    <url>/2020/10/02/%E6%B0%B4%E6%9E%9C/</url>
    <content><![CDATA[<p><img src="/2020/10/02/%E6%B0%B4%E6%9E%9C/1.jpg"></p>
<p><img src="/2020/10/02/%E6%B0%B4%E6%9E%9C/2.jpg"></p>
<p><img src="/2020/10/02/%E6%B0%B4%E6%9E%9C/3.jpg"></p>
<p><img src="/2020/10/02/%E6%B0%B4%E6%9E%9C/4.jpg"></p>
]]></content>
      <categories>
        <category>DLife</category>
        <category>knowLedge</category>
      </categories>
      <tags>
        <tag>knowLedge</tag>
      </tags>
  </entry>
  <entry>
    <title>非暴力沟通</title>
    <url>/2020/10/02/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A/</url>
    <content><![CDATA[<p> ● 这是一本偏理论的实用书，以心理学为基础，出版商将之归为心灵、励志类书籍。</p>
<p> ● 这本书介绍了一种沟通方式，即如何转变谈话和聆听的方式来减少人与人之间因为语言带来的痛苦。作者相信，人天生热爱生命、乐于互助，但是语言及表达方式却使得日常生活中充满了痛苦，他提出了“非暴力沟通”这种沟通方式，来明确自己和他人的观察、感受、需求和请求，进而达成双方之间的情意相通、乐于互助。</p>
<p> ● 这本书的结构：总-分</p>
<p>chapter1~2：提出非暴力沟通的四个要素，即观察、感受、需要和请求；阐释了一些带来负面影响的语言和表达方式，作者称为“异化的沟通方式”；</p>
<p>chapter3~6：阐释四要素的内涵，区分了相似的概念，介绍了一些要素的来源；</p>
<p>chapter7~8：运用非暴力沟通来倾听他人；</p>
<p>chapter9~13:运用非暴力沟通来爱自己。</p>
<p>-——————————————————————————-</p>
<p>一、概念：非暴力沟通</p>
<p>1、“非暴力沟通”是一种沟通方式，也被称为“爱的语言”。它是一种持续不断的提醒，提醒我们专注于彼此的观察、感受、需要和请求。它希望达成的是：帮助我们在诚实和倾听的基础上与人联系。</p>
<p>2、“非暴力沟通”的四个要素：</p>
<p> ● 观察：清晰地表达观察的结果，注意区分和评论之间的关系；</p>
<p> ● 感受：清晰的表达感受，注意区分和想法之间的关系；</p>
<p> ● 需要：是感受的来源；</p>
<p> ● 请求：提出具体的请求，注意区分和命令之间的关系</p>
<p>3、“异化的沟通方式”包括：</p>
<p> ● 道德评判：用自己的标准（价值观、信念）等来衡量、要求别人，将责任归咎于对方</p>
<p> ● 进行比较：这种方式使我们蒙蔽了对自己和对他人的爱</p>
<p> ● 回避责任：日常生活中许多表达方式暗含了对于责任的回避，如“我不得不……”，“是你让我……”</p>
<p> ● 强人所难：要求和命令别人</p>
<p>异化的沟通方式与非暴力沟通相悖，它忽视自己和他人的感受、需要和请求。</p>
<p>二、非暴力沟通的四个要素</p>
<p>1、观察：勿与评论混淆</p>
<p>观察的语言表达：在特定的时间、地点和情境中，清晰的行为结果。观察是要有依据和事实证明的，比如具体的时间点、频率、某个具体的方面、数额等。</p>
<p><img src="/2020/10/02/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A/1.jpeg" alt="img"></p>
<p>2、感受：勿与想法混淆</p>
<p>清晰表达自己的感受，第一，要区分哪些是感受。“我觉得”、“我以为”不是在表达感受，“被xxx”（如被抛弃、被误解、被欺负、被利用等）也不是在表达感受；第二，建立感受的词汇库。</p>
<p><img src="/2020/10/02/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A/2.jpeg" alt="img"></p>
<p>3、需要：是感受的来源。</p>
<p>感受和需要之间的关系：我们的需要、期待、对他人言行的看法，导致了我们的感受。因而，不是追究别人的责任，而是体察感受背后的自我需要：我的哪些需要、期待或价值取向没有得到满足？</p>
<p>需要是一座桥梁，架起了我们和感受之间的关系，将表达与回应放到到自己身上，推荐表达感受的句式：“我（感到）……，因为我（希望/重视/想要）……”</p>
<p>非暴力沟通提倡直接表达自己的需要，而不是通过指责、批评、评论以及分析的方式。这有助于对方准确地了解我们的需要，同时也提供了对方做准确回应的机会。</p>
<p>受到社会文化的影响，有些地区、有些人，比如亚洲地区以中国为代表，比如妇女，他们在表达自己需要上是存在许多障碍的，非暴力沟通同样倡导回归到自身，去关心自己的需要，并且学习正确地表达自己的需要。如果不被表达，那一点儿满足的机会都没有了，尝试着去表达，起码有了被满足的可能。人们需要学习正视自己的需要。</p>
<p>人的基本需要包括：自由选择、庆祝、言行一致、滋养身体、玩耍、情意相通、相互依存。（这里，我推荐大家了解下马斯洛的需求层次理论、舒茨的人际需要理论、麦克利兰的需要理论和奥尔德弗的ERG理论）</p>
<p>该章节没有谈及：如何辨别真实的需要，对于需要的层次也没有做任何说明，只是倡导要表达需要，至于如何去甄别这些需要及需要背后的内容，没有进一步的介绍。</p>
<p>4、请求：提出具体的、正向的，而不是抽象的、负向的请求。</p>
<p>请求的艺术：</p>
<p> ● 提出具体的，而不是抽象的；</p>
<p> ● 提出需要做的是什么，而不是不要做什么；</p>
<p> ● 同时要伴随着自己的感受和需要；</p>
<p> ● 请求对方的反馈，确保我们的意思与对方的理解相同；</p>
<p> ● 明确谈话的目的，诸如我们询问对方的建议时，可以这样说：</p>
<p>“我想请你谈谈我的建议是否有可行性，如果不太可行，那根据你的判断，哪些因素会妨碍建议的实施呢？”</p>
<p>区分请求与命令的一个关键点：请求没有得到满足时，提出请求的人如果批评和职责，那就是命令；如果想利用对方的内疚来达到目的，也是命令。</p>
<p>什么时候会变成命令？</p>
<p> ● 如果我们过去常常指责别人；</p>
<p> ● 如果对方经常受到指责；</p>
<p> ● 如果我们将他人的不顺从看作是对我们的排斥；</p>
<p> ● 如果我们有以下想法：TA应该/应当/必须……</p>
<p>三、全身心地倾听别人</p>
<p>学习使用非暴力沟通的四个要素去体察别人的观察、感受、需要和请求，并将它们表达出来。</p>
<p>1、如何回应遭遇痛苦的人们？</p>
<p>你是否急于提建议、安慰或表达态度、感受？你是否有以下情况？</p>
<p><img src="/2020/10/02/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A/3.jpeg" alt="img"></p>
<p>在非暴力沟通中，倾听意味着放下已有的想法、判断，一心一意地体会他人。不做否定、不做分析、不做建议、也不做辩解，也不要着急揭露对方的需要，基于其表达感受的空间，让其感受得以释放。</p>
<p>2、非暴力沟通建议我们用疑问句来给予他人反馈，我们的问题可以集中在对他人的观察、感受、需要和请求方面，同时注意在表达时需要具体。</p>
<p>四、用非暴力沟通来爱自己</p>
<p>1、转变自我评价方式</p>
<p>当我们骂自己、责备自己，表现在语言上，用“你应该”、“你不得不”时，我们可以去体察自己的需要，正是那些未被满足的需要使得我们产生自责、羞愧、内疚。如果我们抱着去满足自己需要的态度，而不是为了出于羞愧、内疚或者是逃避责任、获得某种回报的态度去回应我们的需要时，我们将会获得自我宽恕，重获生命的热情。</p>
<p>深入理解我们行为的动机——发现我们行为背后的价值取向——我们在生活中在乎什么？看重什么？</p>
<p>2、充分表达愤怒</p>
<p>1）停下来，除了呼吸，什么都别做；</p>
<p>2）想一想，是什么想法使我们生气了；</p>
<p>3）体会自己的需要；</p>
<p>4）表达我们的感受和尚未满足的需要</p>
<p>3、表达感激</p>
<p>1）说出对我们有益的行为；</p>
<p>2）说出我们的哪些需要得到了满足；</p>
<p>3）我们的需要得到满足后，我们是什么样的心情。</p>
<p>-——————————————————————————-</p>
<p>本书没有回答的问题：</p>
<p>1、我们的需要、期待、价值取向是来自于哪里，受到哪些因素影响？</p>
<p>2、如何甄别真实的需要？</p>
<p>3、如何处理双方或多方的需要、请求的冲突？</p>
<p>本书的前提是：</p>
<p>人们愿意自省，放下脚步，具有洞察自我的意愿和能力。</p>
<p>读后感：</p>
<p>1、对本书结构、排版的评价：结构清晰，非暴力沟通的四要素贯穿始终、大量日常生活的案例、每章节有小结，辅之以练习；章节之间以小朋友的插画来过度以及偶尔出现的诗歌匹配得很到位，起到了放松和助于理解的功能；文字排版轻松简洁。</p>
<p>2、作者用“爱”来开篇，又用“爱”来收尾，倡导一种回归自我、回归生命本真的朴素情怀。</p>
<p>3、想起了相关读物：</p>
<p> ● 《爱的五种语言》Dr.Gary Chapman</p>
<p> ● 《Change:Principles of Problem Formation and Problem Resolution》Paul Watzlawick；John Weakland；Richard Fisch</p>
<p> ● 《The Lost Art of Listening》Michael P.Nichols</p>
<p>其他：</p>
<p>研究生的一门课后作业，摘了一些出来，是关于《The Lost Art of Listening》：</p>
<p>最近我在看一本有关倾听的书（The lost art of listening，by Michael P.Nichols），里面有很多话直戳我们平时生活中沟通不良的要害。如“即使你真的知道对方要说什么，他仍有把它说出来的需要，也就是在感受到被了解之前，他需要你明白”——我们急于打断，自以为了解对方而急于表达对他所说的看法、意见或建议，这种行为实际上是并没有尊重和真正理解对方，而对方也感受到了这点，因而他仍有表达的渴望。</p>
<p>在辅导关系中，“先入为主”的方式只会令案主觉得不被理解（如果工作员不给予机会倾听案主），或者是崇拜权威（如果工作员的确能够很快把握案主所说的重点，并给予合理有效的回应）。换句话说，案主需要被倾听，渴望有机会表达自己的情绪和内心所想，也即工作员因理解到这一需要，为案主建立一个安全、可信任的环境氛围，帮助案主宣泄情绪、疏导想法。</p>
<p>关于倾听的技巧，老师在课上专门讲了语言、身体姿态和表情上的反应，我觉得很受用。与此同时，我在看The Lost Art of Listening这本书时，基于对自己的了解和反思，我特别想提醒自己一点：</p>
<p>倾听时，暂时搁置自己的需求。控制自己的表达欲望，先让对方说更多，确认明白之后再做回应。</p>
<p>“有时候人们好像在听，去忍不住要引导什么，这些听众把他们想说的事强加在我们的经验上，他们的问题是‘假设’我们的故事‘应该’符合他们的脚本”。</p>
]]></content>
      <categories>
        <category>Book</category>
        <category>psyBook</category>
      </categories>
      <tags>
        <tag>psyBook</tag>
      </tags>
  </entry>
  <entry>
    <title>沉默的时光(南禅寺)</title>
    <url>/2020/10/02/%E6%B2%89%E9%BB%98%E7%9A%84%E6%97%B6%E5%85%89-%E5%8D%97%E7%A6%85%E5%AF%BA/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="366b67394aa02d6b3c2432c0f76e0db47676ef028982b271d1a972d5fefd4b3b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>DLife</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title>Authentication</title>
    <url>/2020/10/02/authentication/</url>
    <content><![CDATA[<h1 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h1><p><img src="/2020/10/02/authentication/1.png"></p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>认证中心简而言之用于身份识别</p>
<ol>
<li>登陆Post/login{“登陆信息”}</li>
<li>创建token</li>
<li>调用接口时在header里有token</li>
<li>服务器检查token，验证</li>
<li>返回结果给浏览器</li>
</ol>
<h3 id="创建Token"><a href="#创建Token" class="headerlink" title="创建Token"></a>创建Token</h3><p>在最初登陆阶段，需要用户**<em>主动**</em>提供身份证明如账号密码、二维码等登陆信息</p>
<p>服务器收到信息后与数据库进行比对</p>
<h4 id="传输密码"><a href="#传输密码" class="headerlink" title="传输密码"></a>传输密码</h4><p>在用户注册时，会将用户密码加密，再存储到数据库中，此过程<em>不可逆</em>。如MD5算法即将密码生成hash值，一个hash值可以对应多个密码。</p>
<p>而验证过程则是对前端传来的密码再次进行加密，比对值是否相同。因为前端传输过程中密码也可能被截获，故传给后端前需要再加密一次。</p>
<p>验证通过后会生成token返回给前端，目前使用jwt即json web token，在token中隐藏json信息，使用字符串密钥加密，后端拿到token使用这个密钥解密，此过程<em>可逆</em>。</p>
<h3 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h3><ol>
<li>判断当前接口是否在白名单</li>
<li>浏览器是否传递token</li>
<li>token签名认证</li>
<li>解密出的信息与后端存储数据对比</li>
</ol>
<p>3、4步即可完成验证，一起执行更好保障</p>
<h2 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h2><h3 id="功能权限"><a href="#功能权限" class="headerlink" title="功能权限"></a>功能权限</h3><p>用户–角色–功能</p>
<p>为用户分配角色，为角色绑定功能</p>
<p>具体实现：</p>
<ol>
<li>查询角色拥有的角色</li>
<li>查询角色绑定功能</li>
<li>查询当前访问接口所属功能</li>
<li>判断用户是否拥有权限访问当前接口</li>
</ol>
<h3 id="数据权限"><a href="#数据权限" class="headerlink" title="数据权限"></a>数据权限</h3><p>将用户与角色绑定，角色与设备和对应操作绑定，如用户可以处理设备a进行123操作，及对设备b进行1操作…</p>
<p>分开绑定</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>back-Design</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>comRegEx</title>
    <url>/2020/10/01/comRegEx/</url>
    <content><![CDATA[<p>^ 匹配输入字行首</p>
<p>$ 匹配输入行尾</p>
<p>* 匹配前面的子表达式任意次，等价于{0,}</p>
<p>+ 匹配前面的子表达式一次或多次，等价于{1,}</p>
<p>? 匹配前面的子表达式零次或一次，等价于{0,1}</p>
<p>{n},{n,m},{n,}</p>
<p>.匹配除\n，\r之外的任何字符</p>
<p>[xyz] 字符集合，匹配所包含的任意一个字符，如匹配”plain”中的a</p>
<p>[^xyz] 负值字符集合，匹配未包含的任意字符。匹配plain中的plin</p>
<p>\b 匹配一个单词边界，即一个单词第一个字母</p>
<p>\B 匹配非单词边界，即一个单词末尾</p>
<p>\cx 匹配由x指明的控制字符，如\cM匹配一个Control-M，x的值必须在A-Z或a-z之间</p>
<p>\d 匹配一个数字字符</p>
<p>\D 匹配一个非数字字符</p>
<p>\w 匹配包括下划线的任何单词字符</p>
<p>\W 匹配任何非单词字符</p>
<p><img src="/2020/10/01/comRegEx/1.jpg"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Eggjs</title>
    <url>/2020/10/01/Eggjs/</url>
    <content><![CDATA[<h1 id="Eggjs"><a href="#Eggjs" class="headerlink" title="Eggjs"></a>Eggjs</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>app/router.js 用于配置URL路由规则</p>
<p>app/controller/** 用于解析用户的输入，处理后返回响应的结果</p>
<p>app/service/** 用于编写业务逻辑层</p>
<p>app/middleware/** 用于编写中间件</p>
<p>app/public/** 用于放置静态资源</p>
<p>app/extend/**用于框架的扩展</p>
<p>config/config.{env}.js 用于编写配置文件</p>
<p>config/plugin.js 用于配置需要加载的插件</p>
<p>test/** 用于单元测试</p>
<p>app.js和agent.js 用于自定义启动时的初始化工作</p>
<p><strong>由内置插件约定的目录:</strong></p>
<p>app/public/** 用于放置静态资源</p>
<p>app/schedule/** 用于定时任务</p>
<p><strong>若需自定义自己的目录规范，参见Loader API</strong></p>
<p>app/view/** 用于放置模板文件</p>
<p>app/model/** 用于放置领域模型</p>
<h2 id="框架内置对象"><a href="#框架内置对象" class="headerlink" title="框架内置对象"></a>框架内置对象</h2><p><strong>Application</strong></p>
<p>  Application是全局应用对象，在一个应用中只会实例化一个，在它上面我们可以挂载一些全局的方法和对象。</p>
<p>  <strong>事件</strong></p>
<p>  我们一般会在启动自定义脚本中监听事件。</p>
<p>  server(服务器):在HTTP完成启动后，会将HTTP server通过这个事件暴露出来给开发者。</p>
<p>  error:运行时有任何异常被捕获后都会触发error事件。</p>
<p>  request和response:应用受到请求和响应请求时会分别触发这两个事件，并将当前请示上下文暴露出来。</p>
<p><strong>获取方式</strong></p>
<p>  几乎所有被框架Loader加载的文件都可以export一个函数，这个函数会被Loader调用，并使用app作为参数:</p>
<p>  启动自定义脚本:</p>
<p>//app.js module.exports=app=&gt;{    app.cache=new Cache(); };</p>
<p>Controller文件:</p>
<p>//app/controller/user.js class UserController extends Controller{    async fetch(){        this.ctx.body=this.app.cache.get(this.ctx.query.id);    } }</p>
<p>在Context对象上，可以通过ctx.app访问到Application对象。</p>
<p>在继承于Controller，Service基类的实例中，可以通过this.app访问到Application对象，即上文中this.ctx,app可以改成this.app。</p>
<p><strong>Context</strong></p>
<p>  在每一次收到用户请求时，框架会实例化一个Context对象，这个对象封装了这次用户请求的信息，并提供了许多便捷的方法来获取请求参数或者响应信息。框架会将所有的Service挂载到Context实例上。</p>
<p><strong>获取方式</strong></p>
<p>  最常见Context实例获取方式是在Middleware，Controller以及Service中。</p>
<p><strong>Request&amp;Response</strong></p>
<p>  两者都是请求级别的对象。一个负责获取HTTP请求，一个负责HTTP响应。</p>
<p><strong>获取方式</strong></p>
<p>  可以在Context的实例上获取到当前请求的Request(ctx.request)和Response(ctx.response)实例。</p>
<p>//app/controller/user.js class UserController extends Controller{    async fetch(){        const {app,ctx}=this;        const id=ctx.request.query.id;        ctx.response.body=app.cache.get(id);    } }</p>
<p>  上面例子中ctx.request.query.id和ctx.query.id是等价的，ctx.response.body=和ctx.body=是等价的</p>
<p>  注意，获取POST的body应该使用ctx.request.body而不是ctx.body。</p>
<p><strong>Controller</strong></p>
<p>  框架提供了一个Controller基类，并推荐所有的Controller都基于该基类实现。该基类有以下属性</p>
<ul>
<li>ctx-当前请求的Context实例</li>
<li>app-应用的Application实例</li>
<li>config-应用的配置</li>
<li>service-应用所有的service</li>
<li>logger-为当前controller封装的logger对象</li>
</ul>
<p>在Controller文件中，可以通过两个方式来引用Controller基类:</p>
<p>//app/controller/user.js //从egg上获取(推荐) const Controller=require(‘egg’).Controller; class UserController extends Controller{    //implement } module.exports=UserController; //从app实例上获取 module.exports=app=&gt;{    return class UserController extends app.Controller{        //implement    }; };</p>
<p><strong>Service</strong></p>
<p>  Service基类的属性的基类和Controller基类属性一致，访问方式也类似:</p>
<p>//app/service/user.js //从egg上获取(推荐) const Service=require(‘egg’).Service; class UserService extends Service{    //implement } module.exports=UserService; //从app实例上获取 module.exports=app=&gt;{    return class UserService extends app.Service{        //implement    }; };</p>
<p><strong>Helper</strong></p>
<p>  Helper用来提供一些实用的utility函数。它的作用在于我们可以将一些常用的动作抽离在helper.js里面成为一个独立的函数，避免逻辑分散各处，同时可以更好的编写测试用例。</p>
<p>  Helper自身是类，有和Controller基类一样的属性，它也会在每次请求时进行实例化，故Helper上的所有函数也能用到ctx。</p>
<p>  <strong>获取方式</strong></p>
<p>  可以在Context实例上获取到当前请求的Helper(ctx.helper)实例</p>
<p><strong>Config</strong></p>
<p>  所有框架、插件和应用级别的配置都可以通过Config对象获取到。</p>
<p><strong>获取方式</strong></p>
<p>  我们可以通过app.config从Application实例上获取到config对象，也可以在Controller，Service，Helper的实例上通过this.config获取到config对象。</p>
<h2 id="基本骨架"><a href="#基本骨架" class="headerlink" title="基本骨架"></a>基本骨架</h2><h3 id="（1）简述"><a href="#（1）简述" class="headerlink" title="（1）简述"></a>（1）简述</h3><p>egg.js是以koa为底层的企业级应用解决方案。</p>
<h3 id="（2）简单层级关系"><a href="#（2）简单层级关系" class="headerlink" title="（2）简单层级关系"></a><strong>（2）简单层级关系</strong></h3><p>MVC(Model View Controller)是一种软件设计模式，早年间Controller层的代码量巨大</p>
<p><img src="/2020/10/01/Eggjs/1.png" alt="img"></p>
<p>后来分化出了Controller层的部分代码Service</p>
<p><img src="/2020/10/01/Eggjs/2.png"></p>
<p>View:作为视图部分</p>
<p>Controller:作为控制器层，控制用户界面(View)的数据流转途径，主要行为包含接受用户请求、发送请求至业务层(Service)、获取业务层(Service)数据响应，将相应数据发送至用户界面(View)，或生成响应的模板界面发送至用户。</p>
<p>Service:作为业务处理层部分，主要负责收集及对数据进行相应的运算处理，主要行为包含收集控制器请求数据、数据有效性验证、运算、请求数据模型(Model)、接受数据模型(Model)响应消息、响应结果至控制器等;</p>
<p>Model:作为数据模型层部分，主要用于数据持久化(OUT)、查询持久化数据(IN)、常见行为如对数据库进行操作、缓存数据库等。</p>
<h3 id="（3）路由-Router"><a href="#（3）路由-Router" class="headerlink" title="（3）路由(Router)"></a><strong>（3）路由(Router)</strong></h3><p><img src="/2020/10/01/Eggjs/3.png"></p>
<p>路由主要用于对数据流进行指引，并处理请求转发。</p>
<p>注:多WAN口路由器即具有多个广域网口的路由器</p>
<p>LAN接口即局域网接口</p>
<p>在Web进行前后端交互的过程中，路由起到了通过URL地址定位控制器函数的作用，即定位静态资源(无论是接口数据、页面。图片等其他文件)。如app/controller/home.ts中存在函数a()和b()，我们约定了跳转”<a href="http://luv-ui.com/a&quot;%E5%88%99%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0a();%E8%B7%B3%E8%BD%AC&quot;http://luv-ui.com/b&quot;%E5%88%99%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0b()%E3%80%82%E8%BF%99%E6%98%AFweb%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8-%E8%B7%AF%E7%94%B1%E7%9A%84%E5%B8%B8%E8%A7%81%E8%A1%A8%E7%8E%B0%E6%89%8B%E6%AE%B5">http://luv-ui.com/a&quot;则执行函数a();跳转&quot;http://luv-ui.com/b&quot;则执行函数b()。这是web应用中的控制器-路由的常见表现手段</a></p>
<p><img src="/2020/10/01/Eggjs/4.png"></p>
<h3 id="（4）内置对象"><a href="#（4）内置对象" class="headerlink" title="（4）内置对象"></a><strong>（4）内置对象</strong></h3><p>1.由Koa继承的对象:Application、Context、Request、Response</p>
<p>2.Egg自己扩展的对象:Controller、Service、Helper、Config、Logger</p>
<h4 id="（4-1）应用过程-Controller"><a href="#（4-1）应用过程-Controller" class="headerlink" title="（4.1）应用过程-Controller"></a><strong>（4.1）应用过程-Controller</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Context, Controller &#125; from &#39;egg&#39;; </span><br><span class="line">export default class HomeController extends Controller &#123;    constructor(ctx: Context) &#123;        super(ctx);        &#x2F;&#x2F; do something    </span><br><span class="line">&#125;        &#x2F;&#x2F; 具体的请求函数    </span><br><span class="line">public async foo() &#123;        const &#123; ctx &#125; &#x3D; this; &#x2F;&#x2F; this 代表当前 Controller 对象本身        const &#123; code &#125; &#x3D; ctx.query; &#x2F;&#x2F; 获取 Get 请求中的参数 code        </span><br><span class="line">ctx.body &#x3D; await ctx.service.home.foo( code ); </span><br><span class="line">&#x2F;&#x2F; 异步调用 Service 对象中的相应业务处理,并将结果对调用者响应    </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>ctx对象中包含service对象，囊括了所有app/service/层级下的service继承类</p>
<h4 id="（4-2）应用过程-Service"><a href="#（4-2）应用过程-Service" class="headerlink" title="（4.2）应用过程-Service"></a><strong>（4.2）应用过程-Service</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Context, Service &#125; from &#39;egg&#39;; </span><br><span class="line">export default class HomeService extends Service &#123;    constructor(ctx: Context) &#123;        super(ctx);&#x2F;&#x2F; do something    </span><br><span class="line">&#125;        &#x2F;&#x2F; 具体的业务处理函数    </span><br><span class="line">public async foo( code: string ) &#123;        </span><br><span class="line">const &#123; ctx &#125; &#x3D; this; &#x2F;&#x2F; this 代表当前 Service 对象本身        </span><br><span class="line">const where &#x3D; &#123; code &#125;;        </span><br><span class="line">return await ctx.model.user.findAll(&#123;where&#125;); </span><br><span class="line">&#x2F;&#x2F; 通过 Model(数据模型) 部分获取静态资源    </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/01/Eggjs/5.png" alt="img"></p>
<h3 id="（5）配置-Config"><a href="#（5）配置-Config" class="headerlink" title="（5）配置(Config)"></a><strong>（5）配置(Config)</strong></h3><p>  配置文件返回的是一个object对象，可以覆盖框架的一些配置</p>
<p><img src="/2020/10/01/Eggjs/6.png" alt="img"></p>
<h2 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由(Router)"></a>路由(Router)</h2><p>  Router主要用来描述和请求URL和具体承担执行动作的Controller的对应关系。框架约定了app/router.js文件用于统一所有路由规则。</p>
<p>  通过统一配置，我们可以更方便查看全局的路由规则。</p>
<p><strong>如何定义Router</strong></p>
<p>  app/router.js 里面定义 URL 路由规则</p>
<p>  app/controller 目录下面实现 Controller</p>
<p><strong>Router详细定义说明</strong></p>
<p>  路由的完整定义主要包括五个部分:</p>
<p>  1)verb-用户触发动作，支持get，post等所有HTTP方法</p>
<ul>
<li><p>router.head - HEAD</p>
</li>
<li><p>router.options - OPTIONS</p>
</li>
<li><p>router.get - GET</p>
</li>
<li><p>router.put - PUT</p>
</li>
<li><p>router.post - POST</p>
</li>
<li><p>router.patch - PATCH</p>
</li>
<li><p>router.delete - DELETE</p>
</li>
<li><p>router.del - 由于 delete 是一个保留字，所以提供了一个 delete 方法的别名。</p>
</li>
<li><p>router.redirect - 可以对 URL 进行重定向处理，比如我们最经常使用的可以把用户访问的根目录路由到某个主页。</p>
<p>2）router-name 给路由设定一个别名，可以通过Helper提供的辅助函数pathFor和urlFor来生成URL。（可选）</p>
<p>3）path-match -路由URL路径</p>
<p>4）middleware1-在Router里面配置多个Middleware。(可选)</p>
<p>5）controller-指定路由映射到具体的controller上</p>
</li>
</ul>
<p>注:Midlleware即中间件,只有在分布式系统中才能叫中间件，中间件处于操作系统软件与用户的应用软件系统之间。中间件在操作系统、网络和数据库之上，应用软件的下层，总的作用是为处于自己上层的应用软件提供运行和开发环境，帮助用户灵活、高效的开发和集成复杂的应用软件。</p>
<h2 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h2><p>  我们通过Router将用户的请求基于method和URL分发到了对应的Controller。</p>
<p>  Controller负责解析用户的输入，处理后返回相应的结果。例如</p>
<ul>
<li><p>在 <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> 接口中，Controller 接受用户的参数，从数据库中查找内容返回给用户或者将用户的请求更新到数据库中。</p>
</li>
<li><p>在 HTML 页面请求中，Controller 根据用户访问不同的 URL，渲染不同的模板得到 HTML 返回给用户。</p>
</li>
<li><p>在代理服务器中，Controller 将用户的请求转发到其他服务器上，并将其他服务器的处理结果返回给用户。</p>
<p>Controller层主要对用户的请求参数进行处理(校验、转换)，然后调用对应的service方法处理业务，得到业务结果后封装并返回:</p>
<p>1.获取用户通过HTTP传递过来的请求参数</p>
<p>2.校验、组装参数</p>
<p>3.调用service进行业务处理，必要时处理转换service的返回结果，让它适应用户的需求。</p>
<p>4.通过HTTP将结果响应给用户</p>
</li>
</ul>
<p><strong>如何编写Controller</strong></p>
<p>  所有的 Controller 文件都必须放在 app/controller 目录下，可以支持多级目录，访问的时候可以通过目录名级联访问。Controller 支持多种形式进行编写，可以根据不同的项目场景和开发习惯来选择。</p>
<p>  我们可以通过定义Controller类的方式来编写代码。每一个 Controller 都是一个 async function，它的入参为请求的上下文 <a href="https://eggjs.org/zh-cn/basics/extend.html#context">Context</a> 对象的实例，通过它我们可以拿到框架封装好的各种便捷属性和方法。</p>
<p><strong>HTTP基础</strong></p>
<p>  HTTP协议，如发起一个HTTP请求来访问Controller:curl -X POST <a href="http://localhost:3000/api/posts">http://localhost:3000/api/posts</a> –data ‘{“title”:”controller”, “content”: “what is controller”}’ –header ‘Content-Type:application/json; charset=UTF-8’</p>
<p>通过curl发出的HTTP请求如下:</p>
<p>POST /api/posts HTTP/1.1</p>
<p>Host: localhost:3000</p>
<p>Content-Type: application/json; charset=UTF-8</p>
<p>{“title”: “controller”, “content”: “what is controller”}</p>
<p>请求第一行包括:</p>
<ul>
<li>method:如这个请求中的method值是POST</li>
<li>path:值为/api/posts,如果用户的请求中包含query，也会在这里出现</li>
</ul>
<p>从第二行开始直到遇到的第一个空行位置，都是请求的 Headers 部分，这一部分中有许多常用的属性，包括这里看到的 Host，Content-Type，还有 Cookie，User-Agent 等等。在这个请求中有两个头：</p>
<ul>
<li>Host：我们在浏览器发起请求的时候，域名会用来通过 DNS 解析找到服务的 IP 地址，但是浏览器也会将域名和端口号放在 Host 头中一并发送给服务端。</li>
<li>Content-Type：当我们的请求有 body 的时候，都会有 Content-Type 来标明我们的请求体是什么格式的。</li>
</ul>
<p>之后的内容全部都是请求的 body，当请求是 POST, PUT, DELETE 等方法的时候，可以带上请求体，服务端会根据 Content-Type 来解析请求体。</p>
<p>在服务端处理完这个请求后，会发送一个 HTTP 响应给客户端</p>
<p>HTTP/1.1 201 Created</p>
<p>Content-Type: application/json; charset=utf-8</p>
<p>Content-Length: 8</p>
<p>Date: Mon, 09 Jan 2017 08:40:28 GMT</p>
<p>Connection: keep-alive</p>
<p>{“id”: 1}</p>
<p>第一行中也包含了三段，其中我们常用的主要是<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">响应状态码</a>，这个例子中它的值是 201，它的含义是在服务端成功创建了一条资源。</p>
<p>和请求一样，从第二行开始到下一个空行之间都是响应头，这里的 Content-Type, Content-Length 表示这个响应的格式是 JSON，长度为 8 个字节。</p>
<p>最后剩下的部分就是这次响应真正的内容。</p>
<p><strong>获取HTTP请求参数</strong></p>
<p>  <strong>query</strong></p>
<p>   在URL中？后面的部分是一个Query String，这一部分通常用于GET类型的请求中传递参数。我们可以通过ctx.query拿到解析过后的这个参数体。当 Query String 中的 key 重复时，ctx.query 只取 key 第一次出现时的值，后面再出现的都会被忽略。GET /posts?category=egg&amp;category=koa 通过 ctx.query 拿到的值是 { category: ‘egg’ }。有时候我们的系统会设计成让用户传递相同的 key，例如 GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3。针对此类情况，框架提供了 ctx.queries 对象，这个对象也解析了 Query String，但是它不会丢弃任何一个重复的数据，而是将他们都放到一个数组中。</p>
<p><strong>body</strong></p>
<p>  我们固然可以通过URL传递参数，但是还有以下限制:</p>
<p>  1)浏览器中会对URL的长度有所限制，如果需要传递的参数过多就会无法传递。  </p>
<p>  2）服务端经常会将访问的完整URL记录到日志文件中，有一些敏感数据通过URL传递不安全。</p>
<p>  body部分通常用来传递POST、PUT和DELETE等方法的参数。一般请求中有body的时候，客户端(浏览器)会同时发送Content-Type告诉服务端这次请求的body是什么格式的。Web开发中数据传递最常用的两类格式分别是JSON和Form。</p>
<p>  框架内置了bodyParser中间件来对这两类格式的请求body解析成object挂载到ctx.request.body上.HTTP协议中并不建议在通过GET、HEAD方法访问时传递body，所以我们无法在GET、HEAD方法中按照此方法获取到内容。</p>
<p>  框架对bodyParser设置了一些默认参数，一般来说我们最经常调整的配置项就是变更解析时允许的最大长度，可以在config/config.default.js中覆盖框架的默认值。注:在调整bodyParser支持的body长度时，如果我们应用前面还有一层反向代理(Nginx)，可能也需要调整它的配置，确保反向代理也支持同样长度的请求body。</p>
<p><strong>获取上传的文件</strong></p>
<p>  请求body除了可以带参数外，还可以发送文件，一般来说，浏览器上都是通过Mutipart/form-data 格式发送文件，框架通过内置Multipart插件来支持获取用户上传的文件。有两种方式:File模式与Stream模式。</p>
<p><strong>header</strong></p>
<p>  除了从URL和请求body上获取参数之外，还有许多参数请求header传递的。框架提供了一些辅助属性和方法来获取。</p>
<ul>
<li><p>ctx.headers，ctx.header，ctx.request.headers，ctx.request.header：这几个方法是等价的，都是获取整个 header 对象。</p>
</li>
<li><p>ctx.get(name)，ctx.request.get(name)：获取请求 header 中的一个字段的值，如果这个字段不存在，会返回空字符串。</p>
</li>
<li><p>我们建议用 ctx.get(name) 而不是 ctx.headers[‘name’]，因为前者会自动处理大小写。</p>
<p>详见官方文章。</p>
</li>
</ul>
<p><strong>Cookie</strong></p>
<p>  cookie是保存在客户机中的简单的文本文件，这个文件保留了该客户机访问这个web文档时的信息，当用户再次访问这个web文档时这些信息可供该文档使用。它可以帮助我们实现记录用户个人信息的功能。</p>
<p>  我们Web应用为了知道发起请求的人是谁，HTTP协议设计了一个特殊的请求头:Cookie(set-cookie)将少量数据响应给客户端，浏览器会遵循协议将数据保存，并在下次请求同一个服务的时候带上。</p>
<p>  通过ctx.cookies，我们可以在Controller中便捷、安全的设置和读取Cookie。</p>
<p>  Cookie在web应用中经常承担了传递客户端身份信息的作用，因此有许多安全相关的配置。</p>
<p><strong>Session</strong></p>
<p>  通过Cookie，我们可以给每一个用户设置一个session，用来存储用户身份相关的信息，这份信息会加密后存储在cookie中，实现跨请求的用户身份保持。</p>
<p>  框架内置了Seesion插件，给我们提供了ctx.session来提供或者修改当前用户Session。</p>
<p>  Session直接读取或者修改即可，如果要删除它，直接将它赋值为null。</p>
<p><strong>参数校验</strong></p>
<p>  在获取到用户请求的参数后，不可避免的要求参数进行一些校验。</p>
<p>  借助Validata插件提供的ctx.validata(rule,[body])直接对参数进行校验。</p>
<p>  当校验异常时，会直接抛出一个异常，异常状态码为422，errors字段包含了详细的验证不通过信息。如果想要自己处理检查的异常，可以通过try catch来自行捕捉。</p>
<p>  <strong>校验规则</strong></p>
<p>参数校验通过Parameter完成，支持的校验规则可以在该模块的文档中查阅到。除了内置检验类型外，有时候我们希望自定义一些奇偶碍眼规则，我们可以通过app.validator.addRule(type,check)的方式新增自定义规则。</p>
<p><strong>调用Service</strong></p>
<p>  egg提供了一个service层进行业务逻辑的封装。在Controller中可以调用任何一个service上的任何方法，同时service是懒加载的，只有当访问到它的时候框架才会去实例化它。</p>
<p><strong>发送HTTP响应</strong></p>
<p>  当业务逻辑完成后，Controller的最后一个职责就是将业务逻辑的处理结果通过HTTP响应发送给用户。</p>
<p><strong>设置status(状态码)</strong></p>
<p>  框架提供了一个便捷的setter来进行状态码的设置。</p>
<p><strong>设置body</strong></p>
<p>  在响应中发送的body，也需要配套的Content-Type告知客户端如何对数据进行解析。详见官方文件。</p>
<p>  框架也支持将body设置成一个Stream，并会同时处理好这个Stream上的错误事件。</p>
<p><strong>渲染模板</strong></p>
<p>  我们一般会通过模板引擎生成HTML页面。框架自身没有集成任何一个模板引擎，但是可以通过接入的模板引擎直接使用ctx.render(template)。</p>
<p><strong>JSONP</strong></p>
<p>  我们需要给非本域的页面提供接口服务时，可以通过JSONP进行响应。由于 JSONP 如果使用不当会导致非常多的安全问题，所以框架中提供了便捷的响应 JSONP 格式数据的方法，封装了 <a href="https://eggjs.org/zh-cn/core/security.html#jsonp-xss">JSONP XSS 相关的安全防范</a>，并支持进行 CSRF 校验和 referrer 校验。</p>
<p><strong>JSONP配置/跨站防御配置/referrer校验</strong></p>
<p>详见官方文档</p>
<p><strong>设置Header</strong></p>
<p>  我们通过状态码请求成功与否、状态如何，在body中设置响应的内容。而通过响应的Header，还可以设置一些扩展信息。</p>
<p><strong>重定向</strong></p>
<p>  框架通过security插件覆盖了koa原生的ctx.redirect实现，以提供更加安全的重定向。</p>
<h2 id="服务-Service"><a href="#服务-Service" class="headerlink" title="服务(Service)"></a>服务(Service)</h2><p>  service就是在复杂业务场景下用于做业务逻辑封装的一个抽象层，提供这个抽象的好处如下:</p>
<ul>
<li>保持Controller中的逻辑更加简洁</li>
<li>保持业务逻辑的独立性，抽象出来的service可以被多个Controller重复调用。</li>
<li>将逻辑和展现分离，更容易编写测试用例。</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>复杂数据的处理，比如调用数据库信息还要经过计算返回给用户</li>
<li>第三方服务的调用，比如GitHib信息获取等</li>
</ul>
<p><strong>属性</strong></p>
<p>  service有下列属性方便我们进行开发:</p>
<ul>
<li>this.ctx: 当前请求的上下文 <a href="https://eggjs.org/zh-cn/basics/extend.html#context">Context</a> 对象的实例，通过它我们可以拿到框架封装好的处理当前请求的各种便捷属性和方法。</li>
<li>this.app: 当前应用 <a href="https://eggjs.org/zh-cn/basics/extend.html#application">Application</a> 对象的实例，通过它我们可以拿到框架提供的全局对象和方法。</li>
<li>this.service：应用定义的 <a href="https://eggjs.org/zh-cn/basics/service.html">Service</a>，通过它我们可以访问到其他业务层，等价于 this.ctx.service 。</li>
<li>this.config：应用运行时的<a href="https://eggjs.org/zh-cn/basics/config.html">配置项</a>。</li>
<li>this.logger：logger 对象，上面有四个方法（debug，info，warn，error），分别代表打印四个不同级别的日志，使用方法和效果与 <a href="https://eggjs.org/zh-cn/core/logger.html#context-logger">context logger</a> 中介绍的一样，但是通过这个 logger 对象记录的日志，在日志前面会加上打印该日志的文件路径，以便快速定位日志打印位置。</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>back-Design</category>
      </categories>
      <tags>
        <tag>back-design</tag>
      </tags>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2020/09/30/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="Part-1-JS简介"><a href="#Part-1-JS简介" class="headerlink" title="Part 1 JS简介"></a>Part 1 JS简介</h1><h2 id="Js实现"><a href="#Js实现" class="headerlink" title="Js实现"></a>Js实现</h2><p>JS由核心(ECMAScript)、文档对象模型(DOM)、浏览器对象模型(BOM)组成</p>
<ul>
<li>核心：规定了这门语言的语法、类型等基础内容</li>
<li>DOM：提供访问和操作网页内容的方法和接口，暂理解为标签树</li>
<li>BOM：提供与浏览器交互的方法和接口</li>
</ul>
<h1 id="Part-2-在HTML中使用JS"><a href="#Part-2-在HTML中使用JS" class="headerlink" title="Part 2 在HTML中使用JS"></a>Part 2 在HTML中使用JS</h1><h1 id="“script”元素"><a href="#“script”元素" class="headerlink" title="“script”元素"></a>“script”元素</h1><ul>
<li>src：里面放外部文件，如a.png等</li>
<li>type：必选，一般来用text/javascript</li>
</ul>
<p>Tips：</p>
<ul>
<li><p>script按照顺序解析</p>
</li>
<li><p>现代Web应用一般把JS引用放在body后面，如bodyscript type=”…” src=””</p>
</li>
<li><p>HTML中推荐使用外部JS导入来使用</p>
</li>
</ul>
<h1 id="Part-3-基本概念"><a href="#Part-3-基本概念" class="headerlink" title="Part 3 基本概念"></a>Part 3 基本概念</h1><p>Tips：JS大量借鉴C</p>
<ul>
<li>区分大小写</li>
<li>严格模式：来源于JS</li>
<li>注释：//或/* */</li>
<li>加分号</li>
<li>定义变量：var a=100;函数内var定义局部变量，不加var定义全局变量</li>
<li>‘’和””同样理解为String类型，没区别</li>
<li>Object是所有对象的基础</li>
<li>默认情况下JS中所有整数都是有符号整数</li>
<li>for-in枚举对象属性</li>
<li>函数声明：function 函数名(a,b,c…){…}</li>
<li>JS传参可以随意传，如定义一个形参，但可以不传或多传，因为JS传参为数组，可以使用argument.length==?来根据参数个数进行操作</li>
<li>return;返回undefined</li>
</ul>
<h1 id="Part-4-变量、作用域和内存问题"><a href="#Part-4-变量、作用域和内存问题" class="headerlink" title="Part 4 变量、作用域和内存问题"></a>Part 4 变量、作用域和内存问题</h1><p>Tips：</p>
<ul>
<li>创建对象new Object()</li>
<li>复制变量即复制值，var num1=num//num==num1</li>
<li>复制对象即复制对象，var obj2=obj1;对象()，此时对象名即指针，复制对象名等于复制地址</li>
<li>JS中所有函数的参数都是按值传递的</li>
<li>typeof()检测基本类型、instanceof()检测引用类型</li>
<li>全局环境即window对象，全局变量和函数都作为window对象的属性和方法创建的，代码执行完后，环境中所有变量均被销毁</li>
<li>if、for语句中声明的变量即为全局变量</li>
<li>JS有垃圾回收机制</li>
</ul>
<h1 id="Part-5-引用类型"><a href="#Part-5-引用类型" class="headerlink" title="Part 5 引用类型"></a>Part 5 引用类型</h1><p>引用类型：复制类型名即复制地址</p>
<ul>
<li>Object：var person=new Object();和var person={name:”aa”,age:29}对象字面量表示法，这种不调用构建方法。</li>
<li>Array：数组内不限制类型、动态大小、可以省略new、数组.length可修改</li>
<li>Date：Date.parse()换成ms</li>
<li>RegEXP：正则表达式</li>
<li>Function：函数名实际是指向函数对象的指针、没有重载，一样的名字会覆盖。</li>
</ul>
<p>Tips:</p>
<ul>
<li>类似栈函数push()、pop()</li>
<li>类似队列函数shift()、push()</li>
<li>数组反序方法reverse()、排列方法sort()不过是先toString()用字符串进行排序的，如果需要数值比较则需要写一个compare()函数</li>
<li>concat()方法对数组内元素进行删除、插入、替换</li>
<li>可以将一个函数作为另一个函数的结果返回</li>
<li>函数内部对象this引用函数当前对象的属性如this.color</li>
<li>函数名.length表示接收参数的个数</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
        <category>JS红宝书</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell/Mongo定时导出删除</title>
    <url>/2020/09/30/shell/</url>
    <content><![CDATA[<p>代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Shell</span></span><br><span class="line"></span><br><span class="line">log10=$(date +%s)<span class="comment">#先取当前时间</span></span><br><span class="line">t1=$((-<span class="number">3</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))<span class="comment">#三天</span></span><br><span class="line">log11=$((<span class="variable">$t1</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))<span class="comment">#时区转换为格林尼治时间</span></span><br><span class="line">log1=$(date -d <span class="string">&quot;<span class="variable">$date</span> UTC <span class="variable">$log11</span> seconds&quot;</span> <span class="string">&quot;+%Y-%m-%dT00:00:00.000Z&quot;</span> )<span class="comment">#直接用字符串锁死时分秒</span></span><br><span class="line"></span><br><span class="line">t2=$((-<span class="number">2</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">log12=$((<span class="variable">$t2</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">log2=$(date -d <span class="string">&quot;<span class="variable">$date</span> UTC <span class="variable">$log12</span> seconds&quot;</span> <span class="string">&quot;+%FT00:00:00.000Z&quot;</span> )</span><br><span class="line"></span><br><span class="line">mongoexport --host ... --port 27017 --username ... -p ... --authenticationDatabase  admin --db  ...  --collection  ... --query <span class="string">&#x27;&#123; &quot;createdAt&quot; : &#123; &quot;$gte&quot; : &#123; &quot;$date&quot; : &quot;&#x27;</span><span class="variable">$&#123;log1&#125;</span><span class="string">&#x27;&quot; &#125;,&quot;$lte&quot;:&#123;&quot;$date&quot; : &quot;&#x27;</span><span class="variable">$&#123;log2&#125;</span><span class="string">&#x27;&quot;&#125;&#125;&#125;&#x27;</span> --out /home/ubuntu/...$(date -d <span class="string">&#x27;2 day ago&#x27;</span> <span class="string">&quot;+%Y%m%d&quot;</span>).json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mongo</span></span><br><span class="line">mongo 127.0.0.1:27017&lt;&lt;EOF</span><br><span class="line">use admin</span><br><span class="line">db.auth(账号,密码)</span><br><span class="line">use 库名</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>=new Date().valueOf()<span class="comment">#用时间戳的方式</span></span><br><span class="line">t1=-3*24*60*60*1000-1.5*60*60*1000<span class="comment">#因为要求在当天1.30</span></span><br><span class="line">t2=-2*24*60*60*1000-1.5*60*60*1000</span><br><span class="line">log1=<span class="built_in">log</span>+t1</span><br><span class="line">log2=<span class="built_in">log</span>+t2</span><br><span class="line">log1=new Date(log1)<span class="comment">#规格化时间</span></span><br><span class="line">log2=new Date(log2)</span><br><span class="line">db.表名.deleteMany(&#123;<span class="string">&quot;createdAt&quot;</span>:&#123;<span class="string">&quot;\$gte&quot;</span>:log1,<span class="string">&quot;\$lte&quot;</span>:log2&#125;&#125;)</span><br><span class="line">db.表名.deleteMany(&#123;<span class="string">&quot;createdAt&quot;</span>:&#123;<span class="string">&quot;\$gte&quot;</span>:log1,<span class="string">&quot;\$lte&quot;</span>:log2&#125;&#125;)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#月份	</span></span><br><span class="line"><span class="comment">#在月份使用的时候有一个问题就是怎么获取上上个月的月份才好使用时间戳确定时间</span></span><br><span class="line"><span class="comment">#想到可以用数组，本来是想用m[-1]==m[m.length-1]的思路，发现js不是这样，但是可以赋值-1</span></span><br><span class="line">var m=new Array()</span><br><span class="line">m[-2]=30</span><br><span class="line">m[-1]=31</span><br><span class="line">m[0]=31</span><br><span class="line">m[1]=28</span><br><span class="line">m[2]=31</span><br><span class="line">m[3]=30</span><br><span class="line">m[4]=31</span><br><span class="line">m[5]=30</span><br><span class="line">m[6]=31</span><br><span class="line">m[7]=31</span><br><span class="line">m[8]=30</span><br><span class="line">m[9]=31</span><br><span class="line">m[10]=30</span><br><span class="line">m[11]=31</span><br><span class="line">log4=new Date()</span><br><span class="line">log3=new Date().valueOf()</span><br><span class="line">t1=-(m[log4.getMonth()-1]+m[log4.getMonth()-2]+m[log4.getMonth()-3])*24*60*60*1000</span><br><span class="line">t2=-(m[log4.getMonth()-1]+m[log4.getMonth()-2])*24*60*60*1000</span><br><span class="line">log1=log3+t1-1.5*60*60*1000</span><br><span class="line">log2=log3+t2-1.5*60*60*1000</span><br><span class="line">log1=new Date(log1)</span><br><span class="line">log2=new Date(log2)</span><br></pre></td></tr></table></figure>





<p>目标：做一个定时运行对mongo数据库进行导出和删除数据的脚本</p>
<p>难点：对时间和shell、mongo命令行操作，及ISO和UTC的变换，Crontable定时</p>
<p>shell是使用${}取值，变量=${date}获取日期，如果是整数日期变换可以使用date -d里的类似3 day ago、8 hour ago进行变换，而如果涉及多个时间则只能先将时间变为秒加减后再格式化为时间</p>
<p>mongo可以直接使用变量名取值，变量=Date()取ISO时间值，使用valueOf()取秒，变换后再Date(变量)取值</p>
<p>后又发现在shell里面使用mongo出现问题：</p>
<p>问题一：使用mongo命令直接进入mongo界面不执行指令</p>
<p>解决方法：使用&lt;&lt;EOF和EOF输入即可</p>
<p>问题二：使用db.mange.deleteMany(“createdAt”:{“gte”:ISO()})时无法删除</p>
<p>解决方法：在gte前使用转义字符\即可，这个困扰了好几天</p>
<p>问题三：路径出问题</p>
<p>解决方案：~在命令行都能进故觉得是绝对路径，但是在shell不行，~表示/home/用户名</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
</search>
