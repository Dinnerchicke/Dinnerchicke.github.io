<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>comShell</title>
    <url>/2020/10/06/comShell/</url>
    <content><![CDATA[<h1 id="Shell常用指令"><a href="#Shell常用指令" class="headerlink" title="Shell常用指令"></a>Shell常用指令</h1><p><img src="/.com//1.jpg"></p>
<h2 id="文件及命令"><a href="#文件及命令" class="headerlink" title="文件及命令"></a>文件及命令</h2><ul>
<li>cat 显示文件内容</li>
<li>cd ..返回上级目录 cd ../..返回上两级目录</li>
<li>pwd 显示工作路径</li>
<li>more 显示文件内容，空格向后，b向前</li>
<li>head 查看文件开头</li>
<li>tail 查看文件末尾</li>
<li>rm -f 文件名 删除文件</li>
<li>rm -rf 强制删除</li>
<li>cp file1 file2 复制文件</li>
<li>gzip 文件名/目录名 压缩后面文件或文件夹，-d解压</li>
<li>tail -f 文件名 跟踪文件的增长情况，-n显示文件尾部n行内容</li>
<li><em>ranger</em> 好使的浏览文件方法 gg顶部，G底部，g 定位，f查找，还支持鼠标点击！</li>
</ul>
<h2 id="系统常用"><a href="#系统常用" class="headerlink" title="系统常用"></a>系统常用</h2><ul>
<li>ls -s查看目录详细文件信息</li>
<li>sudo apt-get –purge remove <programname> 卸载软件</programname></li>
<li>top 查看当前系统中耗费资源最多进程</li>
<li>data 系统当前时间</li>
<li>ps -ax 查看所有进程</li>
<li>df -h 查看磁盘剩余资源</li>
<li>kill PID 杀死进程，-KILL强制杀死</li>
<li>ss -tlnp 查看哪些进程使用了监听端口</li>
<li>ps aux | grep java | grep -v grep 显示出所有java进程，处理当前grep进程(常用管道命令，grep处理字符串)</li>
<li>shutdown  -h now 关闭系统</li>
<li>strace 跟踪系统调用的执行，-p进程号，-c -p运行一段时间后停止获取数据，-o输出结果，-tt时刻调用，-y路径，-c调用次数等</li>
<li>netstat 统计网络相关协议数据</li>
<li>perf 系统性能分析</li>
<li>free -h 查看内存</li>
<li>dstat 综合分析，-c cpu，-d磁盘，-i 中断统计，-l负载均衡统计，-m内存统计，-n网络统计，-p 进程统计</li>
<li>reboot 重启</li>
<li>logout 注销</li>
</ul>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li>Ctrl+c 终止进程</li>
<li>Ctrl+l  清屏</li>
<li>Ctrl+q 退出</li>
<li>/&gt; 将前面一条命令的输出写入到后面的文本中，文本清空后写入</li>
<li>/&gt;&gt; 同&gt;，文本不清空</li>
<li>| 管道命令，以前一个命令的输出作为输入运行，如cat 1.txt | grep ‘hello’ 打印1.txt中带有hello字符串的行</li>
</ul>
<h2 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>gg 跳到首行</li>
<li>G 跳到末行</li>
<li>:n 跳到n行</li>
</ul>
<h3 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h3><ul>
<li>u undo，取消上一步操作</li>
<li>Ctrl+r 返回到undo之前</li>
</ul>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><ul>
<li>dd 删除光标所在行</li>
<li>dG 删除光标所在行到末尾行的所有内容</li>
<li>D 删除光标所在处到行尾的内容</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>数据监控与前端埋点</title>
    <url>/2022/01/09/%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/</url>
    <content><![CDATA[<p>埋个小坑，以后遇到再继续填</p>
<p><img src="/.com//bytedance/Desktop/personal/hexo/source/_posts/%E6%95%B0%E6%8D%AE%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9.png" alt="数据埋点"></p>
]]></content>
  </entry>
  <entry>
    <title>作用域</title>
    <url>/2021/06/30/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h1><blockquote>
<p>作用域的作用是什么？</p>
<p>隔离变量</p>
</blockquote>
<h2 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h2><blockquote>
<p>JavaScript的作用域分为？</p>
<ul>
<li>全局作用域：在最外层定义、未定义直接赋值、window对象属性定义的变量拥有全局作用域</li>
<li>函数作用域：指声明在函数内部的变量</li>
<li>块级作用域：ES6引入的let/const</li>
</ul>
<p>函数作用域有诸多弊端，故ES6引入了let/const声明块级作用域让变量的生命周期更可控</p>
</blockquote>
<blockquote>
<p>块级作用域在什么时候被创建？</p>
<ul>
<li>函数内部</li>
<li>代码块(花括号{})内部</li>
</ul>
<p>let/const声明的变量有什么特点？</p>
<ul>
<li>声明的变量不会被提升</li>
<li>重复声明被禁止</li>
<li>块级作用域，作用域被限制在函数/代码块内部</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拥有全局作用域的变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// window.c = 30 // window是浏览器的对象，故无法赋值</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="comment">// console.log(c)</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;----------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var声明的函数作用域</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e) <span class="comment">// 变量提升，依然可以访问，就是值为undefined</span></span><br><span class="line">  <span class="keyword">var</span> e = <span class="number">30</span></span><br><span class="line">  <span class="keyword">var</span> e = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 外部无法访问</span></span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.name +<span class="string">&#x27; &#x27;</span>+ error.msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;----------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let/const声明的块级作用域</span></span><br><span class="line">(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f) <span class="comment">// 提前使用时报错：语法错误</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.name +<span class="string">&#x27; &#x27;</span>+ error.msg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="number">30</span></span><br><span class="line">  <span class="built_in">console</span>.log(f)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 外部无法访问</span></span><br><span class="line">  <span class="built_in">console</span>.log(f)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.name +<span class="string">&#x27; &#x27;</span>+ error.msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote>
<p>什么叫作用域链？</p>
<p>当在当前作用域未找到该变量，则会通过作用域链向父级继续寻找该变量，直到全局作用域。这种一层层寻找的关系，就叫作用域链。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">200</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">300</span></span><br><span class="line">        <span class="built_in">console</span>.log(a) <span class="comment">// 沿着作用域链向父作用域找</span></span><br><span class="line">        <span class="built_in">console</span>.log(b) <span class="comment">// 沿着作用域链向父作用域找</span></span><br><span class="line">        <span class="built_in">console</span>.log(c) <span class="comment">// 本地变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    F2()</span><br><span class="line">&#125;</span><br><span class="line">F1()</span><br></pre></td></tr></table></figure>



<h3 id="静态作用域链"><a href="#静态作用域链" class="headerlink" title="静态作用域链"></a>静态作用域链</h3><blockquote>
<p>JavaScript的作用域是<code>静态作用域</code>，即变量取值是从<code>创建函数</code>的域中取而不是从<code>调用的地方取</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">40</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 根据函数创建的地方的作用域来获取变量而不是通过调用它的地方</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c) <span class="comment">// 10 + 20 + 40 = 70</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1000</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>



<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p>为什么会出现闭包？</p>
<p>闭包的出现是因为JavaScript可以将<code>函数作为返回值</code>，这时候就出现了一个问题：父作用域已经被销毁了，子函数要使用父函数作用域内的变量怎么办？所以出现了闭包。</p>
</blockquote>
<blockquote>
<p>闭包的原理</p>
<p>当返回的函数里面有父作用域变量时，肯定不能保留父作用域所有变量，那肯定会出问题。所以取了一个折中的办法：</p>
<p>再创建一个对象[[Scopes]]存放函数需要的环境</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> func1Closure = <span class="string">&#x27;func1Closure&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> other1 = <span class="string">&#x27;other1&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> func2Closure = <span class="string">&#x27;func2Closure&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> other2 = <span class="string">&#x27;other2&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(func1Closure)</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> other3 = <span class="string">&#x27;other3&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(func2Closure)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> func3Closure = <span class="string">&#x27;func3Closure&#x27;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> func3;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> func2;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> func2 = func();</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> func3 = func2();</span></span><br><span class="line">  func3()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//1.jpg"></p>
<blockquote>
<p>Tips：</p>
<ul>
<li>因为eval()会动态生成作用域，故会把整个作用域打包，所以尽量不要使用eval</li>
<li>因为闭包常常会导致内存无法释放问题，所以闭包不要乱用</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解同步与异步</title>
    <url>/2021/06/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="深入理解同步与异步"><a href="#深入理解同步与异步" class="headerlink" title="深入理解同步与异步"></a>深入理解同步与异步</h1><h2 id="同步与异步的概念"><a href="#同步与异步的概念" class="headerlink" title="同步与异步的概念"></a>同步与异步的概念</h2><blockquote>
<p>为什么要区分同步与异步？</p>
<p>因为Js是单线程的，如果全都是同步任务的话，主线程就被<code>阻塞</code>了。比如发送一个AJAX请求，如果它是同步的话，那么在等待服务器响应的过程中整个主线程就被阻塞了，其他任务都无法被执行。</p>
<p>就像人在散步的过程中，不可能全程只走路。不观察四周有没有认识的人、突然驶来的车。</p>
</blockquote>
<blockquote>
<p>什么是同步函数？什么是异步函数？</p>
<p>简单来说，同步函数按照顺序执行，且在执行后能<code>立即</code>获得结果。</p>
<p>异步函数调用后马上返回，但是<code>不会马上返回结果</code>，调用者无需阻塞等待，当函数得到结果后会通过<code>回调函数</code>主动通知调用者。</p>
</blockquote>
<h2 id="消息队列与事件循环"><a href="#消息队列与事件循环" class="headerlink" title="消息队列与事件循环"></a>消息队列与事件循环</h2><blockquote>
<p>从图中可知，主线程的所有任务都来自于消息队列(FIFO)。</p>
<p>主线程通过事件循环机制来不断执行从消息队列中取出的任务</p>
</blockquote>
<p><img src="/.com//1.jpg"></p>
<h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><blockquote>
<p>什么是宏任务？</p>
<p>宏任务即如下的任务(名称并没有什么实际意义)：</p>
<ul>
<li>渲染事件（如解析 DOM、计算布局、绘制）</li>
<li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）</li>
<li>JavaScript 脚本执行事件</li>
<li>网络请求完成、文件读写完成事件</li>
</ul>
<p>这些任务在消息队列上被取出在主线程上正常执行，我们把这些<code>消息队列中的任务</code>称为宏任务。</p>
</blockquote>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><blockquote>
<p>为什么会出现微任务？</p>
<p>因为有的任务<code>实时性</code>要求较高。比如setTimeout里面的任务需要在设定的时间立即执行，但是主线程常常被其他任务占领，这个时候就需要微任务提高任务的优先级，在更精细的时间粒度对任务进行操作。</p>
</blockquote>
<blockquote>
<p>什么是微任务？</p>
<p>微任务就是需要<code>异步执行</code>的函数，执行时机是在<code>主函数执行结束后</code>，当前<code>宏任务结束之前</code></p>
</blockquote>
<blockquote>
<p>微任务有什么？</p>
<ul>
<li>process.nextTick(Node)</li>
<li>Promise.then()/reject()/catch()</li>
<li>Object.Observe</li>
<li>MutationObserver</li>
</ul>
</blockquote>
<blockquote>
<p>微任务是如何被执行的？</p>
<p>通过调用上述API会将微任务添加到微任务队列中。通常当宏任务中的JavaScript快执行结束，即准备退出执行上下文并清空调用栈时(这个时间点被称为检查点)，JavaScript引擎会检查执行上下文的微任务，然后按照顺序执行微任务队列。V8引擎执行微任务队列中的任务直到为空才结束，即执行微任务过程中产生的微任务会立即添加到队尾执行。</p>
</blockquote>
<p><img src="/.com//2.jpg"></p>
<blockquote>
<p>Tip：微任务与宏任务是绑定的，每个宏任务在执行时会创建自己的微任务队列</p>
</blockquote>
<h3 id="宏任务与微任务执行顺序"><a href="#宏任务与微任务执行顺序" class="headerlink" title="宏任务与微任务执行顺序"></a>宏任务与微任务执行顺序</h3><blockquote>
<p>当宏任务为<code>同步任务</code>时，毫无疑问先执行宏任务</p>
<p>当宏任务与微任务<code>同为异步任务</code>时，注意此时<code>先执行微任务再执行宏任务</code></p>
</blockquote>
<p><img src="/.com//3.jpg"></p>
<h4 id="特别篇：Async-Await"><a href="#特别篇：Async-Await" class="headerlink" title="特别篇：Async/Await"></a>特别篇：Async/Await</h4><blockquote>
<p>Async做了什么？</p>
<ul>
<li><p>如果你返回的不是promise，会自动用Promise.resolve()包装返回</p>
</li>
<li><p>如果你返回的是promise，则以返回的为准</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>Await做了什么？</p>
<ul>
<li>如果右侧是函数，那么函数的返回值就是结果</li>
<li>如果右侧是非函数，则表达式的结果就是其本身</li>
</ul>
<p>Tip：await还是会执行后面的函数，但是函数后的内容就会被阻塞</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如await会执行async2()，但是后面的内容async1 end就会被阻塞</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;async1 start&#x27;</span> )</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;async1 end&#x27;</span> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;async2&#x27;</span> )</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;script start&#x27;</span> )</span><br></pre></td></tr></table></figure>



<h2 id="宏任务与微任务实战"><a href="#宏任务与微任务实战" class="headerlink" title="宏任务与微任务实战"></a>宏任务与微任务实战</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：script start、script end、promise1、promise2、setTimeout</p>
<p>分析：</p>
<ol>
<li>首先执行宏任务的同步任务：script start、script end</li>
<li>接下来执行微任务：当执行微任务时遇到新的微任务一起执行，故promise1、promise2</li>
<li>最后执行异步宏任务的回调函数：setTimeout</li>
</ol>
</blockquote>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Promise1&#x27;</span>)  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Promise2&#x27;</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：Promise1、setTimeout1、Promise2、setTimeout2</p>
<p>分析：</p>
<ol>
<li>没有同步任务，先执行微任务，即Promise1</li>
<li>执行异步宏任务回调函数setTimeout1</li>
<li>执行微任务：Promise2</li>
<li>执行异步宏任务回调函数setTimeout2</li>
</ol>
</blockquote>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：1，7，6，8，2，4，3，5，9，11，10，12</p>
<p>分析；</p>
<ol>
<li>同步输出：1，7</li>
<li>微任务：6，8</li>
<li>异步宏任务setTimeout1：2，4。这里有个坑，setTimeout算一个宏任务，平时同步执行的话整个JavaScript算一个宏任务所以一直执行，这个setTimeout就不能一直执行到下一个。</li>
<li>无同步任务，执行微任务：3，5</li>
<li>异步宏任务setTimeout2：9，10</li>
<li>微任务：10，12</li>
</ol>
</blockquote>
<h3 id="第四题：Async-Await"><a href="#第四题：Async-Await" class="headerlink" title="第四题：Async/Await"></a>第四题：Async/Await</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：script start、async1 start、async2、promise1、script end、promise2、async1 end、setTimeout</p>
<p>分析：</p>
<ol>
<li>同步：script start、async1 start、async2、promise1、script end</li>
<li>微任务：promise2</li>
<li>同步：async1 end、setTimeout</li>
</ol>
<p>Tip：最后一步这样理解：微任务执行完，async2语句结束，后面的代码不再被阻塞，所以直接打印async1 end</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器</title>
    <url>/2021/06/28/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><blockquote>
<p>迭代器本质上是一个函数，可以通过这个函数遍历特定数据结构的对象</p>
<p>迭代器模式：提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。</p>
</blockquote>
<blockquote>
<p>迭代器协议：</p>
<ul>
<li>next()：每次成功调用next都会返回一个IteratorResult对象</li>
</ul>
<p>IteratorResult包括：</p>
<ul>
<li>done：表示是否可以再次调用next(值为true/false)</li>
<li>value：表示当前的值</li>
</ul>
</blockquote>
<blockquote>
<p>提前终止迭代器：</p>
<ul>
<li>利用return提前结束，但是并非所有的迭代器都是可关闭的</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器就是一个函数，也叫迭代器生成函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Iterator</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> curIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> next = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: o[curIndex],</span><br><span class="line">      done: o.length == ++curIndex</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回迭代对象，该对象有next方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> oIt = Iterator(arr)</span><br><span class="line"><span class="built_in">console</span>.log(oIt)</span><br><span class="line"><span class="built_in">console</span>.log(oIt.next()) <span class="comment">// &#123;value:1,done:false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oIt.next()) <span class="comment">// &#123;value:2,done:false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oIt.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oIt.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]) <span class="comment">// [Function: values]</span></span><br></pre></td></tr></table></figure>



<h2 id="借用原型链实现迭代器"><a href="#借用原型链实现迭代器" class="headerlink" title="借用原型链实现迭代器"></a>借用原型链实现迭代器</h2><blockquote>
<p>实现[Symbol.iterator]即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借用原型链实现迭代器</span></span><br><span class="line"><span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> curIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> next = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="built_in">this</span>[curIndex],</span><br><span class="line">      done: <span class="built_in">this</span>.length == curIndex++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next,</span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;执行return提前终止迭代器&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="原生迭代器"><a href="#原生迭代器" class="headerlink" title="原生迭代器"></a>原生迭代器</h2><h3 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> arrEntires = arr.entries() <span class="comment">// entries对应键值对</span></span><br><span class="line"><span class="built_in">console</span>.log(arrEntires.next()) <span class="comment">// &#123;value: [0, 1], done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> arrKeys = arr.keys() <span class="comment">// 对于数组，索引值就是键值</span></span><br><span class="line"><span class="built_in">console</span>.log(arrKeys.next()) <span class="comment">// &#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> arrValues = arr.values() <span class="comment">// 从第一个值开始</span></span><br><span class="line"><span class="built_in">console</span>.log(arrValues.next()) <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of 遍历默认迭代器接口是values</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// [1,2,3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看到两个指向同一个函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.values)</span><br></pre></td></tr></table></figure>



<h3 id="Set迭代器"><a href="#Set迭代器" class="headerlink" title="Set迭代器"></a>Set迭代器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">let</span> setEntires = set.entries() <span class="comment">// Set，键名与键值相同。</span></span><br><span class="line">setEntires.next() <span class="comment">//&#123;value: [1, 1], done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> setKeys = set.keys()</span><br><span class="line">setKeys.next() <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> setValues = set.values()</span><br><span class="line">setValues.next() <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// [1,2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看到两个指向同一个函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Set</span>.prototype.values)</span><br></pre></td></tr></table></figure>



<h3 id="Map迭代器"><a href="#Map迭代器" class="headerlink" title="Map迭代器"></a>Map迭代器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ <span class="comment">// 自定义键值对</span></span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line"><span class="keyword">let</span> mapEntires = map.entries()</span><br><span class="line">mapEntires.next() <span class="comment">//&#123;value: [1, 2], done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> mapKeys = map.keys()</span><br><span class="line">mapKeys.next() <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> mapValues = map.values()</span><br><span class="line">mapValues.next() <span class="comment">//&#123;value: 2, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  ])) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// [1,2] [3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看到Map的iterator指向的是entries</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype[<span class="built_in">Symbol</span>.iterator])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype.entries)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype.values)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器错误处理</title>
    <url>/2021/06/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="浏览器错误处理"><a href="#浏览器错误处理" class="headerlink" title="浏览器错误处理"></a>浏览器错误处理</h1><h2 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h2><h3 id="try-catch捕获同步错误"><a href="#try-catch捕获同步错误" class="headerlink" title="try/catch捕获同步错误"></a>try/catch捕获同步错误</h3><blockquote>
<p>try/catch是常用的<code>同步</code>捕获错误的方式，语法如下:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// someError</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  alert(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><blockquote>
<p>ES6定义了以下错误类型：</p>
<ul>
<li><strong>EvalError</strong>：eval()参数发生错误时</li>
<li><strong>RangeError</strong>：当数值变量或参数超出其有效范围时发生的错误</li>
<li><strong>ReferenceError</strong>：找不到对象时发生</li>
<li><strong>SyntaxError</strong>：语法错误</li>
<li><strong>TypeError</strong>：当变量或参数不是有效类型</li>
<li><strong>URIError</strong>：在encodeURI()或decodeURI()传递无效参数时发生的错误</li>
</ul>
</blockquote>
<h4 id="推荐使用时机"><a href="#推荐使用时机" class="headerlink" title="推荐使用时机"></a>推荐使用时机</h4><blockquote>
<p>try/catch最好用在自己<code>无法控制</code>的错误上。比如在使用他人维护的库函数时，有时会抛出无法预料的错误，这时就需要try/catch将该函数包裹起来，对可能的错误进行处理。</p>
<p>如果你明确知道自己的函数会发生某种错误，那应该做的是进行条件判断处理而不是try/catch。</p>
</blockquote>
<h3 id="异步捕获错误"><a href="#异步捕获错误" class="headerlink" title="异步捕获错误"></a>异步捕获错误</h3><h4 id="Promise捕获错误"><a href="#Promise捕获错误" class="headerlink" title="Promise捕获错误"></a>Promise捕获错误</h4><blockquote>
<p>在Promise中的异步错误无法被try/catch同步捕获，这时就需要使用异步捕获的方法</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Promise</span>.prototype)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="literal">undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">    .then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        name = <span class="string">&#x27;aaa&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(name)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">    &#125;,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是reject&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    .then(<span class="function">()=&gt;</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(name)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delayedResolve</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    delayedResolve(<span class="string">&#x27;p1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      .then(<span class="function">()=&gt;</span>delayedResolve(<span class="string">&#x27;p2&#x27;</span>))</span></span><br><span class="line"><span class="javascript">      .then(<span class="function">()=&gt;</span>delayedResolve(<span class="string">&#x27;p3&#x27;</span>))</span></span><br><span class="line"><span class="javascript">      .then(<span class="function">()=&gt;</span>delayedResolve(<span class="string">&#x27;p4&#x27;</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;----------------------&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;同步错误&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;test&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是同步错误执行后的指令&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(error) <span class="comment">// 同步错误捕获成功</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;异步错误&#x27;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="comment">// .catch(reason=&gt;&#123; // 这样才能捕获异步错误, 注释以后浏览器报异步错误</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   console.log(reason)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是异步错误执行后的指令&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;test&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是异步错误执行后的指令&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(error) <span class="comment">// 异步错误捕获失败</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//1.jpg"></p>
<p><img src="/.com//2.jpg"></p>
<h4 id="async-await捕获错误"><a href="#async-await捕获错误" class="headerlink" title="async/await捕获错误"></a>async/await捕获错误</h4><blockquote>
<p>方法一：使用try/catch捕获错误</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PromiseStateMachine</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;PromiseStateMachine success&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">&#x27;PromiseStateMachine error&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> PromiseStateMachine(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error, <span class="string">&#x27;捕获成功&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<blockquote>
<p>方法二：.catch捕获错误</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> PromiseStateMachine(<span class="number">3</span>).then(<span class="function"><span class="params">r</span>=&gt;</span>r).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err, <span class="string">&#x27;捕获成功&#x27;</span>))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<blockquote>
<p>方法三：包装await的Promise对象</p>
<p>平时开发中Axios也是使用类似这种方式对每次的请求包装，统一处理</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awaitWrapper</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> promise.then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err, <span class="string">&#x27;捕获成功&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> awaitWrapper(PromiseStateMachine(<span class="number">3</span>))</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2><blockquote>
<p>与try/catch捕获错误对应的是抛出错误throw</p>
<p><strong>捕获错误的目的是阻止浏览器以默认方式响应，抛出错误的目的是为错误提供有关其发生原因的说明</strong></p>
<p>类似如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用的自定义错误类型是Error、RangeError、ReferenceError、TypeError</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;some Error&quot;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;type Wrong&quot;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">&quot;break size&quot;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">&quot;object Except&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Error事件"><a href="#Error事件" class="headerlink" title="Error事件"></a>Error事件</h3><blockquote>
<p>任何没有被try/catch的错误都会在window上触发error事件</p>
<p><strong>经过测试，在Chrome上无效！</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function">(<span class="params">message, url, line</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(message)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 可以通过return false来阻止浏览器默认报告错误的行为，但是最好不要</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="错误处理策略"><a href="#错误处理策略" class="headerlink" title="错误处理策略"></a>错误处理策略</h2><blockquote>
<p>前面谈了错误捕获，现在来谈谈如何处理错误</p>
</blockquote>
<h3 id="识别错误"><a href="#识别错误" class="headerlink" title="识别错误"></a>识别错误</h3><blockquote>
<p>通常，大部分错误通过<code>静态代码分析器</code>就能找出，但是部分错误只有在<code>运行时</code>才会发现</p>
</blockquote>
<h4 id="类型转换错误"><a href="#类型转换错误" class="headerlink" title="类型转换错误"></a>类型转换错误</h4><blockquote>
<p>通常在进行类型判断的时候出现，比如以下场景</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> == <span class="string">&quot;2&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> === <span class="string">&quot;2&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> == <span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> === <span class="literal">true</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以推荐使用<code>严格相等(===)</code>和<code>严格不相等(!==)</code>来代替相等和不相等操作符</p>
</blockquote>
<h4 id="数据类型错误"><a href="#数据类型错误" class="headerlink" title="数据类型错误"></a>数据类型错误</h4><blockquote>
<p>对于函数参数，为了确保函数正常运行，常常需要对其进行类型判断</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) &gt; <span class="number">-1</span>) <span class="comment">// 错误的方式，一旦传入不是字符串就会出错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">&quot;string&quot;</span>) <span class="comment">// 正确的方式，先进行类型判断再进行indexOf操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> arr.sort === <span class="string">&#x27;function&#x27;</span>) <span class="comment">// 错误的方式，在类型检查时只检查特性</span></span><br><span class="line"><span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// 正确的做法，对对象使用instanceof检查</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于类型检查，对<code>基本类型使用typeof</code>，对<code>对象使用instanceof</code></p>
</blockquote>
<h4 id="通信错误"><a href="#通信错误" class="headerlink" title="通信错误"></a>通信错误</h4><blockquote>
<p>JavaScript与服务器通信时出错</p>
<p>通常是URL格式或发送数据格式不对，这时候就需要encodeURIComponent()编码修复</p>
<p>当然Ajax通信自身也会提供关于错误条件的更多信息</p>
</blockquote>
<h3 id="区分重大与非重大错误"><a href="#区分重大与非重大错误" class="headerlink" title="区分重大与非重大错误"></a>区分重大与非重大错误</h3><blockquote>
<p>非重大错误：本质上，不用担心非重大错误</p>
<ul>
<li>不会影响用户的主要任务</li>
<li>只会影响页面中某个部分</li>
<li>可以恢复</li>
<li>重复操作可能成功</li>
</ul>
</blockquote>
<blockquote>
<p>重大错误具备以下特性：</p>
<ul>
<li>应用程序绝对无法继续运行</li>
<li>错误严重影响了用户的主要目标</li>
<li>会导致其他错误发生</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端存储</title>
    <url>/2021/06/21/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h1><p>注意如果想用HTML运行浏览器环境需要安装Live Server插件并运行该HTML文件</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote>
<p>Cookie是客户端存储的一种方法，但这个方法可以与服务器通信。</p>
<p>Cookie中存储的信息只对<code>被认可的接收者</code>开放，不被其他域访问。</p>
</blockquote>
<blockquote>
<p>Cookie限制：一般来说，遵守以下规则，就不会在任何浏览器中遇到问题；当然如果忽略兼容性，每个浏览器各不相同。</p>
<ol>
<li>不超过300个cookie</li>
<li>每个cookie不超过4096字节，即4K</li>
<li>每个域不超过20个cookie</li>
<li>每个域不超过81920字节</li>
</ol>
</blockquote>
<blockquote>
<p>Cookie组成：除了名称和值，其他都是告诉浏览器什么情况下会在请求中包含cookie，<code>不会发送给服务器</code></p>
<ol>
<li>名称：唯一标识cookie的名称，不区分大小写，会经过URL编码</li>
<li>值：存储在cookie1里的字符串值，会经过URL编码</li>
<li>域：cookie有效的域</li>
<li>路径：请求URL包含这个路径才会把cookie发送给服务器</li>
<li>过期时间</li>
<li>安全标识：设置后只有SSL安全连接时才会把cookie发送给服务器</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Cookie<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cookieName,cookieValue,expiresDays</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">      d.setTime(d.getTime()+(expiresDays*24*60*60*1000));</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> expires = <span class="string">&quot;expires=&quot;</span>+d.toGMTString();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.cookie = cookieName+<span class="string">&quot;=&quot;</span>+cookieValue+<span class="string">&quot;; &quot;</span>+expires; <span class="comment">// 键+值+时间</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cookieName</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> name = cookieName + <span class="string">&quot;=&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> cookieArr = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; cookieArr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cookieItem = cookieArr[i].trim();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (cookieItem.indexOf(name)==<span class="number">0</span>) &#123; <span class="keyword">return</span> cookieItem.substring(name.length,cookieItem.length); &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">cookieName</span>) </span>&#123; <span class="comment">// 通过立即设置过期时间删除Cookie</span></span></span><br><span class="line"><span class="javascript">      setCookie(cookieName, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    setCookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Admin&quot;</span>,<span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">    setCookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Nike&quot;</span>,<span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">    setCookie(<span class="string">&quot;lastName&quot;</span>,<span class="string">&quot;Mike&quot;</span>,<span class="number">30</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(getCookie(<span class="string">&quot;name&quot;</span>))</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie)</span></span><br><span class="line"><span class="javascript">    delCookie(<span class="string">&quot;username&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Network网络请求里可以看到Cookie在请求头里被发送到服务端</p>
</blockquote>
<p><img src="/.com//1.jpg"></p>
<blockquote>
<p>在Application里面也可以看到Cookie的内容</p>
</blockquote>
<p><img src="/.com//2.jpg"></p>
<blockquote>
<p>Cookie安全与适用性：</p>
<p>因为CSRF跨站脚本攻击可能会通过插入脚本来窃取网站的Cookie来获取敏感信息，所以有了<code>HTTP-only</code>字段来限制cookie只能在服务器上读取。</p>
<p>并且因为Cookie会与服务器通信，Cookie中保存大量信息可能会影响通信效率，所以Cookie并不是理想的存储大量数据的方式。Cookie应只保留必要信息，但Cookie存在的环境也不是安全的环境，所以也不要将敏感信息放入Cookie。</p>
<p>因为Cookie不适合大容量存储的应用场景，因此其他的客户端存储技术出现了。</p>
</blockquote>
<h2 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h2><blockquote>
<p>Web Storage定义了两个对象<code>localStorage(永久存储机制)</code>和<code>sessionStorage(跨会话存储机制)</code>，这两种浏览器存储API提供了在浏览器中不受页面刷新影响而影响存储数据的两种方式</p>
</blockquote>
<blockquote>
<p>Storage类型的方法：可以认为是两个对象的基类，二者都继承它的方法</p>
<ul>
<li>clear():删除所有值，不在FireFox中实现</li>
<li>getItem(name):取得给定name的值</li>
<li>key(index):取得给定数值位置的名称</li>
<li>removeItem(name):删除给定name的键值对</li>
<li>setItem(name,value):设置给定name的值</li>
</ul>
</blockquote>
<h3 id="SessionStorage对象-跨会话存储"><a href="#SessionStorage对象-跨会话存储" class="headerlink" title="SessionStorage对象(跨会话存储)"></a>SessionStorage对象(跨会话存储)</h3><blockquote>
<p>sessionStorage对象只存储会话数据，数据只存储到浏览器关闭，<code>不受到刷新影响</code></p>
<p>大小限制：5M</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>SessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    sessionStorage.setItem(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sessionItem&quot;</span>) <span class="comment">// setItem()赋值</span></span></span><br><span class="line"><span class="javascript">    sessionStorage.clear() <span class="comment">// clear()删除</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    sessionStorage.setItem(<span class="string">&quot;策略&quot;</span>, <span class="string">&quot;跨会话存储&quot;</span>)</span></span><br><span class="line"><span class="javascript">    sessionStorage.setItem(<span class="string">&quot;消失时间&quot;</span>, <span class="string">&quot;浏览器关闭&quot;</span>)</span></span><br><span class="line"><span class="javascript">    sessionStorage.setItem(<span class="string">&quot;大小&quot;</span>, <span class="string">&quot;5M&quot;</span>)</span></span><br><span class="line"><span class="javascript">    sessionStorage.test = <span class="string">&quot;推荐使用API而不是直接赋值&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&quot;test&quot;</span>)) <span class="comment">// getItem()获得Item值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sessionStorage.key(<span class="number">2</span>)) <span class="comment">// 根据索引获得该位置的键名，注意不是键值</span></span></span><br><span class="line"><span class="javascript">    sessionStorage.removeItem(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sessionStorage)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//3.jpg"></p>
<h3 id="localStorage-持久化存储"><a href="#localStorage-持久化存储" class="headerlink" title="localStorage(持久化存储)"></a>localStorage(持久化存储)</h3><blockquote>
<p>localStorage会保留到通过JavaScript删除或者用户清除浏览器缓存，<code>不受刷新、关闭窗口、或者重启浏览器影响</code></p>
<p>大小限制：5M</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;localItem&quot;</span>) <span class="comment">// setItem()赋值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.clear() <span class="comment">// clear()删除</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;策略&quot;</span>, <span class="string">&quot;跨会话存储&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;消失时间&quot;</span>, <span class="string">&quot;浏览器关闭&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;大小&quot;</span>, <span class="string">&quot;5M&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.test = <span class="string">&quot;推荐使用API而不是直接赋值&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;test&quot;</span>)) <span class="comment">// getItem()获得Item值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.key(<span class="number">2</span>)) <span class="comment">// 根据索引获得该位置的键名，注意不是键值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//4.jpg"></p>
<h3 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h3><blockquote>
<p>Storage对象发生变化时会触发对应事件，使用属性或setItem()/removeItem()/clear()都会触发这个事件，有以下属性</p>
<ul>
<li>domain(存储变化对应的域)</li>
<li>key(对应的键值)</li>
<li>newValue(新值)</li>
<li>oldValue(旧值)</li>
</ul>
</blockquote>
<blockquote>
<p>在Chrome中，StorageEvent需要另一个页面才能触发</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>storageEvent-Create<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第一个页面创建事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;storage&quot;</span>,<span class="function"><span class="params">event</span>=&gt;</span><span class="built_in">console</span>.log(event)) <span class="comment">// 添加事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;策略&quot;</span>, <span class="string">&quot;跨会话存储&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;消失时间&quot;</span>, <span class="string">&quot;浏览器关闭&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;大小&quot;</span>, <span class="string">&quot;5M&quot;</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>storageEvent-Get<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>&gt;</span></span><br><span class="line">    删除localStorageItem</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二个页面触发事件，注意触发后要回到第一个页面查看</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;del&#x27;</span>).onclick = <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">localStorage</span>.removeItem(<span class="built_in">localStorage</span>.key(<span class="number">1</span>))</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//5.jpg"></p>
<h2 id="IndexDB"><a href="#IndexDB" class="headerlink" title="IndexDB"></a>IndexDB</h2><blockquote>
<p>类似MySQL的NoSQL数据库，但会出现兼容性问题，不推荐使用，故不赘述</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Animation动画</title>
    <url>/2021/06/08/Animation%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="Animation动画"><a href="#Animation动画" class="headerlink" title="Animation动画"></a>Animation动画</h1>]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器页面相关</title>
    <url>/2021/06/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="浏览器页面相关"><a href="#浏览器页面相关" class="headerlink" title="浏览器页面相关"></a>浏览器页面相关</h1><h2 id="DOM树的形成流程"><a href="#DOM树的形成流程" class="headerlink" title="DOM树的形成流程"></a>DOM树的形成流程</h2><blockquote>
<ol>
<li>网络进程接收到响应头后，根据Content-Type字段判断文件类型</li>
<li>如果是”text/html”，浏览器会判断这是一个HTML类型的文件，然后为该请求选择或者创建一个渲染进程</li>
<li>渲染进程准备好后，网络进程和渲染进程之间会建立一个共享数据的管道</li>
<li>网络进程接收的字节流会传向渲染进程的HTML解析器</li>
<li>HTML解析器会动态接收字节流并将其解析为DOM</li>
</ol>
</blockquote>
<p><img src="/.com//1.png"></p>
<h3 id="字节流转换为DOM的流程"><a href="#字节流转换为DOM的流程" class="headerlink" title="字节流转换为DOM的流程"></a>字节流转换为DOM的流程</h3><blockquote>
<p>第一阶段：通过<code>分词器</code>将字节流转换为Token，上述的HTML代码转换为Token如下</p>
</blockquote>
<p><img src="/.com//2.png"></p>
<h3 id="Token解析为DOM-DOM添加到DOM树"><a href="#Token解析为DOM-DOM添加到DOM树" class="headerlink" title="Token解析为DOM/DOM添加到DOM树"></a>Token解析为DOM/DOM添加到DOM树</h3><blockquote>
<p>第二/三阶段：这两个阶段是同步进行的，将Token解析为DOM节点的同时将其添加到DOM树中</p>
<p>HTML解析器维护了一个Token栈结构，具体实现如Mustache模板引擎<a href="https://git.io/JYv3A">https://git.io/JYv3A</a></p>
<p>算法实现即使用栈结构对tag进行判断，将其闭合输出为DOM</p>
</blockquote>
<p><img src="/.com//3.png"></p>
<h2 id="JavaScript是如何影响DOM树构建的"><a href="#JavaScript是如何影响DOM树构建的" class="headerlink" title="JavaScript是如何影响DOM树构建的"></a>JavaScript是如何影响DOM树构建的</h2><blockquote>
<p>引入JavaScript会阻塞DOM：假如在DOM中插入一段JavaScript脚本，解析到JavaScript时，渲染引擎检测到这是一段脚本，此时HTML会<code>暂停DOM的解析</code>，因为接下来可能要修改已生成的DOM。执行这段脚本以后，继续解析后序的内容，直至生成最终的DOM。</p>
<p>因为Js可能操作样式，所以如果代码里<code>引用了外部的CSS文件</code>，那么在执行Js之前，还需要<code>等待外部CSS文件下载完成</code>，并解析生成CSSOM对象后，才执行Js脚本。</p>
<p>所以Js会阻塞DOM加载，CSS会阻塞Js加载。</p>
</blockquote>
<blockquote>
<p>Chrome浏览器对Js阻塞DOM的优化：</p>
<ol>
<li><code>预解析</code>：当渲染引擎收到字节流后，会开启一个预解析线程，用来分析HTML中包含的Js、CSS等文件，解析到相关文件后，预解析线程会提前下载这些文件</li>
<li><code>CDN</code>：加速Js文件加载、压缩Js文件的体积</li>
<li>如果Js文件中没有操作DOM相关的代码，就可以将该Js脚本设置为异步加载，如<code>async</code>或<code>defer</code></li>
</ol>
</blockquote>
<blockquote>
<p>当HTML文件中包含了CSS外部引用和Js外部文件时，它们的渲染流水线如下：</p>
<ul>
<li>在接收到HTML数据后的解析过程中，HTML预解析器识别出有CSS、Js文件需要下载，同时发起请求，且这个过程是并行的</li>
</ul>
</blockquote>
<p><img src="/.com//4.png"></p>
<h2 id="影响页面展示的因素及优化策略"><a href="#影响页面展示的因素及优化策略" class="headerlink" title="影响页面展示的因素及优化策略"></a>影响页面展示的因素及优化策略</h2><blockquote>
<p>从发起URL请求到首次显示页面的内容，在视觉上经历的三个阶段：</p>
<ol>
<li>等请求发出去，到提交数据阶段，这时页面显示出来的还是<code>之前页面的内容</code></li>
<li>提交数据之后渲染进程会创建一个空白页面，我们通常把这段时间称之为<code>解析白屏</code>，并等待CSS文件和JavaScript文件加载完成，并生成CSSOM和DOM，合成布局树，最后经过一系列步骤准备首屏渲染。</li>
<li>等首次渲染完成后，就开始进入完整页面的生成阶段了，紧接着页面会被一点点渲染出来</li>
</ol>
</blockquote>
<blockquote>
<p>缩短白屏解析时间策略：</p>
<ul>
<li>通过内联JavaScript、内联CSS来移除这两种类型的文件下载</li>
<li>并不是所有场合都适合内联，还可以尽量减少文件大小，比如通过webpack的shaking tree、dropConsole等方法压缩JavaScript</li>
<li>还可以将一些不需要在解析HTML阶段使用的JavaScript标记上async或者defer</li>
<li>对于大CSS文件，可以通过媒体查询属性将其拆分为多个不同用途的CSS文件，在特定场景下才会加载的特定CSS文件</li>
</ul>
</blockquote>
<p><img src="/.com//5.png"></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="为什么CSS动画比JavaScript高效"><a href="#为什么CSS动画比JavaScript高效" class="headerlink" title="为什么CSS动画比JavaScript高效"></a>为什么CSS动画比JavaScript高效</h3><blockquote>
<p>因为CSS动画中的合成阶段是使用分层线程完成的，并不会占据主线程，所以比JavaScript高效</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器中的页面循环系统</title>
    <url>/2021/06/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="浏览器中的页面循环系统"><a href="#浏览器中的页面循环系统" class="headerlink" title="浏览器中的页面循环系统"></a>浏览器中的页面循环系统</h1><h2 id="消息队列和事件循环"><a href="#消息队列和事件循环" class="headerlink" title="消息队列和事件循环"></a>消息队列和事件循环</h2><blockquote>
<p>因为每个渲染进程都有一个主进程，并且主进程非常忙碌，所以需要一个系统来对各种任务进行统筹调度，即<code>消息队列</code>和<code>事件循环</code>系统</p>
</blockquote>
<h3 id="单线程处理"><a href="#单线程处理" class="headerlink" title="单线程处理"></a>单线程处理</h3><blockquote>
<p>如果使用单线程顺序执行任务的话，显而易见并不能持续的执行任务，当任务执行完后就会退出线程</p>
</blockquote>
<p><img src="/.com//2.png"></p>
<h3 id="循环处理任务"><a href="#循环处理任务" class="headerlink" title="循环处理任务"></a>循环处理任务</h3><blockquote>
<p>引入循环机制：</p>
<ol>
<li>线程会一直循环</li>
<li>可以通过事件来等待用户输入，输入完成后激活线程</li>
</ol>
</blockquote>
<p><img src="/.com//3.png"></p>
<h3 id="引入多线程模型"><a href="#引入多线程模型" class="headerlink" title="引入多线程模型"></a>引入多线程模型</h3><blockquote>
<p>当出现多线程时，情况就不一样了</p>
</blockquote>
<p><img src="/.com//4.png"></p>
<blockquote>
<p>线程需要接收其他线程传来的数据，一个通用的模式就是使用<code>消息队列</code>，先进先出的队列</p>
</blockquote>
<p><img src="/.com//5.png"></p>
<blockquote>
<p>从图中可知：</p>
<ul>
<li>渲染主线程会循环从消息队列的队首中取出任务执行</li>
<li>其他线程会向消息队列的队尾推送任务以供主线程执行</li>
</ul>
</blockquote>
<p><img src="/.com//6.png"></p>
<h3 id="引入跨进程通信-IPC-模型"><a href="#引入跨进程通信-IPC-模型" class="headerlink" title="引入跨进程通信(IPC)模型"></a>引入跨进程通信(IPC)模型</h3><blockquote>
<p>从图中可以看出，IO线程会处理其他进程传来的IPC内容，然后提交到消息队列执行</p>
</blockquote>
<p><img src="/.com//1.png"></p>
<h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><blockquote>
<p>随着浏览器的发展，消息队列这种粗时间粒度的任务已经不能胜任部分需求，所以出现了<code>微任务</code>，在实时性和效率之间做一个权衡</p>
</blockquote>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><blockquote>
<p>宏任务(macrotask)：</p>
<ul>
<li>script</li>
<li>setTimeout/setInterval</li>
<li>UI渲染</li>
<li>I/O</li>
</ul>
</blockquote>
<blockquote>
<p>为了协调这些任务能有条不紊的在主线程上运行，渲染进程内部会维护多个消息队列，比如<code>延迟执行队列</code>和普通的<code>消息队列</code>，然后主线程不断从这些任务队列中取出任务执行任务，我们将这些消息队列中的任务称为<code>宏任务</code></p>
<p>但是宏任务例如settimeout，想延迟xms后执行，但是往往可能会被插入很多系统级的任务，导致不会在我们预期的时间执行回调函数。</p>
<p>故宏任务的时间粒度不能满足一些高实时性的需求，所以就有了微任务。</p>
</blockquote>
<p><img src="/.com//7.png"></p>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><blockquote>
<p>微任务(microtask)：</p>
<ol>
<li>Promise.then/catch/finally</li>
<li>Object.observe</li>
<li>MutaionObserver</li>
<li>process.nextTick(Node.js)</li>
</ol>
<p>产生微任务的方式：</p>
<ol>
<li>使用MustationObserver监控某个DOM节点，然后通过JavaScript来修改这个节点，或者为这个节点添加、删除部分子节点，当DOM节点发生变化时，就会产生DOM变化记录的微任务</li>
<li>使用Promise，当调用Promise.resolve()/reject()时，也会产生微任务</li>
</ol>
</blockquote>
<blockquote>
<p>微任务就是一个需要<code>异步执行</code>的函数，执行时机在<code>主函数执行结束之后</code>，当前<code>宏任务结束之前</code></p>
<p>创建时机：在JavaScript执行一段脚本时，V8会为其创建一个全局执行上下文，与此同时也会创建一个<code>微任务队列</code>。</p>
<p>何时被执行：通常在宏任务中的JavaScript快执行完成时，即<code>JavaScript引擎准备退出全局执行上下文并清空调用栈时</code>，JavaScript引擎会检查全局执行上下文的微任务队列，并按照顺序执行其中的任务，除了在退出全局执行上下文这个检查点外还有其他检查点，不过不太重要。</p>
<p>如果在执行微任务的过程中产生了新的微任务，同样会把该微任务添加到微任务队列中并执行，直到队列为空才结束。</p>
</blockquote>
<blockquote>
<p>该示意图是在执行一个 ParseHTML 的宏任务，在执行过程中，遇到了 JavaScript 脚本，那么就暂停解析流程，进入到 JavaScript 的执行环境。从图中可以看到，全局上下文中包含了微任务列表。</p>
</blockquote>
<p><img src="/.com//8.png"></p>
<p><img src="/.com//9.png"></p>
<blockquote>
<p>结论：</p>
<ul>
<li>微任务和宏任务是<code>绑定的</code>，每个宏任务在执行时，会创建自己的微任务队列</li>
<li>微任务的执行时长会影响到当前宏任务的时长</li>
</ul>
</blockquote>
<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><h3 id="生成器-Generator-amp-协程-Coroutine"><a href="#生成器-Generator-amp-协程-Coroutine" class="headerlink" title="生成器(Generator)&amp;协程(Coroutine)"></a>生成器(Generator)&amp;协程(Coroutine)</h3><blockquote>
<p>生成器函数的特性：</p>
<ul>
<li>在生成器函数内部执行一段代码，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。</li>
<li>外部函数可以通过 next 方法恢复函数的执行</li>
</ul>
</blockquote>
<blockquote>
<p>协程：协程是比线程更轻量级的存在，可以看成跑在线程上的任务，一个线程上可以<code>存在多个协程</code>，但是在线程上只能<code>执行一个线程</code>。</p>
<p>一个线程可以拥有多个协程，协程不是被操作系统内核管理的，而完全是由程序所控制(也就是在用户态执行)，性能大大提升，不会像线程切换那样消耗性能。</p>
</blockquote>
<blockquote>
<p>执行这一段代码，会发现genDemo()函数是与全局代码交替执行的，这就是生成器函数Generator的特性，可以暂停执行，也可以恢复执行</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第一段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第二段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第三段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 执行结束 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 0&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gen = genDemo()</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 3&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/.com//10.png"></p>
<blockquote>
<p>父协程和gen协程切换调用栈</p>
</blockquote>
<p><img src="/.com//11.png"></p>
<blockquote>
<p>在JavaScript中，生成器就是协程的一种实现方式</p>
</blockquote>
<blockquote>
<p>通过生成器·配合执行器，就能使用同步的方式写出异步代码了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foo 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response1)</span><br><span class="line">    <span class="keyword">let</span> response2 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org/test&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response2)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行 foo 函数的代码</span></span><br><span class="line"><span class="keyword">let</span> gen = foo()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGenPromise</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gen.next().value</span><br><span class="line">&#125;</span><br><span class="line">getGenPromise(gen).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">    <span class="keyword">return</span> getGenPromise(gen)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Async-Await与协程"><a href="#Async-Await与协程" class="headerlink" title="Async/Await与协程"></a>Async/Await与协程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/.com//12.png"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>V8工作原理</title>
    <url>/2021/06/02/V8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="V8工作原理"><a href="#V8工作原理" class="headerlink" title="V8工作原理"></a>V8工作原理</h1><h2 id="栈与堆：数据如何存储"><a href="#栈与堆：数据如何存储" class="headerlink" title="栈与堆：数据如何存储"></a>栈与堆：数据如何存储</h2><p><img src="/.com//1.png"></p>
<blockquote>
<p>在JavaScript执行过程中，主要有三种类型内存空间：</p>
<ul>
<li>代码空间：存储可执行代码</li>
<li>栈空间：存储执行上下文，原始类型被存储在里面</li>
<li>堆空间：存储引用类型，将引用类型地址保留在栈空间中</li>
</ul>
</blockquote>
<blockquote>
<p>为什么要分栈和堆？</p>
<ul>
<li>因为Js引擎需要栈保证上下文切换的效率，所以栈空间一般都不会设置太大</li>
<li>而堆空间很大可以存放很多大数据，不过缺点是分配内存和回收内存都会占用一定的时间</li>
</ul>
</blockquote>
<blockquote>
<p>闭包内存创建流程：</p>
<ol>
<li>当Js引擎发现内部函数引用了外部函数的变量时，即是闭包。</li>
<li>于是在堆空间创建一个closure(函数名)的对象</li>
<li>继续扫描，将引用的变量放入closure中</li>
</ol>
</blockquote>
<h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h3 id="调用栈的数据是如何回收的"><a href="#调用栈的数据是如何回收的" class="headerlink" title="调用栈的数据是如何回收的"></a>调用栈的数据是如何回收的</h3><blockquote>
<p>通过记录当前执行状态的指针ESP来实现</p>
<p>当showName函数执行结束后，ESP向下移动，上面的showName的执行上下文虽然依然存在，但是已经是无效的了，下次有新的上下文会覆盖掉这块内容</p>
</blockquote>
<p><img src="/.com//2.png"></p>
<h3 id="堆中的数据是如何回收的"><a href="#堆中的数据是如何回收的" class="headerlink" title="堆中的数据是如何回收的"></a>堆中的数据是如何回收的</h3><blockquote>
<p>从上面<code>栈中的数据是如何回收的</code>可以知道调用栈是通过移动指针ESP来实现的</p>
<p>但是<code>堆</code>中的对象依然占用着空间，要回收堆中的垃圾数据，就要用到垃圾回收机制了</p>
</blockquote>
<blockquote>
<p>V8会把堆分为<code>新生代</code>和<code>老生代</code>两个区域，新生代中存放的是<code>生存时间短的对象</code>，老生代中存放的是<code>生存时间久的对象</code></p>
<ul>
<li>新生区通常只支持1-8M的容量，而老生区支持的容量就大很多</li>
<li>新生区使用<code>副垃圾回收器</code>，老生区使用<code>主垃圾回收器</code></li>
</ul>
</blockquote>
<h4 id="代际假说"><a href="#代际假说" class="headerlink" title="代际假说"></a>代际假说</h4><blockquote>
<p>后续垃圾回收策略都是建立在该假说的基础上的</p>
</blockquote>
<blockquote>
<p>代际假说特点：适用于大多数动态语言</p>
<ol>
<li>大部分对象在内存中存在的时间很短</li>
<li>不死的对象，会活的更久</li>
</ol>
</blockquote>
<h4 id="垃圾回收器的工作流程"><a href="#垃圾回收器的工作流程" class="headerlink" title="垃圾回收器的工作流程"></a>垃圾回收器的工作流程</h4><blockquote>
<p>不论什么类型的垃圾回收器，都有一套共同的执行流程</p>
<ol>
<li>标记空间中活动对象和非活动对象，所谓活动就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象</li>
<li>回收非活动对象所占据的内存</li>
<li>内存管理：因为一般来说，频繁回收对象以后，内存就会存在大量不连续空间，当内存中出现大量的内存碎片以后，如果需要分配较大连续内存的时候就会出现内存不足的情况(这一步其实是可选的，因为有的垃圾回收器不会产生内存碎片，比如副垃圾回收器)</li>
</ol>
</blockquote>
<h4 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h4><blockquote>
<p>新生代中用Scavenge算法来处理，即把新生代空间对半划分为<code>对象区域</code>和<code>空闲区域</code></p>
</blockquote>
<p><img src="/.com//3.png"></p>
<blockquote>
<p>操作时机：新加入的对象<code>都会存放到对象区域</code>，当对象区域快被写满时，就要执行一次GC</p>
<p>新生区较小：因为新生区经常要进行操作，如果新生区设置太大则需要大量时间，所以新生区一般会设置的比较小</p>
<p>对象晋升策略：经过两次垃圾回收依然存活的对象，会被移动到老生区中</p>
</blockquote>
<blockquote>
<p>垃圾回收过程：</p>
<ol>
<li>首先对对象区域的垃圾做标记</li>
<li>标记完成后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序排列起来，所以这个过程也就相当于完成了内存整理操作</li>
<li>完成复制后，对象区域与 空闲区域交换，这样就完成了垃圾对象的回收操作。</li>
</ol>
</blockquote>
<h4 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h4><blockquote>
<p>标记清除(Mark-Sweep)算法：因为老生区的对象较大，故在老生区使用Scavenge算法进行垃圾回收将会花费大量时间，故使用标记-清除(Mark-Sweep)算法进行回收</p>
<p>除了新生区的晋升对象，一些大的对象会直接被分配到老生区，因此老生区中的对象有两个特点：</p>
<ol>
<li>对象占用空间大</li>
<li>对象存活时间长</li>
</ol>
</blockquote>
<blockquote>
<p>标记清除算法流程：</p>
<ol>
<li>首先是标记过程，标记元素就是通过一组根元素开始，递归遍历这组元素，在这个遍历过程中能到达的元素就称为活动对象，否则为垃圾数据</li>
<li>接下来对垃圾数据进行清除</li>
<li>以上就是标记-清除算法，紧接着是标记-整理(Mark-Compact)算法，因为对一块内存进行多次执行标记后会产生大量不连续的内存碎片，故需要此算法。</li>
<li>标记-整理算法过程是将所有可活动对象向一边移动，然后直接清除掉边界以外的内存。</li>
</ol>
</blockquote>
<p><img src="/.com//4.png"></p>
<h4 id="全停顿"><a href="#全停顿" class="headerlink" title="全停顿"></a>全停顿</h4><blockquote>
<p> 由于Js是运行在主线程上的，一旦执行垃圾回收算法，就需要将正在执行的Js脚本暂停下来，待垃圾回收完毕后再执行脚本，这种行为叫做<code>全停顿</code></p>
<p>全停顿的影响：在新生代垃圾回收中，空间较小，所以全停顿影响不大。但是在老生代垃圾回收中，如果在执行垃圾回收过程中占用主线程过久，这个时间主线程是不能做其他事情的。</p>
</blockquote>
<blockquote>
<p>增量标记(Incremental Marking)算法解决卡顿：V8将标记过程分为一个个子标记过程和Js脚本<code>交替进行</code>，直到标记完成，这个算法叫做增量标记算法。</p>
</blockquote>
<p><img src="/.com//5.png"></p>
<h2 id="编译器和解释器：V8如何执行一段Js代码"><a href="#编译器和解释器：V8如何执行一段Js代码" class="headerlink" title="编译器和解释器：V8如何执行一段Js代码"></a>编译器和解释器：V8如何执行一段Js代码</h2><blockquote>
<p>编译器和解释器存在的原因：机器不能直接理解我们所写的代码，所以在执行程序之前需要将我们所写的代码“翻译”成机器能读懂的机器语言，按语言的执行流程，可以把语言划分为<code>编译型语言</code>和<code>解释型语言</code></p>
<p>编译型语言：编译型语言在程序执行之前需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行时就可以直接运行该二进制文件了，如C/C++/GO</p>
<p>解释型语言：解释型语言编写的程序在每次运行都要通过解释器对程序进行动态解释和执行，比如Python/Go </p>
</blockquote>
<p><img src="/.com//6.png"></p>
<h3 id="V8是如何执行一段Js代码的"><a href="#V8是如何执行一段Js代码的" class="headerlink" title="V8是如何执行一段Js代码的"></a>V8是如何执行一段Js代码的</h3><p><img src="/.com//6.png"></p>
<h4 id="生成抽象语法树-AST-和执行上下文"><a href="#生成抽象语法树-AST-和执行上下文" class="headerlink" title="生成抽象语法树(AST)和执行上下文"></a>生成抽象语法树(AST)和执行上下文</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line">myName = <span class="string">&quot;geektime&quot;</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>AST 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目是 Babel。Babel 是一个被广泛使用的代码转码器，可以将 ES6 代码转为 ES5 代码，这意味着你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。Eslint也是。</p>
<p>这段代码经过转义后生成的AST结构如下</p>
</blockquote>
<p><img src="/.com//7.png"></p>
<h5 id="生成AST"><a href="#生成AST" class="headerlink" title="生成AST"></a>生成AST</h5><ol>
<li>分词(tokenize)，又称词法分析：其作用是将一行行源代码拆成一个个token(语法上不能拆分的最小单位)</li>
</ol>
<p><img src="/.com//8.png"></p>
<ol start="2">
<li>解析(parse)，又称为语法分析，其作用是将上一步生成的token数据根据语法规则转化为AST，如果源码不符合语法规则则会抛出“语法错误”</li>
</ol>
<h5 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h5><blockquote>
<p>解释器的功能：有了AST和执行上下文后，接下来就用解释器(Ignition)，它会根据AST生成字节码，并解释执行字节码</p>
<p> 出现原因：原来是直接将AST转换为机器码的，刚开始效果很好，但是随着小内存手机上运行Chrome需求的出现，内存占用的问题就出来了。</p>
<p>为什么字节码能解决内存占用问题：字节码就是介于AST和机器码之间的代码，但是与特定类型的机器码无关，字节码需要解释器转化为机器码后才能使用。由下图可知使用字节码可以减少系统的内存使用。</p>
</blockquote>
<p><img src="/.com//9.png"></p>
<h5 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h5><blockquote>
<p>获得字节码后进入执行阶段，如果有一段第一次执行的字节码，解释器会逐条解释执行，在执行字节码的过程中，如果一段代码被<code>执行多次</code>，这种代码就称为<code>热点代码</code>，后台的编译器TurboFan就会把该段热点的字节码编译为高效的机器码， 然后再次执行这段代码时，只要执行编译后的机器码就行，这就大大提升了代码的执行效率。</p>
</blockquote>
<p><img src="/.com//10.png"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Js执行机制</title>
    <url>/2021/06/01/Js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Js执行机制"><a href="#Js执行机制" class="headerlink" title="Js执行机制"></a>Js执行机制</h1><blockquote>
<p>首先输入一段JavaScript代码，接下来进入<strong>编译</strong>阶段，紧接着就进入<strong>执行</strong>阶段</p>
</blockquote>
<h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><blockquote>
<p>一段代码经过编译后会生成<strong>执行上下文</strong>和<strong>可执行代码</strong></p>
</blockquote>
<p><img src="/.com//1.png"></p>
<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><blockquote>
<p>创建执行上下文的情况</p>
<ul>
<li>当JavaScript执行全局代码是，会编译全局执行上下文，并且在整个页面生命周期内，<strong>全局上下文只有一份</strong></li>
<li>当调用一个函数的时候，函数体内的代码会被编译，并创建执行上下文，一般情况下，函数执行结束，创建的函数上下文也会被销毁</li>
<li>当使用eval函数时，eval的代码也会被编译，并创建执行上下文</li>
</ul>
</blockquote>
<h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><blockquote>
<p>在执行JavaScript时，可能存在多个执行上下文，Js引擎通过<strong>栈</strong>来管理这些执行上下文，即调用栈</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">b,c</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b+c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAll</span>(<span class="params">b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">10</span></span><br><span class="line">result = add(b,c)</span><br><span class="line"><span class="keyword">return</span>  a+result+d</span><br><span class="line">&#125;</span><br><span class="line">addAll(<span class="number">3</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>首先是全局执行上下文，被压入栈中</li>
<li>接下来执行addAll函数，故addAll函数的执行上下文被压入栈中</li>
<li>紧接着addAll函数调用add函数，故add函数被压入栈中</li>
<li>add函数返回值，add函数上下文被销毁</li>
<li>addAll函数返回值，addAll函数被销毁</li>
</ol>
</blockquote>
<p><img src="/.com//2.png"></p>
<h2 id="作用域-scope"><a href="#作用域-scope" class="headerlink" title="作用域(scope)"></a>作用域(scope)</h2><blockquote>
<p>作用域控制着变量和函数的可见性和生命周期</p>
<ul>
<li><p>在ES6之前，ES的作用域只支持<strong>全局</strong>作用域和<strong>函数</strong>作用域</p>
</li>
<li><p>ES6通过let和const关键字时Js也拥有了块级作用域</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>变量环境与词法环境：</p>
<ul>
<li>通过var创建的变量会被放入变量环境</li>
<li>通过let/const创建的变量会被放入词法环境</li>
<li>词法环境也维护了一个小型栈，栈底是最外层变量，进入一个作用域后，会把该作用域内部的变凉压到栈顶，出去后弹出</li>
<li>当执行到作用域中变量时，会先沿着词法环境的栈顶向下查询，如果没找到就继续在变量环境中查找</li>
<li>从函数开始到let/const声明变量之间的代码会形成暂时性死区，如果调用该变量会报UncaughtReferenceError错误</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line">      <span class="keyword">var</span> c = <span class="number">4</span></span><br><span class="line">      <span class="keyword">let</span> d = <span class="number">5</span></span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">      <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b) </span><br><span class="line">    <span class="built_in">console</span>.log(c)</span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;   </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><img src="/.com//3.png"></p>
<h2 id="作用域链和闭包"><a href="#作用域链和闭包" class="headerlink" title="作用域链和闭包"></a>作用域链和闭包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(myName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">    bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><img src="/.com//4.png"></p>
<h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><blockquote>
<p>词法作用域是指作用域是由代码中函数声明的位置来决定的，通过它能够预测代码在执行过程中如何查找标识符</p>
</blockquote>
<blockquote>
<p>根据词法作用域，foo 和 bar 的上级作用域都是全局作用域，所以如果 foo 或者 bar 函数使用了一个它们没有定义的变量，那么它们会到全局作用域去查找。也就是说，词法作用域是代码阶段就决定好的，和函数是怎么调用的没有关系</p>
</blockquote>
<p><img src="/.com//5.png"></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p>在Js中，根据词法作用域规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经<strong>执行结束</strong>了，但是<strong>内部函数引用外部函数的变量</strong>依然保存在内存中，我们就把这些变量的集合称为闭包。</p>
</blockquote>
<blockquote>
<p>闭包的回收：</p>
<ul>
<li>如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭，容易造成内存泄漏</li>
<li>如果引用闭包的函数是一个局部变量，等函数销毁后，在下次GC的时候，判断闭包这块内容如果已经不再使用了，那么GC就会回收这块内存</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> test2 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> innerBar = &#123;</span><br><span class="line">        getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(test1)</span><br><span class="line">            <span class="keyword">return</span> myName</span><br><span class="line">        &#125;,</span><br><span class="line">        setName:<span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;</span><br><span class="line">            myName = newName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo()</span><br><span class="line">bar.setName(<span class="string">&quot; 极客邦 &quot;</span>)</span><br><span class="line">bar.getName()</span><br><span class="line"><span class="built_in">console</span>.log(bar.getName())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过代码可以看出：</p>
<ol>
<li>先是全局执行上下文进入调用栈</li>
<li>接下来foo函数执行上下文进入调用栈</li>
<li>当foo函数执行完成后，其</li>
</ol>
</blockquote>
<p><img src="/.com//6.png"></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote>
<p>代码分为编译阶段和执行阶段</p>
<p>编译阶段：</p>
<ul>
<li>变量在编译阶段会被放入环境对象中被创建并被赋值为undefined</li>
<li>函数则会整个被放入堆(HEAP)中，并在环境对象中创建一个该函数名的属性，然后将该函数指向堆中函数的位置</li>
</ul>
<p>然后进入执行阶段，当遇到变量提升的遍历时会显示为undefined，但函数能正常执行</p>
</blockquote>
<h3 id="调用栈溢出"><a href="#调用栈溢出" class="headerlink" title="调用栈溢出"></a>调用栈溢出</h3><blockquote>
<p>当Js调用函数超出栈最大容量时就会出现栈溢出的情况，一般递归的时候容易出现</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>面向实践的git指令集合</title>
    <url>/2021/04/26/%E9%9D%A2%E5%90%91%E5%AE%9E%E8%B7%B5%E7%9A%84git%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="面向实践的git指令集合"><a href="#面向实践的git指令集合" class="headerlink" title="面向实践的git指令集合"></a>面向实践的git指令集合</h1><h2 id="git基础概念"><a href="#git基础概念" class="headerlink" title="git基础概念"></a>git基础概念</h2><h3 id="工作区-amp-暂存区-amp-版本库"><a href="#工作区-amp-暂存区-amp-版本库" class="headerlink" title="工作区&amp;暂存区&amp; 版本库"></a>工作区&amp;暂存区&amp; 版本库</h3><p><img src="/.com//7.jpg"></p>
<p><img src="/.com//8.jpg"></p>
<p><img src="/.com//10.jpg"></p>
<h3 id="操作图示集合"><a href="#操作图示集合" class="headerlink" title="操作图示集合"></a>操作图示集合</h3><p><img src="/.com//4.jpg"></p>
<h2 id="git指令集合"><a href="#git指令集合" class="headerlink" title="git指令集合"></a>git指令集合</h2><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment"># 将workspace修改的内容提交到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> <span class="comment"># 将暂存区的内容提交到版本库</span></span><br><span class="line"><span class="comment"># 如果本地分支名与远程分支名相同，直接git push即可</span></span><br><span class="line">git push origin [branchName] <span class="comment"># 将版本库内容提交到远程仓库</span></span><br></pre></td></tr></table></figure>



<h3 id="拉取合并代码"><a href="#拉取合并代码" class="headerlink" title="拉取合并代码"></a>拉取合并代码</h3><blockquote>
<p>pull = fetch(拉取远程代码) + merge(合并代码)</p>
<p>如果pull的当前分支名与远程分支名相同,则只需git pull即可,push同</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin [branchName]</span><br></pre></td></tr></table></figure>



<h3 id="创建并推送代码到新分支"><a href="#创建并推送代码到新分支" class="headerlink" title="创建并推送代码到新分支"></a>创建并推送代码到新分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地分支</span></span><br><span class="line">git checkout -b [branchName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并推送代码到远程分支</span></span><br><span class="line">git push --set-upstream origin [branchName]</span><br></pre></td></tr></table></figure>



<h3 id="遇到冲突"><a href="#遇到冲突" class="headerlink" title="遇到冲突"></a>遇到冲突</h3><blockquote>
<p>冲突即多人开发时，修改了同一个文件</p>
</blockquote>
<p><img src="/.com//1.jpg">形式一：提交时</p>
<p><img src="/.com//11.jpg">形式二：拉取时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先传修改</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;信息&quot;</span></span><br><span class="line"><span class="comment"># 拉取修改</span></span><br><span class="line">git pull origin [branchName] <span class="comment"># 将远程仓库内容拉到本地workspace</span></span><br><span class="line"><span class="comment"># 然后在Vscode里面选择更改内容,如下图</span></span><br><span class="line"><span class="comment"># 再次上传</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;信息&quot;</span></span><br><span class="line">git push origin [branchName]</span><br></pre></td></tr></table></figure>

<p><img src="/.com//2.jpg">合并冲突</p>
<h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回到上一个版本,将HEAD指针指向上一个commitID</span></span><br><span class="line">git reset --hard <span class="string">&quot;HEAD^&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到指定版本</span></span><br><span class="line">git reset --hard 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到最新版本</span></span><br><span class="line">git pull origin [branchName]</span><br></pre></td></tr></table></figure>



<h3 id="回退到修改前的内容"><a href="#回退到修改前的内容" class="headerlink" title="回退到修改前的内容"></a>回退到修改前的内容</h3><blockquote>
<p>比如我们改动了文件内容，但是写完后发现太混乱想重写，此时就需要回退到修改前</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂存当前修改,此时已经可以发现修改内容已丢失</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃更改</span></span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure>



<h3 id="代码写到一半修改其他分支内容"><a href="#代码写到一半修改其他分支内容" class="headerlink" title="代码写到一半修改其他分支内容"></a>代码写到一半修改其他分支内容</h3><blockquote>
<p>注意,如果创建了新的文件,在上一个提交时没有此文件,则此文件不会被暂存</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash -u <span class="comment"># 暂存新的文件</span></span><br><span class="line"></span><br><span class="line">git stash -a <span class="comment"># 暂存新的文件+.gitignore忽略的文件</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>单一stash暂存情况</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂存当前修改</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看刚刚的暂存的修改</span></span><br><span class="line">git stash show</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...修改其他分支中，修改完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出修改</span></span><br><span class="line">git pop</span><br></pre></td></tr></table></figure>



<blockquote>
<p>多stash情况</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂存当前修改</span></span><br><span class="line">git stash save 暂存名1</span><br><span class="line">git stash save 暂存名2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存列表</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择对应暂存</span></span><br><span class="line">git stash apply stash@&#123;暂存名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除对应暂存</span></span><br><span class="line">git stash drop stash@&#123;暂存名&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.com//3.jpg">暂存列表</p>
<h3 id="强制推送到远程-amp-覆盖本地-不推荐"><a href="#强制推送到远程-amp-覆盖本地-不推荐" class="headerlink" title="强制推送到远程&amp;覆盖本地(不推荐)"></a>强制推送到远程&amp;覆盖本地(不推荐)</h3><p>强制推送到远程(发生冲突时),<strong>不推荐此方法！！！会导致代码被随意改动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先查看gitlab的protected状态</span></span><br><span class="line"><span class="comment"># &quot;Settings&quot; -&gt; &quot;Repository&quot; -&gt; &quot;Protected branches&quot;.</span></span><br><span class="line"><span class="comment"># 一般来说只支持Maintainers</span></span><br><span class="line">git push -f origin [branchName]</span><br></pre></td></tr></table></figure>



<p>强制覆盖本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得更新</span></span><br><span class="line">git fetch --all</span><br><span class="line"><span class="comment"># 覆盖本地</span></span><br><span class="line">git reset --hard origin/[branchName] <span class="comment"># 这里可以为任意远程分支</span></span><br></pre></td></tr></table></figure>



<h3 id="删除远程-amp-本地分支"><a href="#删除远程-amp-本地分支" class="headerlink" title="删除远程&amp;本地分支"></a>删除远程&amp;本地分支</h3><blockquote>
<p>需要在gitlab上将branch的保护状态去掉，不然会删除失败，推荐在gitlab上删除远程分支，本地删除本地分支</p>
<p>修改保护状态路径,在gitlab上：”Settings” -&gt; “Repository” -&gt; “Protected branches”.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除远程</span></span><br><span class="line">git push origin --delete [branchName] <span class="comment"># 远程分支名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地分支,因为删除远程分支时并不会把本地分支一并删除</span></span><br><span class="line"><span class="comment"># 注意删除本地分支时HEAD不能指向该分支,不然会删除失败</span></span><br><span class="line">git branch -D [branchName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看现有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Js常用内置对象方法</title>
    <url>/2021/04/23/Js%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Js常用内置对象方法"><a href="#Js常用内置对象方法" class="headerlink" title="Js常用内置对象方法"></a>Js常用内置对象方法</h1><h2 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h2><blockquote>
<p>原理：因为数组的长度随时可变，并且其数据在内存中也可以不连续，所以Js数组不一定是密集型的</p>
<p>如果想用密集型可以考虑用<strong>TypedArray</strong></p>
</blockquote>
<h3 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h3><h4 id="push-amp-pop"><a href="#push-amp-pop" class="headerlink" title="push&amp;pop"></a>push&amp;pop</h4><blockquote>
<p>pop：将数组中最后一个元素删除，返回<strong>删除的元素</strong></p>
<p>push：支持往数组尾部添加多个值，返回<strong>数组的长度</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr.pop()&#x27;</span>, arr.pop())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr.push(3,4)&#x27;</span>, arr.push(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h4 id="shift-amp-unshift"><a href="#shift-amp-unshift" class="headerlink" title="shift&amp;unshift"></a>shift&amp;unshift</h4><blockquote>
<p>shift：将数组中第一个元素删除,返回<strong>删除的元素</strong></p>
<p>unshift：支持往数组头部添加多个数字,返回<strong>数组的长度</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;shift:&#x27;</span>,arr.shift())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;unshift:&#x27;</span>,arr.unshift(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h4 id="fill-amp-splice"><a href="#fill-amp-splice" class="headerlink" title="fill&amp;splice"></a>fill&amp;splice</h4><blockquote>
<p>fill：将数组中指定区间的所有元素的值，都替换成某个固定的值，注意数组必须在<strong>该区间内有值</strong></p>
<p>splice：删除数组元素从arguments[0]到argument[1],返回<strong>被删除的元素形成的数组</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">9</span>,<span class="number">2</span>,<span class="number">51</span>))</span><br><span class="line">arr[<span class="number">50</span>] = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">9</span>,<span class="number">2</span>,<span class="number">51</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">30</span>,<span class="number">50</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h4 id="sort-amp-reverse"><a href="#sort-amp-reverse" class="headerlink" title="sort&amp;reverse"></a>sort&amp;reverse</h4><blockquote>
<p>sort：传入函数对数组进行排序</p>
<p>reverse：将数组逆序</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b))</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a))</span><br><span class="line"><span class="comment">// 改变原数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse())</span><br><span class="line"><span class="comment">// 改变原数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h3 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h3><h4 id="concat-amp-join"><a href="#concat-amp-join" class="headerlink" title="concat&amp;join"></a>concat&amp;join</h4><blockquote>
<p>concat：用于合并多个数组或值并返回一个新数组</p>
<p>join：将传入内容与数组内值拼接形成新的字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">3</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">4</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(<span class="literal">undefined</span>,<span class="literal">null</span>,&#123;<span class="attr">name</span>: <span class="number">1</span>&#125;, <span class="literal">true</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, [<span class="number">111</span>,<span class="number">22</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;----------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;阿巴阿巴&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><blockquote>
<p>slice：复制数组从arguments[0]到(arguments[1]-1),返回<strong>复制出的数组</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h4 id="includes-amp-indexOf-amp-lastIndexOf"><a href="#includes-amp-indexOf-amp-lastIndexOf" class="headerlink" title="includes&amp;indexOf&amp;lastIndexOf"></a>includes&amp;indexOf&amp;lastIndexOf</h4><blockquote>
<p>includes：判断元素是否在数组内，返回bool</p>
<p>indexOf：返回元素在数组的索引，不在则返回-1</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>



<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><h4 id="every-amp-some-amp-filter"><a href="#every-amp-some-amp-filter" class="headerlink" title="every&amp;some&amp;filter"></a>every&amp;some&amp;filter</h4><blockquote>
<p>every：如果数组中的每个元素都满足测试函数，则返回 <code>true</code>，否则返回 <code>false</code></p>
<p>some：如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false</p>
<p>filter：将所有在过滤函数中返回 <code>true</code> 的数组元素放进一个新数组中并返回</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="params">i</span>=&gt;</span>i&gt;<span class="number">0</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="params">i</span>=&gt;</span>i&gt;<span class="number">-2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="params">i</span>=&gt;</span>i&gt;<span class="number">0</span>))</span><br></pre></td></tr></table></figure>



<h4 id="forEach-amp-map"><a href="#forEach-amp-map" class="headerlink" title="forEach&amp;map"></a>forEach&amp;map</h4><blockquote>
<p>forEach：传入函数对数组中每个可迭代元素进行操作，不改变原数组，返回undefined</p>
<p>map：同forEach，返回一个新数组</p>
<p>上述两个API都不支持break/continue，只能通过try/catch throw Error跳出执行</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.forEach(<span class="function"><span class="params">i</span>=&gt;</span>i+=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">i</span>=&gt;</span>i+=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrRes = arr.forEach(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// break</span></span><br><span class="line">  <span class="comment">// continue</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(i)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arrRes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapRes = arr.map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// break</span></span><br><span class="line">  <span class="comment">// continue</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(i)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapRes)</span><br></pre></td></tr></table></figure>



<h4 id="reduce-amp-reduceRight"><a href="#reduce-amp-reduceRight" class="headerlink" title="reduce&amp;reduceRight"></a>reduce&amp;reduceRight</h4><blockquote>
<p>reduce：<strong>从左到右</strong>为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</p>
<p>reduceRight：<strong>从右到左</strong>为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b))</span><br><span class="line"><span class="built_in">console</span>.log(arr.reduceRight(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b))</span><br></pre></td></tr></table></figure>



<h3 id="ArrayConstructor方法"><a href="#ArrayConstructor方法" class="headerlink" title="ArrayConstructor方法"></a>ArrayConstructor方法</h3><h4 id="Array-from-amp-isArray-amp-of"><a href="#Array-from-amp-isArray-amp-of" class="headerlink" title="Array.from&amp;isArray&amp;of"></a>Array.from&amp;isArray&amp;of</h4><blockquote>
<p>Array.from()：从类数组对象/可迭代对象中创建一个新的数组实例</p>
<p>Array.isArray()：判断某个变量是否是数组</p>
<p>Array.of()：根据一组参数来创建新的数组实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArrConstructor</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">arguments</span> = likeArrConstructor(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.of(<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;args：&#x27;</span>,args)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newArr&#x27;</span>, newArr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Array.isArray(arguments)：&#x27;</span>,<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Array.isArray(args)：&#x27;</span>,<span class="built_in">Array</span>.isArray(args))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Array.isArray(newArr)&#x27;</span>, <span class="built_in">Array</span>.isArray(newArr))</span><br></pre></td></tr></table></figure>



<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>arguments：获取传入的参数</p>
<p>length：函数的形参个数</p>
<p>name：函数的名称</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="built_in">arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foo(1,2,3).arguments&#x27;</span>, foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foo.length&#x27;</span>, foo.length)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foo.name&#x27;</span>, foo.name)</span><br></pre></td></tr></table></figure>



<h3 id="bind-amp-call-amp-apply"><a href="#bind-amp-call-amp-apply" class="headerlink" title="bind&amp;call&amp;apply"></a>bind&amp;call&amp;apply</h3><blockquote>
<p>三者都是改变原函数的指向：第一个参数为希望改变的指向，后面的不同</p>
<p>bind：传参类似call()，但是返回一个新函数</p>
<p>call：从第二个参数开始接收多个参数，没有返回值</p>
<p>apply：第二个参数为数组接收参数，没有返回值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> bindFoo = foo.bind(<span class="built_in">this</span>,obj)</span><br><span class="line"><span class="keyword">let</span> callFoo = foo.call(<span class="built_in">this</span>,obj)</span><br><span class="line"><span class="keyword">let</span> applyFoo = foo.apply(<span class="built_in">this</span>,[obj])</span><br><span class="line"><span class="built_in">console</span>.log(bindFoo)</span><br><span class="line"><span class="built_in">console</span>.log(callFoo)</span><br><span class="line"><span class="built_in">console</span>.log(applyFoo)</span><br></pre></td></tr></table></figure>





<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="indexOf-amp-lastIndexOf-amp-includes"><a href="#indexOf-amp-lastIndexOf-amp-includes" class="headerlink" title="indexOf&amp;lastIndexOf&amp;includes"></a>indexOf&amp;lastIndexOf&amp;includes</h3><blockquote>
<p>indexOf：从字符串对象中返回首个被发现的给定值的索引值，如果没有找到则返回-1。</p>
<p>lastIndexOf：从字符串对象中返回最后一个被发现的给定值的索引值，如果没有找到则返回-1。</p>
<p>includes：判断一个字符串里是否包含其他字符串。</p>
<p>search：对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;PositionAbsolute&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;o&#x27;</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>)) <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;o&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="concat-amp-replace"><a href="#concat-amp-replace" class="headerlink" title="concat&amp;replace"></a>concat&amp;replace</h3><blockquote>
<p>cocat：连接两个字符串文本，并返回一个新的字符串。</p>
<p>replace：被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。</p>
<p>slice：摘取一个字符串区域，返回一个新的字符串。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;PositionAbsolute&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>,<span class="string">&#x27;333&#x27;</span>)) <span class="comment">// PositionAbsolute111222333</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/o/g</span>,<span class="string">&#x27;replaced&#x27;</span>)) <span class="comment">// PreplacedsitireplacednAbsreplacedlute</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>,<span class="number">10</span>)) <span class="comment">// sitionAb</span></span><br></pre></td></tr></table></figure>



<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><blockquote>
<p>split：通过分离字符串成字串，将字符串对象分割成字符串数组。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;PositionAbsolute&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27;&#x27;</span>)) </span><br><span class="line"><span class="comment">// [&quot;P&quot;, &quot;o&quot;, &quot;s&quot;, &quot;i&quot;, &quot;t&quot;, &quot;i&quot;, &quot;o&quot;, &quot;n&quot;, &quot;A&quot;, &quot;b&quot;, &quot;s&quot;, &quot;o&quot;, &quot;l&quot;, &quot;u&quot;, &quot;t&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure>



<h3 id="substr-amp-substring"><a href="#substr-amp-substring" class="headerlink" title="substr&amp;substring"></a>substr&amp;substring</h3><blockquote>
<p>substr：通过指定字符数返回在指定位置开始的字符串中的字符。</p>
<p>substring：返回在字符串中指定两个下标之间的字符。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;PositionAbsolute&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">// sit</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">// s</span></span><br></pre></td></tr></table></figure>



<h3 id="trim-amp-trimStart-amp-trimEnd"><a href="#trim-amp-trimStart-amp-trimEnd" class="headerlink" title="trim&amp;trimStart&amp;trimEnd"></a>trim&amp;trimStart&amp;trimEnd</h3><blockquote>
<p>trim：从字符串的开始和结尾去除空格</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;  Space  &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&#x27;&quot;</span>+str.trim()+<span class="string">&quot;&#x27;&quot;</span>) <span class="comment">// &#x27;Space&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&#x27;&quot;</span>+str.trimStart()+<span class="string">&quot;&#x27;&quot;</span>) <span class="comment">// &#x27;Space  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&#x27;&quot;</span>+str.trimEnd()+<span class="string">&quot;&#x27;&quot;</span>) <span class="comment">// &#x27;  Space&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="toUpperCase-amp-toLowerCase"><a href="#toUpperCase-amp-toLowerCase" class="headerlink" title="toUpperCase&amp;toLowerCase"></a>toUpperCase&amp;toLowerCase</h3><blockquote>
<p>toUpperCase：全转成大写</p>
<p>toLower：全转成小写</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;PositionAbsolute&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()) <span class="comment">// POSITIONABSOLUTE</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()) <span class="comment">// positionabsolute</span></span><br></pre></td></tr></table></figure>



<h3 id="search-amp-match"><a href="#search-amp-match" class="headerlink" title="search&amp;match"></a>search&amp;match</h3><blockquote>
<p>search：对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。</p>
<p>match：使用正则表达式与字符串相比较，返回一个字符串匹配正则表达式的结果。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>前端优化实践</title>
    <url>/2021/04/21/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="前端优化实践"><a href="#前端优化实践" class="headerlink" title="前端优化实践"></a>前端优化实践</h1><blockquote>
<p>背景：因为我们接手维护的项目运行太过缓慢，于是下定决心好好优化一番</p>
</blockquote>
<h2 id="去除未用部分"><a href="#去除未用部分" class="headerlink" title="去除未用部分"></a>去除未用部分</h2><blockquote>
<p>在看完一遍项目结构以后，发现有很多未使用部分在项目内部</p>
<p>虽然打包的时候webpack有shaking tree去除未使用部分，但是开发的时候仍然让人难以忍受</p>
<p>去除无用部分后，通过lightHouse我们可以看到分数十分惨淡</p>
</blockquote>
<p><img src="/.com//1.jpg"></p>
<h2 id="从webpack起步"><a href="#从webpack起步" class="headerlink" title="从webpack起步"></a>从webpack起步</h2><blockquote>
<p>webpack主要是在打包速度方面提升速度</p>
</blockquote>
<h3 id="开启babel缓存"><a href="#开启babel缓存" class="headerlink" title="开启babel缓存"></a>开启babel缓存</h3><p><img src="/.com//2.jpg">build/webpack.base.conf.js</p>
<h3 id="dll加速-amp-cdn加速"><a href="#dll加速-amp-cdn加速" class="headerlink" title="dll加速&amp;cdn加速"></a>dll加速&amp;cdn加速</h3><blockquote>
<p>根据我原来的<a href="https://dinnerchicke.github.io/2021/02/23/webpack%E4%BC%98%E5%8C%96/">webpack优化</a>即可，这里不再赘述</p>
</blockquote>
<h3 id="开启gzip压缩"><a href="#开启gzip压缩" class="headerlink" title="开启gzip压缩"></a>开启gzip压缩</h3><blockquote>
<p>这个早已有实现，确保compression-webpack-plugin版本在1.1.2以下</p>
</blockquote>
<p><img src="/.com//4.jpg">config/index.js</p>
<p><img src="/.com//7.jpg">build/webpack.prod.conf.js</p>
<h3 id="生产环境关闭console"><a href="#生产环境关闭console" class="headerlink" title="生产环境关闭console"></a>生产环境关闭console</h3><blockquote>
<p>虽然并不影响性能，但也算一个小tip，值得添加</p>
</blockquote>
<p><img src="/.com//6.jpg">build/webpack.prod.conf.js</p>
<p>添加drop_dubugger/drop_console即可</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><blockquote>
<p>浏览器运行过程中会生成两棵树：</p>
<ul>
<li>CSSOM树</li>
<li>DOM树</li>
</ul>
<p>浏览器运行流程：</p>
</blockquote>
<p><img src="/.com//5.jpg"></p>
<h3 id="CSS和JS的加载顺序优化"><a href="#CSS和JS的加载顺序优化" class="headerlink" title="CSS和JS的加载顺序优化"></a>CSS和JS的加载顺序优化</h3><p>CSS渲染：</p>
<blockquote>
<p>只有当我们开始解析HTML的link、style标签时，CSS才登场，是因为避免让页面的css未加载就裸奔在用户面前</p>
<p>所以我们应该将CSS放在head标签内以尽早渲染</p>
</blockquote>
<p>JS渲染：</p>
<blockquote>
<p>而JS会阻塞CSS渲染，比如我们在CSS渲染时进行DOM查询，会阻塞CSS。</p>
<p>这就是为什么要避买在布局改变时做DOM查询。</p>
</blockquote>
<h3 id="从样式渲染开始"><a href="#从样式渲染开始" class="headerlink" title="从样式渲染开始"></a>从样式渲染开始</h3><p>刚刚入门的同学很可能学过以下的重置样式代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是后来大家都不用它了，为什么呢？</p>
<p>因为这个代码会带来很大的性能问题：<strong>它会遍历每一个元素</strong>，所以后面我们会使用cssReset或者normalize.css去重置默认样式</p>
<p>对于样式渲染，有以下的建议：</p>
<ul>
<li>避免*通配符</li>
<li>尽量通过继承实现</li>
<li>少用标签选择器，可以使用类选择器代替</li>
<li>减少嵌套：避免重排重绘</li>
</ul>
<h3 id="Js-昂贵的DOM操作"><a href="#Js-昂贵的DOM操作" class="headerlink" title="Js-昂贵的DOM操作"></a>Js-昂贵的DOM操作</h3><blockquote>
<p>因为当布局改变的时候会触发<strong>重排</strong>，当如颜色等不改变布局的样式改变时会触发<strong>重绘</strong></p>
<p>HTML渲染大致分为如下几步：</p>
<ol>
<li>HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。</li>
<li>DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。</li>
<li>节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息。</li>
<li>渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面。</li>
</ol>
</blockquote>
<blockquote>
<p>这里可以看到，重排一定会导致重绘，重绘不一定导致重排。</p>
<p>且重排重绘成本很高，也就是我们所说的<strong>DOM操作的成本很高</strong></p>
<p>但是JS很快，所以能交给Js的就避免多次进行DOM操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 如添加1000个div</span><br><span class="line">&#x2F;&#x2F; 错误示范</span><br><span class="line">for(1000次循环)&#123;</span><br><span class="line">	document.body.appendChild(document.createElement(&#39;div&#39;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确示范</span><br><span class="line">for(1000次循环)&#123;</span><br><span class="line">	document.createElement(&#39;div&#39;)</span><br><span class="line">	添加到一个element中</span><br><span class="line">&#125;</span><br><span class="line">document.body.appendChild(结果元素)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise&amp;async&amp;await深入</title>
    <url>/2021/04/15/Promise&amp;async&amp;await%E6%B7%B1%E5%85%A5/</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><blockquote>
<p>简介：Promise是ES6引入的异步解决方案，语法上来说是一个构造函数</p>
<p>意义：</p>
<ol>
<li>指定回调函数更灵活</li>
<li>链式调用解决回调地狱难以阅读、难以处理异常的痛点</li>
</ol>
</blockquote>
<blockquote>
<p>为了解决异步地狱的问题，ES6参考其他第三方库推出了Promise</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步地狱</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> file1 = <span class="string">&#x27;./file1.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> file2 = <span class="string">&#x27;./file2.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> file3 = <span class="string">&#x27;./file3.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> file4 = <span class="string">&#x27;./file4.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> file5 = <span class="string">&#x27;./file5.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">fs.readFile(file1, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line"></span><br><span class="line">  fs.readFile(file2, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line"></span><br><span class="line">    fs.readFile(file3, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;file3&#x27;</span>, data.toString());</span><br><span class="line"></span><br><span class="line">      fs.readFile(file4, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(data.toString());</span><br><span class="line"></span><br><span class="line">        fs.readFile(file5, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Promise属性：</p>
<ul>
<li>状态(PromiseState)：Promise的状态只能变一次(pending-&gt;resolved/rejected)</li>
<li>对象的值(PromiseResult)：保存着对象[resolved/rejected]的结果</li>
</ul>
<p>Promise的执行顺序：</p>
<ul>
<li>Promise内部的代码是同步宏任务</li>
<li>而then/catch/finally的代码是微任务</li>
<li>当给Promise添加了多个处理程序，当Promise状态改变时，相关处理程序(then/catch/finally)会按添加顺序执行</li>
</ul>
</blockquote>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><blockquote>
<p>Promise状态机：</p>
<ul>
<li>待定(pending)</li>
<li>解决(fulfilled/resolved)</li>
<li>拒绝(rejected)</li>
</ul>
</blockquote>
<blockquote>
<p>可以通过Promise.prototype查看Promise上的方法</p>
</blockquote>
<p><img src="/.com//1.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise可以通过new实例化，创建时需要传入executor函数作为参数</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// exector执行器内部，作用如下：</span></span><br><span class="line">    <span class="comment">// 	1.初始化Promise的行为</span></span><br><span class="line">    <span class="comment">// 	2.控制状态的最终转换:如resolve,reject</span></span><br><span class="line">	<span class="keyword">if</span>(...)&#123;</span><br><span class="line">       resolve() <span class="comment">// 成功回调</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       reject() <span class="comment">// 失败回调</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功!&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败!&#x27;</span>,reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="异步错误捕获"><a href="#异步错误捕获" class="headerlink" title="异步错误捕获"></a>异步错误捕获</h3><blockquote>
<p>正常情况下，通过throw关键字抛出异常时，Js的错误处理机制会<code>停止执行抛出错误之后的任何指令</code></p>
<p>但是在Promise中抛出错误时，因为错误是从消息队列中异步抛出的，所以并<code>不会阻止继续执行同步任务</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;同步错误&#x27;</span>) <span class="comment">// 这条指令以下均不执行</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是同步错误执行后的指令&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">// 同步错误捕获成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;异步错误&#x27;</span>)) <span class="comment">// 这条指令下的同步任务均被执行</span></span><br><span class="line">    <span class="comment">// .catch(reason=&gt;&#123; // 这样才能捕获异步错误</span></span><br><span class="line">    <span class="comment">//    console.log(reason)</span></span><br><span class="line">    <span class="comment">//  &#125;)</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是异步错误执行后的指令&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;test&#x27;</span>) <span class="comment">// 异步指令未被执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是异步错误执行后的指令&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">// 异步错误捕获失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><blockquote>
<p>then最多接收两个参数：<code>onResolved</code>和<code>onRejected</code>，二者<code>必须是函数类型</code>，否则会被静默忽略。</p>
<p>二者都是可选的，如果传入的话会<code>分别</code>在resolve和reject阶段执行。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;我是onResolved函数&#x27;</span>), <span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;我是onRejected函数&#x27;</span>)&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入非函数处理程序会被静默处理</span></span><br><span class="line">p.then(<span class="string">&#x27;ignoredString&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只传入onRejected的规范写法</span></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function">()=&gt;</span>onRejected(<span class="string">&#x27;只传入onRejected，onResolved位置应该设为null&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用then/catch/finally实现链式调用：</p>
<p>​    因为三者均会返回一个新的Promise对象，所以通过.then/.catch/.finally可以构成<code>链式调用</code></p>
</blockquote>
<h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><blockquote>
<p>此方法用于给Promise添加统一处理reject，这个方法只接收一个参数：onRejected处理程序</p>
<p>这个方法其实就是一个语法糖，相当于Promise.prototype.then(null, onRejected)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.then(...)</span><br><span class="line">	.then(...)</span><br><span class="line">		.then(...)</span><br><span class="line">            ...</span><br><span class="line">				.catch(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">              		<span class="built_in">console</span>.log(<span class="string">&#x27;统一错误捕获&#x27;</span>)</span><br><span class="line">              	&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h3><blockquote>
<p>这个方法类似switch/case里的finally，故不多赘述</p>
<p>但是值得注意的是，这个finally与then/catch同属于<code>微任务</code>，执行时顺序可能与预期不同</p>
</blockquote>
<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><blockquote>
<p>Promise.all([])</p>
<p>参数：Promise数组</p>
<p>返回状态：只有所有Promise成功才算成功，只要有一个失败就失败</p>
<p>返回值：多个Promise返回值组成的数组</p>
</blockquote>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><blockquote>
<p>Promise.race([])</p>
<p>参数：Promise数组</p>
<p>返回状态：第一个完成Promise的结果状态就是race的结果状态</p>
<p>返回值：多个Promise返回值组成的数组</p>
</blockquote>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="当给Promise指定多个回调，执行情况"><a href="#当给Promise指定多个回调，执行情况" class="headerlink" title="当给Promise指定多个回调，执行情况"></a>当给Promise指定多个回调，执行情况</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要状态改变，多个回调均会执行</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	resolve(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	alert(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="改变promise状态和指定回调两者顺序"><a href="#改变promise状态和指定回调两者顺序" class="headerlink" title="改变promise状态和指定回调两者顺序"></a>改变promise状态和指定回调两者顺序</h3><blockquote>
<p>先指定回调再改变promise状态情况：</p>
<ul>
<li>promise内部是同步的</li>
</ul>
<p>先改变promise状态再指定回调情况：</p>
<ul>
<li><p>如果promise内部使用定时器</p>
</li>
<li><p>如果promise内容调用resolve/reject改变状态</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>触发时间：</p>
<ul>
<li>先指定回调再改变promise状态，当状态改变时，回调就会被调用</li>
<li>先改变promise状态再指定回调情况，当指定回调时，回调就会被调用</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	resolve(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="then返回的结果"><a href="#then返回的结果" class="headerlink" title="then返回的结果"></a>then返回的结果</h3><blockquote>
<p>情况如下：</p>
<ol>
<li>如果抛出异常，则状态变为rejected</li>
<li>如果返回结果是非Promise对象，则状态变为resolved</li>
<li>如果返回的结果是Promise对象，则return的Promise的状态决定了then返回的状态</li>
</ol>
</blockquote>
<h3 id="异常穿透"><a href="#异常穿透" class="headerlink" title="异常穿透"></a>异常穿透</h3><blockquote>
<p>可以只在链式调用最后使用.catch捕获错误</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="中断promise链"><a href="#中断promise链" class="headerlink" title="中断promise链"></a>中断promise链</h3><blockquote>
<p>有且只有一个方法：return new Promise()</p>
<p>因为这个Promise是pending状态，所以后面的链式调用无法启用</p>
</blockquote>
<h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>(func) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.resolvedTasks = []</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.rejectedTasks = []</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>._resolve = <span class="built_in">this</span>._resolve.bind(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>._reject = <span class="built_in">this</span>._reject.bind(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">        func(<span class="built_in">this</span>._resolve, <span class="built_in">this</span>._reject)</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>._reject(error)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _resolve(value) &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 将其变成异步</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.PromiseResult = value</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.resolvedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(value))</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _reject(reason) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;reject&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.PromiseResult = reason</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.rejectedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(reason))</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// then返回一个pending状态的Promise处理链式调用</span></span></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;onFulfilled&#x27;</span>,onFulfilled)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;onRejected&#x27;</span>,onRejected)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.resolvedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> res = onFulfilled(value)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span></span><br><span class="line">              res.then(resolve, reject)</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">              resolve(res)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line">            reject(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.rejectedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> res = onRejected(value)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span></span><br><span class="line">              res.then(resolve, reject)</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">              reject(res)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line">            reject(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">catch</span>(onRejected) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 测试</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      resolve(1);</span><br><span class="line">    &#125;, 500);</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">        resolve(2);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;a error&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;==&gt;&#x27;</span>, err);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h1><blockquote>
<p>async关键字用于声明异步函数，这个关键字可以用在<code>函数声明</code>、<code>函数表达式</code>、<code>箭头函数</code>和<code>方法</code>上</p>
<p>使用async关键字可以让函数具有<code>异步特征</code>，但在总体上其<code>代码仍然是同步求值的</code></p>
<p>如果async使用return关键字返回了值，这个值会被Promise.resolve包装成一个<code>Promise</code>，也就是可以使用then/catch等挂载在Promise上的方法</p>
</blockquote>
<blockquote>
<p>await关键字可以暂停函数代码的执行，<code>等待</code>Promise进入resolve状态</p>
<p>Js运行时在碰到await关键字时会记录在哪里暂停执行，等到await右边的值可用了，会往消息队列中推送一个任务，这个任务会恢复异步函数的执行。即使后面的值立即可用，函数的其余部分也会变为异步执行。</p>
<p>注意：</p>
<ol>
<li>await会暂停后面的代码，await下面的代码可以理解为变为异步执行，等待下一次执行</li>
<li>await关键字只能直接出现在async函数的定义中，在同步函数中使用await会抛出语法错误</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> axios.get(<span class="string">&#x27;http://localhost:9010/server&#x27;</span>)</span><br><span class="line">    .then(<span class="keyword">async</span> res=&gt;&#123; <span class="comment">// 实际场景：await等待res数据</span></span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      data = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;2&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;data:&#x27;</span>,data)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>



<h2 id="平行执行加速"><a href="#平行执行加速" class="headerlink" title="平行执行加速"></a>平行执行加速</h2><blockquote>
<p>因为await会阻塞后面的代码执行，就算他们之间没有依赖关系。</p>
<p>如果顺序不是必需保证的，可以<code>先一次性初始化所有Promise</code>，然后再分别<code>等待他们的结果</code></p>
</blockquote>
<blockquote>
<p>注意Promise虽然没有按照顺序执行，但是await按照顺序返回了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">randomDelay</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Math</span>.random() * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;id&#125;</span> finished`</span>)</span><br><span class="line">    resolve(id)</span><br><span class="line">  &#125;, delay))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delayItem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> t0 = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">const</span> promises = <span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="literal">null</span>).map(<span class="function">(<span class="params">_, i</span>)=&gt;</span>randomDelay(i))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> p <span class="keyword">of</span> promises)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`awaited <span class="subst">$&#123;<span class="keyword">await</span> p&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now() - t0&#125;</span>ms elapsed`</span>)</span><br><span class="line">&#125;</span><br><span class="line">delayItem()</span><br></pre></td></tr></table></figure>



<h1 id="Axios在项目中的运用"><a href="#Axios在项目中的运用" class="headerlink" title="Axios在项目中的运用"></a>Axios在项目中的运用</h1><blockquote>
<p>Axios的特点：</p>
<ol>
<li>基于 xhr + promise 的异步 ajax请求库</li>
<li>浏览器端/node 端都可以使用</li>
</ol>
</blockquote>
<p><img src="/.com//2.jpg"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> request = axios.create(&#123;</span></span><br><span class="line"><span class="javascript">      baseURL: <span class="string">&#x27;http://localhost:9010/&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">    request.interceptors.request.use(</span><br><span class="line">      config=&gt;&#123;</span><br><span class="line"><span class="javascript">        config[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;config&#x27;</span> <span class="comment">// 请求头内添加字段向后端发送token</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器config:&#x27;</span>, config)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> config</span></span><br><span class="line">      &#125;,</span><br><span class="line">      error=&gt;&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    request.interceptors.response.use(</span><br><span class="line">      response=&gt;&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器response:&#x27;</span>, response)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> response</span></span><br><span class="line">      &#125;,</span><br><span class="line">      error=&gt;&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 封装接口，放在/api目录下</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// get接口封装一般形式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">addExample</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 未传递数据直接get请求</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;server&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;get&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delayExample</span>(<span class="params">params</span>) </span>&#123; <span class="comment">// 传递数据get请求</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;delay&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        params <span class="comment">// ES6语法，对象内用params代替params: params</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">notRealDelayExample</span>(<span class="params">_id</span>) </span>&#123; <span class="comment">// 根据Id查询数据,该接口未写</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;delay/&#x27;</span> + _id,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;get&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// post接口的一般形式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">addApi</span>(<span class="params">payload</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;api&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line">        data: payload</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// put接口的一般形式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">updateExample</span>(<span class="params">_id, payload</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123; <span class="comment">// 一般通过url来传id,通过data传递修改后的内容,但是只通过body传参也可以</span></span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;update/&#x27;</span> + _id,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;put&#x27;</span>,</span></span><br><span class="line">        data: payload</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// delete接口的一般形式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delExample</span>(<span class="params">_id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> request(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;del/&#x27;</span> + _id,</span></span><br><span class="line"><span class="javascript">        method: <span class="string">&#x27;delete&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> neededData = <span class="string">&#x27;&#x27;</span> <span class="comment">// 需要渲染的data</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 调用接口，使用async/await来等待接口数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddExample</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> addExample().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getDelayExample</span>(<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> delayExample(params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;await阻塞代码&#x27;</span>)</span></span><br><span class="line">        neededData = res</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;neededData:&#x27;</span>,neededData)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getAddExample()</span><br><span class="line"><span class="javascript">    getDelayExample(<span class="string">&#x27;DelayData&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    addApi(<span class="string">&#x27;RequestBody&#x27;</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环EventLoop</title>
    <url>/2021/04/13/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop/</url>
    <content><![CDATA[<h1 id="事件循环EventLoop"><a href="#事件循环EventLoop" class="headerlink" title="事件循环EventLoop"></a>事件循环EventLoop</h1><blockquote>
<p>EventLoop意义：因为JavaScript是单线程，多线程用EventLoop实现</p>
</blockquote>
<blockquote>
<p>事件循环涉及两个概念：</p>
<ul>
<li>宏任务：script、XHR回调、事件回调、定时器、I/O、UI Render</li>
<li>微任务：Promise的then/catch、process.nextTick(Node)、MutationObserver、Object.observe</li>
</ul>
</blockquote>
<p>执行顺序：</p>
<ol>
<li>按顺序执行代码，遇到宏任务放入宏任务队列中，微任务放入微任务队列中</li>
<li>执行完宏任务队列后，检查是否有微任务，并执行所有微任务有**<em>新的微任务也执</em>行**直到清空微任务队列</li>
<li>检查是否需要UI渲染，如果需要就执行，否则返回1</li>
</ol>
<p>Tips：</p>
<ul>
<li>Promise的内容是宏任务，只有then/catch是微任务</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// https://www.jianshu.com/p/184988903562</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span></span><br><span class="line">    resolve();</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.宏任务[l2,l10] 输出2,10</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.宏任务[s5,s6],微任务[l3,s4,s789]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 3.执行所有微任务:输出3。宏任务队列[s5,s6,s4,l7,s8],微任务队列[s9]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 4.执行宏任务5,6,4,7,8,9</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span></span><br><span class="line">    resolve();</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line">    resolve()</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span></span><br><span class="line">        &#125;);</span><br><span class="line">        resolve()</span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>)</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. 宏任务[g1,1,2,3,4,5,s1000,promise1,s2]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2. 微任务[t1,t2]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 宏任务输出 global 1 2 3 4 5 promise1</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 微任务输出 then1</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// global 1 2 3 4 5 promise1 then1</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 3.宏任务[s1000, s2]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 4.微任务[t2]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 宏任务按时间输出 6 timeout2 timeout2_promise </span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 剩下的宏任务还在定时器线程，故执行微任务: timeout2_then</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 最后执行剩下的宏任务 6 6 6 6</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// global 1 2 3 4 5 promise1 then1 6 timeout2 timeout2_promise timeout2_then 6 6 6 6</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;global&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(i)</span></span><br><span class="line">    &#125;, i * 1000)</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(i)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span></span><br><span class="line">    resolve()</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;then1&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;timeout2_promise&#x27;</span>)</span></span><br><span class="line">      resolve()</span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;timeout2_then&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/2021/03/26/AJAX/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote>
<p>AJAX意为异步的JavaScript和XML</p>
</blockquote>
<blockquote>
<p>优点：</p>
<ol>
<li>可以无需刷新页面与服务器进行通信</li>
<li>允许你根据用户事件来更新部分页面内容</li>
</ol>
<p>缺点：</p>
<ol>
<li>没有浏览历史，不能回退</li>
<li>存在跨域问题</li>
<li>SEO不友好(页面是动态生成的)</li>
</ol>
</blockquote>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><blockquote>
<p>超文本传输协议，协议规定了浏览器和万维网服务器之间的通信规则</p>
</blockquote>
<h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><blockquote>
<p>行:</p>
<ul>
<li>请求方式(get/post…)</li>
<li>请求参数(s?ie=utf-8…)</li>
<li>HTTP版本1.1</li>
</ul>
<p>头:</p>
<ul>
<li>Host:baidu.com</li>
<li>Cookie:name=baidu</li>
<li>Content-type: application/x-www-form-urlencoded</li>
<li>User-Agent:chrome 83</li>
<li>…</li>
</ul>
<p>空行</p>
<p>体:(get请求体为空,post不为空)</p>
<ul>
<li>username=admin&amp;password=admin</li>
</ul>
</blockquote>
<h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><blockquote>
<p>行:</p>
<ul>
<li>HTTP版本(1.1)</li>
<li>状态码</li>
<li>状态码信息</li>
</ul>
<p>头:</p>
<ul>
<li>Content-Type:text/html;charset=urf-8</li>
<li>Content-length:2048</li>
<li>Content-encoding:gzip</li>
</ul>
<p>空行</p>
<p>体:如html … /html</p>
</blockquote>
<h2 id="原生AJAJ-API"><a href="#原生AJAJ-API" class="headerlink" title="原生AJAJ_API"></a>原生AJAJ_API</h2><h3 id="发送GET-POST请求"><a href="#发送GET-POST请求" class="headerlink" title="发送GET/POST请求"></a>发送GET/POST请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 状态1：创建AJAX</span></span><br><span class="line">   <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">   <span class="comment">// 状态2：初始化</span></span><br><span class="line">   xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:9010/server?a=100&amp;b=200&#x27;</span>) <span class="comment">// get方法</span></span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:9010/server&#x27;</span>) <span class="comment">//post方法</span></span><br><span class="line">   <span class="comment">// 状态3：发送</span></span><br><span class="line">   xhr.send() <span class="comment">//get直接send即可</span></span><br><span class="line">xhr.send(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>) <span class="comment">// post把参数放进send里面</span></span><br><span class="line">   <span class="comment">// 状态4：事件绑定,状态改变触发change事件，处理服务器返回的结果</span></span><br><span class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 判断状态为4，服务端返回了所有结果</span></span><br><span class="line">     <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span>) &#123;</span><br><span class="line">         <span class="comment">// 处理结果： 行/头/空行/体</span></span><br><span class="line">         <span class="comment">// 响应行内容获取</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;xhr.status&#x27;</span>,xhr.status)</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;xhr.statusText&#x27;</span>,xhr.statusText)</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;xhr.getAllResponseHeaders()&#x27;</span>,xhr.getAllResponseHeaders())</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;xhr.response&#x27;</span>,xhr.response)</span><br><span class="line">         <span class="comment">// 设置响应</span></span><br><span class="line">         div.innerText = xhr.response</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="请求超时-网络异常"><a href="#请求超时-网络异常" class="headerlink" title="请求超时/网络异常"></a>请求超时/网络异常</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时设置</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;网络异常请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;网络异常请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="取消重复发送的请求"><a href="#取消重复发送的请求" class="headerlink" title="取消重复发送的请求"></a>取消重复发送的请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btnSend = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btnSend&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> btnCancel = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btnCancel&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> xhr</span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span> <span class="comment">// 请求标识符</span></span><br><span class="line">btnSend.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isSending) &#123;</span><br><span class="line">    xhr.abort() <span class="comment">// 取消发送请求</span></span><br><span class="line">  &#125;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  isSending = <span class="literal">true</span></span><br><span class="line">  xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:9010/delay&#x27;</span>)</span><br><span class="line">  xhr.send()</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      isSending = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">btnCancel.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  xhr.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote>
<p>同源策略：协议、域名、端口完全相同</p>
<p>违反同源即跨域</p>
</blockquote>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><blockquote>
<p>JSONP利用了<code>script标签</code>天生不受跨域限制的漏洞，不过只能使用<code>get</code>方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.src = <span class="string">&#x27;跨域URL链接&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure>



<p>express后端代码：获取callback参数，执行callback对应的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/jsonp-serverInput&#x27;</span>,<span class="function">(<span class="params">Request,Response</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    exist: <span class="number">1</span>,</span><br><span class="line">    msg:<span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="built_in">console</span>.log(Request.query)</span><br><span class="line">  <span class="keyword">let</span> callbackName = Request.query.callback</span><br><span class="line">  Response.send(<span class="string">`<span class="subst">$&#123;callbackName&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote>
<p>因为跨域限制就是因为响应头</p>
<p>所以只需要<code>服务器</code>设置Access-Control-Allow-Origin响应头即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>) <span class="comment">// 允许所有非同源</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="string">&quot;*&quot;</span>) <span class="comment">// 允许所有头部字段</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>,<span class="string">&quot;*&quot;</span>) <span class="comment">// 允许所有方法</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>vscodeShortCut和snippet</title>
    <url>/2021/03/18/vscodeShortCut%E5%92%8Csnippet/</url>
    <content><![CDATA[<h1 id="vscodeShortCut和snippet"><a href="#vscodeShortCut和snippet" class="headerlink" title="vscodeShortCut和snippet"></a>vscodeShortCut和snippet</h1><h2 id="ShortCut快捷键"><a href="#ShortCut快捷键" class="headerlink" title="ShortCut快捷键"></a>ShortCut快捷键</h2><blockquote>
<p>前面的为vscode默认绑定，后面为个人修改绑定</p>
</blockquote>
<blockquote>
<p>开关</p>
</blockquote>
<ul>
<li>打开文件：’Ctrl+O’</li>
<li>关闭窗口：’Ctrl+W’</li>
<li>关闭所有窗口：’Ctrl+K’</li>
<li>关闭右侧所有窗口：’Ctrl+L’</li>
<li>最近打开文件：’Ctrl+E’</li>
<li>搜索打开文件：’Ctrl+T’</li>
<li>打开工作区：’Ctrl+Shift+O’</li>
<li>新建窗口：’Ctrl+Shift+N’</li>
<li>打开左侧栏聚焦文件：’Shift+Alt+R’==&gt;’Ctrl+R’</li>
<li>打开此页面的终端：’Ctrl+Shift+C’</li>
<li>重新打开刚刚关闭的页面：’Ctrl+Shift+T’</li>
</ul>
<hr>
<blockquote>
<p>处理代码</p>
</blockquote>
<ul>
<li>触发建议：’Ctrl+i’</li>
<li>断点：’F9’</li>
<li>格式化文档：’Shift+Alt+F’==&gt;’Ctrl+Shift+W’</li>
<li>后退：’Alt+左箭头’</li>
<li>前进：’Alt+右箭头’</li>
<li>块注释：’Shift+Alt+A’</li>
<li>折叠：’Ctrl+K Ctrl+L’==&gt;’Ctrl+Shift+Z’</li>
<li>放大/缩小：’ctrl+”=或-“‘</li>
<li>拆分编辑器：’Ctrl+”/“‘</li>
<li>显示/隐藏下方工作台：’Ctrl+J’</li>
</ul>
<hr>
<blockquote>
<p>键盘操作代码</p>
</blockquote>
<ul>
<li><p>移动光标到头部/结尾：’Ctrl+Home/End’</p>
</li>
<li><p>向上/下复制行：’Shift+Alt+上箭头/下箭头’</p>
</li>
<li><p>向上/下移动行：’Alt+上箭头/下箭头’</p>
</li>
<li><p>删除整行：’Ctrl+Shift+K’==&gt;’Ctrl+D’</p>
</li>
<li><p>在上面插入行：’Ctrl+Shift+Enter’</p>
</li>
<li><p>在下面插入行：’Ctrl+Enter’</p>
</li>
<li><p>在上/下添加光标：’Ctrl+Alt+上箭头/下箭头’，多行操作</p>
</li>
<li><p>转到括号：’Ctrl+Shift+”\“‘</p>
</li>
<li><p>批量处理相同字符串：’Ctrl+F2’</p>
</li>
</ul>
<blockquote>
<p>剩余便利的快捷键</p>
</blockquote>
<ul>
<li>剪切：’Shift+Delete’</li>
</ul>
<h2 id="Snippet代码片段"><a href="#Snippet代码片段" class="headerlink" title="Snippet代码片段"></a>Snippet代码片段</h2><blockquote>
<p>个人的Snippet，因为觉得别人的不习惯于是都是自己做的</p>
<p>快捷创建Snippet网站：<a href="https://snippet-generator.app/">https://snippet-generator.app</a></p>
</blockquote>
<blockquote>
<p>HTML</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;jf&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;jf&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;&lt;html&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;body&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;/body&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    $&#123;1:content&#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;/script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Build for fast js test&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;---&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;console.log(&#x27;----------------------&#x27;)&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;---&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;canvas fast init&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;cf&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;&lt;html&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;head&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;style&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;      body &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        text-align: center;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        padding-top: 20px;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;      canvas &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        box-shadow: 0 0 10px #333;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        margin: 0 auto;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;/style&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;      /** @type &#123;HTMLCanvasElement&#125; */&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        function draw() &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;          var canvas = document.getElementById(&#x27;canvas&#x27;)&quot;</span>,</span><br><span class="line">			<span class="string">&quot;          if (canvas.getContext) &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;            var ctx = canvas.getContext(&#x27;2d&#x27;)&quot;</span>,</span><br><span class="line">			<span class="string">&quot;            $&#123;1:content&#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;          &#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;        &#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;/script&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;/head&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;body onload=\&quot;draw()\&quot;&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    &lt;canvas id=\&quot;canvas\&quot; width=\&quot;800\&quot; height=\&quot;600\&quot;&gt;&lt;/canvas&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  &lt;/body&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;canvas fast init&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;import&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;import&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;import $&#123;1:module&#125; from &#x27;./$&#123;1:module&#125;&#x27;&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;import&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>JavaScript</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;editor.snippetSuggestions&quot;</span>:<span class="string">&quot;top&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;log&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;console.log($1)&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;function&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;fun&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;function $&#123;1:name&#125;() &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;newError&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;tne&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;throw new Error($&#123;1:Error&#125;)&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;newError&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;dw&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;dw&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;document.writeln($&#123;1:content&#125;)&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;dw&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;lw&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;lw&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;let $&#123;1:name&#125; = function () &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;  $&#123;2:content&#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;lw&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;console.log Vaiable and &#x27;name&#x27;&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;lt&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;console.log(&#x27;$&#123;1:variable&#125;&#x27;,$&#123;1:variable&#125;)&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;console.log Vaiable and &#x27;name&#x27;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Vue</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;log&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;console.log(&#x27;$1&#x27;);&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$2&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Create vue template&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  &lt;div class=\&quot;\&quot;&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;    content&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  &lt;/div&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  name: &#x27;&#x27;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  components: &#123;&#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  props: [],&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  data () &#123;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;    return &#123;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;    &#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  &#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  computed: &#123;&#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  watch: &#123;&#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  created () &#123;&#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  mounted () &#123;&#125;,&quot;</span>,</span><br><span class="line">                <span class="string">&quot;  methods: &#123;&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Create vue template&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>敏捷软件开发</title>
    <url>/2021/03/03/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h1><h2 id="敏捷实践"><a href="#敏捷实践" class="headerlink" title="敏捷实践"></a>敏捷实践</h2><h3 id="敏捷联盟"><a href="#敏捷联盟" class="headerlink" title="敏捷联盟"></a>敏捷联盟</h3><blockquote>
<p>敏捷联盟宣言：</p>
<p><code>个体和交互</code>胜过过程和工具</p>
<p><code>可以工作的软件</code>胜过面面俱到的文档</p>
<p><code>客户合作</code>胜过合同谈判</p>
<p><code>响应变化</code>胜过遵循计划</p>
</blockquote>
<h4 id="个体和交互胜过过程和工具"><a href="#个体和交互胜过过程和工具" class="headerlink" title="个体和交互胜过过程和工具"></a>个体和交互胜过过程和工具</h4><blockquote>
<p>首先应该致力于团队的凝聚力，一流的团队里的人员可能能力不是一流的，但是合作能力绝对是一流的</p>
<p>工具不是首要的，先从小工具试起，等到证明需要更大工具的时候再替换，因为更大的工具可能会带来更多的麻烦</p>
</blockquote>
<h4 id="可以工作的软件胜过面面俱到的文档"><a href="#可以工作的软件胜过面面俱到的文档" class="headerlink" title="可以工作的软件胜过面面俱到的文档"></a>可以工作的软件胜过面面俱到的文档</h4><blockquote>
<p>过多的文档比过少的文档更糟糕，这会花费大量时间</p>
<p>在给新成员传授知识时，最好的两份文档是代码和团队：代码没有二义性，而与团队成员交流的过程中，可以增进交互</p>
</blockquote>
<h4 id="客户合作胜过合同谈判"><a href="#客户合作胜过合同谈判" class="headerlink" title="客户合作胜过合同谈判"></a>客户合作胜过合同谈判</h4><blockquote>
<p>成功的项目需要有序、频繁的客户反馈。 不是依赖于合同或者关于工作的陈述</p>
<p>如：项目开发周期内，固定每周几把软件提交给客户，过几天客户会发来一份软件变更列表，开发者把这些变更放在一起排优先级，并安排在接下来的工作里</p>
</blockquote>
<h4 id="响应变化胜过遵循计划"><a href="#响应变化胜过遵循计划" class="headerlink" title="响应变化胜过遵循计划"></a>响应变化胜过遵循计划</h4><blockquote>
<p>计划不能考虑的过远</p>
<p>更好的做法是：为下两周做详细计划，为下三个月做粗略的计划，再以后就做极为粗糙的计划</p>
</blockquote>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><blockquote>
<p>从上述价值观引出下面12条原则</p>
</blockquote>
<ol>
<li>我们最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意</li>
<li>即使到了开发后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势</li>
<li>经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好</li>
<li>在整个项目开发期间，业务人员和开发人员必须天天都在一起工作</li>
<li>围绕被激励起来的个人来构建项目，给他们提供所需要的环境和支持，并且信任他们能够完成工作</li>
<li>在团队内部，最具有效果并且富有效率的传递信息的方法就是面对面交谈</li>
<li>工作的软件是首要的进度度量标准</li>
<li>敏捷过程提纲可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度</li>
<li>不断地关注优秀的技能和好的设计会增强敏捷能力</li>
<li>简单–使未完成的工作最大化的艺术–是根本的</li>
<li>最好的架构、需求和设计出自于自组织的团队</li>
<li>每隔一段时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行调整</li>
</ol>
<h2 id="极限编程概述"><a href="#极限编程概述" class="headerlink" title="极限编程概述"></a>极限编程概述</h2><blockquote>
<p>极限编程(XP)是敏捷方法中最著名的一个，它由一系列简单缺互相依赖的实践组成</p>
</blockquote>
<h3 id="客户作为团队成员"><a href="#客户作为团队成员" class="headerlink" title="客户作为团队成员"></a>客户作为团队成员</h3><blockquote>
<p>客户可能是用户团体委派的代表，也可能是支付开发费用的人。无论是谁，他们都是能够和团队一起工作的团队成员，且距离不能太远，100米内尚佳。如果确实无法和客户在一起工作，就去寻找能够在一起工作、愿意并能代替真正客户的人</p>
</blockquote>
<h3 id="用户素材"><a href="#用户素材" class="headerlink" title="用户素材"></a>用户素材</h3><blockquote>
<p>根据跟客户谈话的内容来增加用户素材，即对需求的细节，这些放在索引卡片上以供想起</p>
</blockquote>
<h3 id="短交付周期"><a href="#短交付周期" class="headerlink" title="短交付周期"></a>短交付周期</h3><blockquote>
<p>XP项目<code>每两周</code>交付一次可以工作的软件</p>
</blockquote>
<h4 id="迭代计划"><a href="#迭代计划" class="headerlink" title="迭代计划"></a>迭代计划</h4><blockquote>
<p>每次迭代通常耗时<code>两周</code>。这次<code>迭代的内容不一定加入到产品中</code>，它由客户根据开发人员确定的预算而选择的一些<code>用户素材</code>组成，只要估算成本不超过预算，客户就可以为本次迭代选择任意数量的用户素材。</p>
<p>一旦迭代开始，<code>客户就同意不再修改</code>当次迭代中用户素材的定义和优先级别，开发人员可以拆解并自定义优先级来实现这些任务</p>
</blockquote>
<h4 id="发布计划"><a href="#发布计划" class="headerlink" title="发布计划"></a>发布计划</h4><blockquote>
<p>XP团队通常会创建一个计划来规划随后大约6次迭代的内容，这就是所谓的发布计划，一次发布通常需要<code>3个月</code>事件，通常<code>此次交付会被加入到产品中</code>。发布计划是由一组客户根据开发人员给出的预算所选择的、排好优先级别的用户素材组成</p>
<p>发布计划不是一成不变的，<code>客户可以随时改变</code>计划的内容</p>
</blockquote>
<h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><blockquote>
<p>同样可以通过客户指定的验收测试形式来获取用户素材，用户素材的验收测试是在就要实现该用户素材之前或实现该用户素材的同时进行编写的，即先写测试用例再开发，遵循TDD</p>
</blockquote>
<h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><blockquote>
<p>所有的产品代码都是由结对的程序员使用同一台电脑完成，一位输入代码，另一位观察输入的代码并寻找其中的错误和可以改进的地方</p>
<p>结对的关系每天至少要改变一次，也就是说每个程序员每天在至少两个不同的结对中工作</p>
</blockquote>
<h3 id="测试驱动的开发方法"><a href="#测试驱动的开发方法" class="headerlink" title="测试驱动的开发方法"></a>测试驱动的开发方法</h3><blockquote>
<p>为了使测试用例通过而编写代码时，这样的代码就被定义为可测试的代码。这样做会使开发人员去解耦各个模块。</p>
</blockquote>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><blockquote>
<p>程序员会每天多次拆出拆入他们的代码进行集成</p>
<p>故而XP团队每天会进行多次系统构建，他们会重新创建整个系统</p>
</blockquote>
<h3 id="可持续的开发速度"><a href="#可持续的开发速度" class="headerlink" title="可持续的开发速度"></a>可持续的开发速度</h3><blockquote>
<p>团队必须要有意识地保持稳定、适中的速度</p>
<p>XP的规则是不允许团队加班工作，在版本发布前的一个星期是这个规则的惟一例外</p>
</blockquote>
<h3 id="开放的工作空间"><a href="#开放的工作空间" class="headerlink" title="开放的工作空间"></a>开放的工作空间</h3><blockquote>
<p>团队在一个开放的房间中一起工作，房间中有一些桌子，每张桌子上摆放了两到三台工作站，每台工作站前有给结对编程人员预备的两把椅子，墙壁上挂满了状态图标、任务明细表、UML图等等</p>
</blockquote>
<h3 id="简单的设计"><a href="#简单的设计" class="headerlink" title="简单的设计"></a>简单的设计</h3><blockquote>
<p>XP团队仅仅关注于计划在本次迭代中要完成的用户素材</p>
<p>这意味着XP团队的工作可能不会从基础结构开始，可能不会先去选择使用数据库或者中间件</p>
<p>只有当出现一个用户素材迫切需要基础结构时，才会引入该结构基础</p>
</blockquote>
<h4 id="考虑能够工作的最简单的事情"><a href="#考虑能够工作的最简单的事情" class="headerlink" title="考虑能够工作的最简单的事情"></a>考虑能够工作的最简单的事情</h4><blockquote>
<p>XP团队总是尽可能寻找能实现当前用户素材的最简单的设计</p>
<p>能够用平面文件，就不用数据库…</p>
</blockquote>
<h4 id="你将不需要它"><a href="#你将不需要它" class="headerlink" title="你将不需要它"></a>你将不需要它</h4><blockquote>
<p>如果在确实需要基础结构前拒绝引入它，会发生什么呢？XP团队会对此进行认真的思考</p>
<p>只有在有证据表明现在引入这些基础结构比继续等待更加合算时，团队才会引入这些基础结构</p>
</blockquote>
<h4 id="一次，并且只有一次"><a href="#一次，并且只有一次" class="headerlink" title="一次，并且只有一次"></a>一次，并且只有一次</h4><blockquote>
<p>极限编程者不能容忍重复的代码</p>
</blockquote>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><blockquote>
<p>XP团队通过经常性的代码重构来扭转代码结构的退化</p>
<p>重构是持续进行的，不是在项目结束时、发布版本时、迭代结束时、甚至每天快下班时</p>
<p>重构是每隔一个或半个小时就要做的事情，以保证代码整洁并富有表现力</p>
</blockquote>
<h3 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h3><blockquote>
<p>用隐喻来比喻整个系统</p>
</blockquote>
<h1 id="敏捷设计"><a href="#敏捷设计" class="headerlink" title="敏捷设计"></a>敏捷设计</h1><blockquote>
<p>面向对象设计原则：</p>
<ol>
<li>单一职责原则(SRP)</li>
<li>开放–封闭原则(OCP)</li>
<li>Liskov替换原则(LSP)</li>
<li>依赖倒置原则(DIP)</li>
<li>接口隔离原则(ISP)</li>
</ol>
</blockquote>
<blockquote>
<p>注：以下实现只是思想简单实现，深入请看各具体设计模式</p>
</blockquote>
<h2 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则(SRP)"></a>单一职责原则(SRP)</h2><blockquote>
<p>就一个类来说，应该<code>仅有一个</code>引起它变化的原因</p>
</blockquote>
<h3 id="什么是职责"><a href="#什么是职责" class="headerlink" title="什么是职责"></a>什么是职责</h3><blockquote>
<p>在SRP中，我们把职责定义为<code>变化的原因</code>，如果你能够想到多于一个动机去改变一个类，那么它的职责就多于一个</p>
<p>只有有征兆会发生这种变化时才有意义，否则去应用SRP或者其他什么原则都不明智</p>
</blockquote>
<p>何时分离？</p>
<ul>
<li>当应用程序的变化导致两个职责不同时变化,这时需要分离</li>
<li>当应用程序的变化总是导致这两个职责同时变化，就不必分离它。此时分离它还会使复杂性增加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 违反SRP</span></span><br><span class="line"><span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;计算面积&#x27;</span>) <span class="comment">// 职责一</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;绘制图形&#x27;</span>) <span class="comment">// 职责二</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守SRP之拆分职责</span></span><br><span class="line"><span class="keyword">let</span> getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 职责一</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;计算面积&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> drawSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 职责二</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;绘制图形&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> drawArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 统一调用</span></span><br><span class="line">  getArea()</span><br><span class="line">  drawSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守SRP之不用拆分</span></span><br><span class="line"><span class="keyword">let</span> CT = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 转发器的两个职责总是同时发生变化</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;收到信号&#x27;</span>) <span class="comment">// 职责一</span></span><br><span class="line">  <span class="comment">// 真实的转发器还有收到信号放大变频的过程，可以通过开放封闭原则的钩子来进行隔离变化</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;转发信号&#x27;</span>) <span class="comment">// 职责二</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="开放–封闭原则-OCP"><a href="#开放–封闭原则-OCP" class="headerlink" title="开放–封闭原则(OCP)"></a>开放–封闭原则(OCP)</h2><blockquote>
<p>软件实体(类、模块、函数等)应该是可以扩展的，但是不可修改</p>
<p>因为一旦修改会造成一系列连锁反应</p>
</blockquote>
<h3 id="关键是抽象"><a href="#关键是抽象" class="headerlink" title="关键是抽象"></a>关键是抽象</h3><blockquote>
<p>在C++、Java等OOPL(面向对象编程语言)中，可以创建出抽象基类作为这个抽象体。</p>
<p>通过这个抽象体的派生来扩展这个模块而不用修改这个抽象体</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象</span></span><br><span class="line"><span class="keyword">let</span> Shape = &#123;</span><br><span class="line">  draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;draw&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 细节</span></span><br><span class="line"><span class="keyword">let</span> Square = Shape <span class="comment">// 细节依赖抽象</span></span><br><span class="line"><span class="keyword">let</span> Circle = Shape</span><br><span class="line"><span class="comment">// 他们二者都拥有了Shape方法</span></span><br><span class="line"><span class="built_in">console</span>.log(Square)</span><br><span class="line"><span class="built_in">console</span>.log(Circle)</span><br></pre></td></tr></table></figure>



<h3 id="预测变化和“贴切的”结构"><a href="#预测变化和“贴切的”结构" class="headerlink" title="预测变化和“贴切的”结构"></a>预测变化和“贴切的”结构</h3><blockquote>
<p>因为无论一个模块多”封闭”，都会有无法封闭的变化，比如上面的代码，当我们要决定Shape里面draw具体细节，这时就无法封闭了，除非我们写死。所以我们需要找出最有可能<code>发生变化</code>的地方，然后再构造<code>抽象</code>来<code>隔离变化</code>。</p>
<p>这也引出了OCP出现的场景，隔离变化的地方，将不变的地方封闭。</p>
</blockquote>
<h3 id="放置钩子-hook"><a href="#放置钩子-hook" class="headerlink" title="放置钩子(hook)"></a>放置钩子(hook)</h3><blockquote>
<p>在以前，开发者往往会自主选择在可能发生变化的地方放置钩子。</p>
<p>然而事实证明，这只会让我们承受不必要的复杂性。</p>
<p>所以应该等到<code>确实需要那些抽象的时候再放钩子进去</code></p>
</blockquote>
<p>在js里面可以通过throw Error的方式来强制重写钩子内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Shape = &#123;</span><br><span class="line">  draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;顺时针绘制&#x27;) // 写死情况</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Square = Shape</span><br><span class="line"><span class="keyword">let</span> Circle = Shape</span><br><span class="line"><span class="comment">// Square.draw() // 报错</span></span><br><span class="line">Square.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 重写方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;逆时针绘制&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Square.draw()</span><br></pre></td></tr></table></figure>



<h2 id="Liskov替换原则-LSP"><a href="#Liskov替换原则-LSP" class="headerlink" title="Liskov替换原则(LSP)"></a>Liskov替换原则(LSP)</h2><blockquote>
<p>简单来说，LSP原则就是父类必须是子类共有的部分，不能超出</p>
</blockquote>
<p>书中的例子用js重写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 违反LSP</span></span><br><span class="line"><span class="keyword">let</span> Rectangle = &#123; <span class="comment">// 矩形</span></span><br><span class="line">  height: <span class="literal">undefined</span>,</span><br><span class="line">  width: <span class="literal">undefined</span>,</span><br><span class="line">  getWidth: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  getHeight: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Square = Rectangle <span class="comment">// 正方形</span></span><br><span class="line">Square.getHeight = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 需要重载父类</span></span><br><span class="line">  <span class="keyword">return</span> width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守LSP</span></span><br><span class="line"><span class="keyword">let</span> Quadrangle = &#123; <span class="comment">// 四边形，只取子类共有的部分</span></span><br><span class="line">  width: <span class="literal">undefined</span>,</span><br><span class="line">  getWidth:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Rectangle = Quadrangle <span class="comment">// 通过添加方法而不是重载</span></span><br><span class="line">Rectangle.getHeight = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> Square = Quadrangle <span class="comment">// 正方形</span></span><br></pre></td></tr></table></figure>





<h2 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则(DIP)"></a>依赖倒置原则(DIP)</h2><blockquote>
<p>这里倒置的意思是：高层不再依赖底层，抽象不再依赖实现，而是如下</p>
</blockquote>
<blockquote>
<ul>
<li>高层(业务逻辑)不应该依赖于底层(原子逻辑)，两者都应该依赖抽象(接口或抽象类)</li>
<li>抽象不应该依赖细节(实现类)，细节应该依赖抽象</li>
</ul>
</blockquote>
<p><img src="/.com//1.jpg"></p>
<h3 id="层次化"><a href="#层次化" class="headerlink" title="层次化"></a>层次化</h3><blockquote>
<p>高层通过依赖抽象服务接口来获取服务，底层通过依赖高层声明的抽象接口来实现服务</p>
</blockquote>
<p><img src="/.com//2.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 违反DIP</span></span><br><span class="line"><span class="keyword">let</span> peopleBreakDIP = &#123;</span><br><span class="line">  eatShit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 高层依赖底层，吃的必须是shit</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;当回老八&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(peopleBreakDIP.eatShit())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守DIP</span></span><br><span class="line"><span class="keyword">let</span> peopleObeyDIP = &#123;</span><br><span class="line">  eatSomething: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 高层依赖抽象，吃啥都可以</span></span><br><span class="line">    <span class="comment">// 吃啥好</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">peopleObeyDIP.eatSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 底层实现高层抽象,还是同一个撤硕</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;同一个撤硕&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(peopleObeyDIP.eatSomething())</span><br></pre></td></tr></table></figure>



<h2 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则(ISP)"></a>接口隔离原则(ISP)</h2><blockquote>
<p>简单来说：就是当有的类继承接口后发现部分方法不需要，这时就需要给接口瘦身，去掉部分不需要的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 违反ISP</span></span><br><span class="line"><span class="keyword">let</span> eatBreakISP = &#123;</span><br><span class="line">  <span class="comment">// 这里的eatShit/eatRice类比两个接口</span></span><br><span class="line">  eatShit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;当回老八&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  eatRice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;来点米饭&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> people = &#123;&#125; <span class="comment">// 这里people并不想继承所有的方法</span></span><br><span class="line">people.eat = eat</span><br><span class="line"><span class="keyword">let</span> oldEight = &#123;&#125;</span><br><span class="line">oldEight.eat = eat</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵守ISP</span></span><br><span class="line"><span class="keyword">let</span> eatObeyISP = &#123;</span><br><span class="line">  eatRice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;来点米饭&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> people = &#123;&#125; <span class="comment">// people继承他和OldEight同时可以吃的</span></span><br><span class="line">people.eat = eat</span><br><span class="line"><span class="keyword">let</span> oldEight = &#123;&#125;</span><br><span class="line">oldEight.eat = eat</span><br><span class="line">oldEight.eat.eatShit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// oldEight自创美食</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;同一个撤硕&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="薪水支付案例研究"><a href="#薪水支付案例研究" class="headerlink" title="薪水支付案例研究"></a>薪水支付案例研究</h1><h2 id="COMMAND-命令-模式和ACTIVE-OBJECT-主动对象-模式"><a href="#COMMAND-命令-模式和ACTIVE-OBJECT-主动对象-模式" class="headerlink" title="COMMAND(命令)模式和ACTIVE OBJECT(主动对象)模式"></a>COMMAND(命令)模式和ACTIVE OBJECT(主动对象)模式</h2><blockquote>
<p>Command模式将高层与底层接口，他们共同依赖向Command接口</p>
<p>高层仅调用Command的do()接口即可，底层仅实现Command的do()即可</p>
<p>Active Object配合Command使用多线程</p>
</blockquote>
<p><img src="/.com//3.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Command = &#123; <span class="comment">// 命令</span></span><br><span class="line">  commandList: [], <span class="comment">// 抽象指令列表</span></span><br><span class="line">  insert: <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>) </span>&#123; <span class="comment">// 添加指令</span></span><br><span class="line">    <span class="built_in">this</span>.commandList.push(fun)</span><br><span class="line">  &#125;,</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 运行所有指令</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.commandList.length; i++) &#123;</span><br><span class="line">      <span class="built_in">this</span>.commandList[i].execute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> commandDraw = &#123; <span class="comment">// 原子指令</span></span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;draw&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> commandArea = &#123; <span class="comment">// 原子指令</span></span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;area&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Command.insert(commandDraw)</span><br><span class="line">Command.insert(commandArea)</span><br><span class="line">Command.execute()</span><br></pre></td></tr></table></figure>



<h2 id="TEMPLATE-METHOD-模板方法-模式与STRATEGY-策略-模式：继承与委托"><a href="#TEMPLATE-METHOD-模板方法-模式与STRATEGY-策略-模式：继承与委托" class="headerlink" title="TEMPLATE METHOD(模板方法)模式与STRATEGY(策略)模式：继承与委托"></a>TEMPLATE METHOD(模板方法)模式与STRATEGY(策略)模式：继承与委托</h2><blockquote>
<p>继承容易被过度使用且代价高昂，故推荐优先使用对象组合</p>
<p>我们常常使用组合/委托来替代它</p>
<p>Template Method使用<code>继承</code>解决问题，而Strategy使用<code>委托</code></p>
</blockquote>
<h3 id="Template-Method-模板方法模式"><a href="#Template-Method-模板方法模式" class="headerlink" title="Template Method(模板方法模式)"></a>Template Method(模板方法模式)</h3><blockquote>
<p>这里沿用了DIP里面的代码</p>
<p>可以看到这里放置了隔离变化的钩子(hook)</p>
<p>Template Method通过对父类方法的<code>重写</code>来隔离变化</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Shape = &#123;</span><br><span class="line">  draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;顺时针绘制&#x27;) // 写死情况</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Square = Shape</span><br><span class="line"><span class="keyword">let</span> Circle = Shape</span><br><span class="line"><span class="comment">// Square.draw() // 报错</span></span><br><span class="line">Square.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 重写方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;逆时针绘制&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Square.draw()</span><br></pre></td></tr></table></figure>



<h3 id="Strategy-策略模式"><a href="#Strategy-策略模式" class="headerlink" title="Strategy(策略模式)"></a>Strategy(策略模式)</h3><blockquote>
<p>策略模式<code>提前写好</code>对应策略，通过<code>委托</code>例如Opera<code>对象</code>来<code>获取对应操作</code></p>
<p>tip:在实际开发中可以通过策略在同一个策略函数中选择是增(add)还是改(update)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Opera = &#123; <span class="comment">// 委托对象，操作</span></span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params">n1,n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1+n2</span><br><span class="line">  &#125;,</span><br><span class="line">  sub: <span class="function"><span class="keyword">function</span> (<span class="params">n1,n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1-n2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(Opera.add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">document</span>.writeln(Opera.sub(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>



<h2 id="FACADE-外观-模式和MEDIATOR-中介者-模式"><a href="#FACADE-外观-模式和MEDIATOR-中介者-模式" class="headerlink" title="FACADE(外观)模式和MEDIATOR(中介者)模式"></a>FACADE(外观)模式和MEDIATOR(中介者)模式</h2><blockquote>
<p>这两个模式都将某种策略施加到另外一组对象上</p>
<p>FACADE模式从上面施加，MEDIATOR则从下面施加</p>
<p>FACADE模式是明显且受限的，MEDIATOR是不明显且不受限的</p>
</blockquote>
<h3 id="FACADE模式"><a href="#FACADE模式" class="headerlink" title="FACADE模式"></a>FACADE模式</h3><blockquote>
<p>简单来说就是提供一个统一接口对外，就像服务员一样。</p>
<p>在js里面就一个接口对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 照着java代码实现，对js来说脱裤子放屁</span></span><br><span class="line"><span class="keyword">let</span> Shape = &#123;</span><br><span class="line">  draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Rectangle = &#123;&#125;</span><br><span class="line">Rectangle.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;画矩形&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Square = &#123;&#125;</span><br><span class="line">Square.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;画正方形&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ShapeMaker = &#123; </span><br><span class="line">  drawRectangle: Rectangle.draw,</span><br><span class="line">  drawSquare: Square.draw</span><br><span class="line">&#125;</span><br><span class="line">ShapeMaker.drawRectangle()</span><br><span class="line">ShapeMaker.drawSquare()</span><br><span class="line"></span><br><span class="line"><span class="comment">// js实现</span></span><br><span class="line"><span class="keyword">let</span> ShapeFacade = &#123;</span><br><span class="line">  drawRectangle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;画矩形&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  drawSquare: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;画正方形&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ShapeFacade.drawRectangle()</span><br><span class="line">ShapeFacade.drawSquare()</span><br></pre></td></tr></table></figure>



<h3 id="MEDIATOR模式"><a href="#MEDIATOR模式" class="headerlink" title="MEDIATOR模式"></a>MEDIATOR模式</h3><blockquote>
<p>中介者同样也施加策略，不过外观模式是以明显且受限的方式，而中介者则是以隐藏且不受限的方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ChatRoom = &#123; <span class="comment">// 中介者</span></span><br><span class="line">  showMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> User = &#123;</span><br><span class="line">  name: <span class="literal">undefined</span>,</span><br><span class="line">  sendMessage: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    ChatRoom.showMessage(msg+<span class="built_in">this</span>.name) <span class="comment">// 调用中介者的方法,客户端看不到这个方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SINGLETON-单例-模式和MONOSTATE-单态-模式"><a href="#SINGLETON-单例-模式和MONOSTATE-单态-模式" class="headerlink" title="SINGLETON(单例)模式和MONOSTATE(单态)模式"></a>SINGLETON(单例)模式和MONOSTATE(单态)模式</h2><h3 id="SINGLETON"><a href="#SINGLETON" class="headerlink" title="SINGLETON"></a>SINGLETON</h3><blockquote>
<p>单例模式，简单来说就是全局只有一个，可以理解为全局变量</p>
<p>单例模式的好处之一就是可以延迟求值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js中声明全局变量就是单例的</span></span><br><span class="line"><span class="keyword">var</span> singleTon = <span class="string">&#x27;single&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="MONOSTATE"><a href="#MONOSTATE" class="headerlink" title="MONOSTATE"></a>MONOSTATE</h3><blockquote>
<p>看状态模式即可</p>
</blockquote>
<h1 id="打包薪水支付系统"><a href="#打包薪水支付系统" class="headerlink" title="打包薪水支付系统"></a>打包薪水支付系统</h1><h2 id="粒度：包的内聚性原则"><a href="#粒度：包的内聚性原则" class="headerlink" title="粒度：包的内聚性原则"></a>粒度：包的内聚性原则</h2><h3 id="共同重用原则"><a href="#共同重用原则" class="headerlink" title="共同重用原则"></a>共同重用原则</h3><blockquote>
<p>一个包中的所有类应该是共同重用的。</p>
<p>判断是否应该把类放在同一个包中：如果重用了包中的一个类，那么就要重用包中所有的类</p>
</blockquote>
<h3 id="共同封闭原则"><a href="#共同封闭原则" class="headerlink" title="共同封闭原则"></a>共同封闭原则</h3><blockquote>
<p>包中的所有类对同一类的变化应该是共同封闭的</p>
</blockquote>
<h2 id="稳定性：包的耦合性原则"><a href="#稳定性：包的耦合性原则" class="headerlink" title="稳定性：包的耦合性原则"></a>稳定性：包的耦合性原则</h2><blockquote>
<p>在包的依赖图中不允许存在环</p>
</blockquote>
<blockquote>
<p>经常会出现修改依赖的情况，所以有以下解决方式</p>
</blockquote>
<h3 id="每周构建"><a href="#每周构建" class="headerlink" title="每周构建"></a>每周构建</h3><blockquote>
<p>加快构建频率</p>
</blockquote>
<h3 id="消除依赖环"><a href="#消除依赖环" class="headerlink" title="消除依赖环"></a>消除依赖环</h3><blockquote>
<p>给依赖定版本</p>
</blockquote>
<h3 id="解除依赖环"><a href="#解除依赖环" class="headerlink" title="解除依赖环"></a>解除依赖环</h3><blockquote>
<p>使用依赖倒置原则</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道</title>
    <url>/2021/03/02/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h1 id="代码整洁之道"><a href="#代码整洁之道" class="headerlink" title="代码整洁之道"></a>代码整洁之道</h1><blockquote>
<p>代码质量与其整洁程序成正比</p>
<p>糟糕的代码想做太多事，意图混乱、目的含混。整洁的代码力求集中，每个函数、类、模块贯注于一事。</p>
</blockquote>
<h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><blockquote>
<p>为了提高易读性，有意义的命名是必须的</p>
</blockquote>
<h3 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h3><blockquote>
<p>是否是一个好的命名标准：<strong>如果名称需要注释来补充，那就不算名副其实</strong>：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 糟糕的命名</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">array,num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; array.length ;)&#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] === num) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(foo(array,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的例子</span></span><br><span class="line"><span class="keyword">let</span> isNumberExist = <span class="function"><span class="keyword">function</span> (<span class="params">numArray,checkNum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> flag = <span class="number">0</span> ; flag &lt; numArray.length ;)&#123;</span><br><span class="line">    <span class="keyword">if</span> (numArray[flag++] === checkNum) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(isNumberExist(array,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好的例子,将是否等于的判断条件用函数表示出来，更易读</span></span><br><span class="line"><span class="keyword">let</span> isEqual = <span class="function"><span class="keyword">function</span> (<span class="params">checkNumFirst, checkNumSecond</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (checkNumFirst === checkNumSecond) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isNumberExist = <span class="function"><span class="keyword">function</span> (<span class="params">numArray,checkNum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> flag = <span class="number">0</span> ; flag &lt; numArray.length ;)&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEqual(numArray[flag++],checkNum)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(isNumberExist(array,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>



<h3 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h3><ol>
<li>别用类似accountList来指代一组账号：除非它真的是List类型，否则使用accountGroup，甚至是accounts更好些。即命名尾巴应该对应类型，否则不应该使用，正确使用let accountArray = []</li>
<li>提防使用不同之处较小的名称：如XYZControllerEffect和XYZContentEffect</li>
<li>提防小写l和大写O：因为它们看起来很像1和0</li>
</ol>
<h3 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h3><p>数字系列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> copyChars = <span class="function"><span class="keyword">function</span> (<span class="params">a1,a2</span>) </span>&#123; <span class="comment">// 糟糕的例子</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; a1.length ; i++) &#123;</span><br><span class="line">    a2[i] = a1[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copyChars = <span class="function"><span class="keyword">function</span> (<span class="params">source,destination</span>) </span>&#123; <span class="comment">// 好的例子</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; source.length ; i++) &#123;</span><br><span class="line">    destination[i] = source[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>废话</p>
<blockquote>
<p>假如有productInfo、productData、theProduct…你能区分出它们的区别吗？</p>
<p>如果不能，那就不是好的命名方式</p>
</blockquote>
<h3 id="使用读的出来的名称"><a href="#使用读的出来的名称" class="headerlink" title="使用读的出来的名称"></a>使用读的出来的名称</h3><blockquote>
<p>即避免自创单词缩写，如下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 糟糕的例子</span></span><br><span class="line"><span class="keyword">let</span> genymdhms</span><br><span class="line"><span class="keyword">let</span> modymdhms</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的例子</span></span><br><span class="line"><span class="keyword">let</span> generationTimestamp</span><br><span class="line"><span class="keyword">let</span> modificationTimestamp</span><br></pre></td></tr></table></figure>



<h3 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h3><blockquote>
<p>单字母名称仅用于短方法中的本地变量，名称长短应与其作用域大小相对应，若变量或常量可能在代码中多处使用，应赋予其便于搜索的名称</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 短方法:单字母变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">34</span> ; i++) &#123;</span><br><span class="line">    s += t[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用</span></span><br><span class="line"><span class="keyword">let</span> realDaysPerIdealDay = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> WORK_DAYS_PER_WEEK = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; WORK_DAYS_PER_WEEK ; i++)&#123;</span><br><span class="line">    s += t[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="避免思维映射"><a href="#避免思维映射" class="headerlink" title="避免思维映射"></a>避免思维映射</h3><blockquote>
<p>避免让读者在脑中把你的名称译为他们熟知的名称：即命名越简单越好，不要用来炫耀自己的知识，也不要玩脑筋急转弯</p>
</blockquote>
<h3 id="类名-对象名"><a href="#类名-对象名" class="headerlink" title="类名/对象名"></a>类名/对象名</h3><blockquote>
<p>类名/对象名应该是名词/名词短语而不是动词</p>
</blockquote>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><blockquote>
<p>方法名应当是动词或动词短语</p>
</blockquote>
<h3 id="每个概念对应一个词"><a href="#每个概念对应一个词" class="headerlink" title="每个概念对应一个词"></a>每个概念对应一个词</h3><blockquote>
<p>因为你难以区分fetch/retrieve/get等，以及controller/manager/driver，所以请用一个单词例如Controller来映射所有的控制类</p>
</blockquote>
<h3 id="别用双关语"><a href="#别用双关语" class="headerlink" title="别用双关语"></a>别用双关语</h3><blockquote>
<p>即应该用单词原本的意思而不是为了保持一致而保持一致:如add用于增加或连接两个现有值来获得新值，但是把单个参数放到一个collection中，则适合用insert或append</p>
</blockquote>
<h3 id="使用解决方案领域名称"><a href="#使用解决方案领域名称" class="headerlink" title="使用解决方案领域名称"></a>使用解决方案领域名称</h3><blockquote>
<p>因为只有程序员才会读程序员的代码，所以在使用计算机的术语方面可以无所顾忌</p>
</blockquote>
<h3 id="使用源自所涉问题领域的名称"><a href="#使用源自所涉问题领域的名称" class="headerlink" title="使用源自所涉问题领域的名称"></a>使用源自所涉问题领域的名称</h3><blockquote>
<p>如果不能用程序员熟悉的术语来命名，则用所涉及问题领域的名称</p>
</blockquote>
<h3 id="添加有意义的语境"><a href="#添加有意义的语境" class="headerlink" title="添加有意义的语境"></a>添加有意义的语境</h3><blockquote>
<p>即给一串变量添加前缀，让他们相互说明用来做什么</p>
<p>如addrState，addrFirstName…</p>
</blockquote>
<h3 id="不要添加没用的语境"><a href="#不要添加没用的语境" class="headerlink" title="不要添加没用的语境"></a>不要添加没用的语境</h3><blockquote>
<p>不要在每个类中都添加一样的前缀，因为那样IDE会自动补全一大堆</p>
<p>短名称足够清楚就没必要添加长名称</p>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="短小"><a href="#短小" class="headerlink" title="短小"></a>短小</h3><blockquote>
<p>函数的第一个规则就是要短小，第二个规则还是要短小</p>
<p>函数20行封顶最佳</p>
</blockquote>
<h4 id="代码块和缩进"><a href="#代码块和缩进" class="headerlink" title="代码块和缩进"></a>代码块和缩进</h4><blockquote>
<p>if/else/while语句，其中的代码块应该只有一行，而那一行应该是一个函数调用语句</p>
<p>这样不仅简单明了，也可以用函数名来解释做了什么</p>
</blockquote>
<h3 id="只做一件事"><a href="#只做一件事" class="headerlink" title="只做一件事"></a>只做一件事</h3><blockquote>
<p>要判断函数是否不止做了一件事，就是看是否能再拆出一个函数，这个函数不仅只是单纯地重新诠释其实现</p>
</blockquote>
<h3 id="每个函数一个抽象层级"><a href="#每个函数一个抽象层级" class="headerlink" title="每个函数一个抽象层级"></a>每个函数一个抽象层级</h3><blockquote>
<p>要确保函数只做一件事，函数中的语句都要在同一抽象层级上</p>
<p>自顶向下读代码：向下规则</p>
<p>每个函数后面跟着位于下一抽象层级的函数</p>
</blockquote>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><blockquote>
<p>为了不破坏诸多低耦合高内聚规则：switch仅用于创建多态对象且隐藏在某个继承关系中，在系统其他部分看不到</p>
</blockquote>
<h3 id="使用描述性名称"><a href="#使用描述性名称" class="headerlink" title="使用描述性名称"></a>使用描述性名称</h3><blockquote>
<p>长而具有描述性的名称比短而令人费解的名称好</p>
<p>长而具有描述性的名称比长注释好</p>
</blockquote>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote>
<p>最理想的参数数量是0，其次1，再者2，&gt;=3无论如何也不要这么做</p>
</blockquote>
<h4 id="一元函数的普遍形式"><a href="#一元函数的普遍形式" class="headerlink" title="一元函数的普遍形式"></a>一元函数的普遍形式</h4><blockquote>
<p>作者推荐要么真的只传一个，要么传事件</p>
<p>个人觉得在js中传对象就好，简单明了</p>
</blockquote>
<h4 id="标志参数"><a href="#标志参数" class="headerlink" title="标志参数"></a>标志参数</h4><blockquote>
<p>当需要传参如render(true)布尔值时，应该直接将函数一分为二renderForSuite()和renderForSingleTest()</p>
</blockquote>
<h4 id="二元函数"><a href="#二元函数" class="headerlink" title="二元函数"></a>二元函数</h4><blockquote>
<p> 尽量把两个参数拆分开来，变成两个单参数函数</p>
</blockquote>
<h3 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h3><blockquote>
<p>有时候会出现并非输入而作为输出的参数，如appendFooter(s)，这个函数用来在s后面添加，并不作为输入使用，让人迷惑</p>
<p>所以推荐这种写法:report.appendFooter()即对象.方法的形式来改变对象状态</p>
</blockquote>
<h3 id="使用异常代替返回错误码"><a href="#使用异常代替返回错误码" class="headerlink" title="使用异常代替返回错误码"></a>使用异常代替返回错误码</h3><h4 id="抽离try-catch代码块"><a href="#抽离try-catch代码块" class="headerlink" title="抽离try/catch代码块"></a>抽离try/catch代码块</h4><blockquote>
<p>try/catch搞乱了代码结构，最好把try和catch抽离出来另外形成函数</p>
</blockquote>
<h4 id="错误处理就是一件事"><a href="#错误处理就是一件事" class="headerlink" title="错误处理就是一件事"></a>错误处理就是一件事</h4><blockquote>
<p>函数只做一件事，错误处理就是一件事，处理错误的函数不该做其他事</p>
<p>catch/finally代码块后面也不该有其他内容</p>
</blockquote>
<h4 id="Error依赖磁铁"><a href="#Error依赖磁铁" class="headerlink" title="Error依赖磁铁"></a>Error依赖磁铁</h4><blockquote>
<p>程序员往往不愿意增加新的错误代码，于是他们就复用旧的错误码而不添加新的</p>
<p>使用异常替代错误码，新异常就可以从异常类派生出来，无需重新编译或部署</p>
</blockquote>
<h3 id="别重复自己"><a href="#别重复自己" class="headerlink" title="别重复自己"></a>别重复自己</h3><h4 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h4><blockquote>
<p>只要保持函数短小，偶尔出现return、break、continue没有坏处，甚至比单入单出更具表达力。</p>
<p>且不要用goto，会惹大麻烦</p>
</blockquote>
<h3 id="如何写出这样的函数"><a href="#如何写出这样的函数" class="headerlink" title="如何写出这样的函数"></a>如何写出这样的函数</h3><blockquote>
<p>没人做得到一开始就浑然天成，先写出冗长的代码</p>
<p>尔后将其拆分、改名、消除重复…</p>
<p>最后遵循以上规则组装函数</p>
</blockquote>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>注释的恰当用法是弥补我们在用代码表达意图时遭遇失败</p>
<p>注释的缺点在于代码会变动，会变得跟原义相去甚远，甚至指向一个错误的方向</p>
</blockquote>
<h3 id="注释不能美化糟糕的代码"><a href="#注释不能美化糟糕的代码" class="headerlink" title="注释不能美化糟糕的代码"></a>注释不能美化糟糕的代码</h3><blockquote>
<p>如果一块代码需要大量注释，说明需要花时间清洁那些糟糕的代码了</p>
</blockquote>
<h3 id="用代码来阐述"><a href="#用代码来阐述" class="headerlink" title="用代码来阐述"></a>用代码来阐述</h3><blockquote>
<p>用好的命名来代替注释</p>
</blockquote>
<h3 id="好注释"><a href="#好注释" class="headerlink" title="好注释"></a>好注释</h3><h4 id="法律信息"><a href="#法律信息" class="headerlink" title="法律信息"></a>法律信息</h4><h4 id="对意图的解释"><a href="#对意图的解释" class="headerlink" title="对意图的解释"></a>对意图的解释</h4><blockquote>
<p>从更高抽象层次述说这个函数的作用</p>
</blockquote>
<h4 id="阐释"><a href="#阐释" class="headerlink" title="阐释"></a>阐释</h4><blockquote>
<p>如果参数或返回值是某个标准库/不能修改的代码，帮助阐释其含义的代码就很有用了</p>
</blockquote>
<h4 id="警示"><a href="#警示" class="headerlink" title="警示"></a>警示</h4><h4 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h4><blockquote>
<p>利用TODO在源代码中放置要做的工作列表</p>
<p>vscode有插件</p>
</blockquote>
<h3 id="坏注释"><a href="#坏注释" class="headerlink" title="坏注释"></a>坏注释</h3><h4 id="多余的注释"><a href="#多余的注释" class="headerlink" title="多余的注释"></a>多余的注释</h4><blockquote>
<p>这样的注释并没有证明代码的意义，也没有给出代码的意图或逻辑的翻译代码</p>
<p>甚至不如代码精确，读它不如读代码</p>
</blockquote>
<h4 id="误导性注释"><a href="#误导性注释" class="headerlink" title="误导性注释"></a>误导性注释</h4><h4 id="循规式注释"><a href="#循规式注释" class="headerlink" title="循规式注释"></a>循规式注释</h4><blockquote>
<p>如每个函数/变量都要有注释</p>
</blockquote>
<h4 id="日志式注释"><a href="#日志式注释" class="headerlink" title="日志式注释"></a>日志式注释</h4><blockquote>
<p>在代码前部添加日期之类的</p>
</blockquote>
<h4 id="废话注释"><a href="#废话注释" class="headerlink" title="废话注释"></a>废话注释</h4><h4 id="能用函数或变量时就别用注释"><a href="#能用函数或变量时就别用注释" class="headerlink" title="能用函数或变量时就别用注释"></a>能用函数或变量时就别用注释</h4><h4 id="位置标记"><a href="#位置标记" class="headerlink" title="位置标记"></a>位置标记</h4><blockquote>
<p>标记栏如:// Actions ////////////////////</p>
<p>这样引起注意</p>
<p>但不要过多使用</p>
</blockquote>
<h4 id="括号后面的注释"><a href="#括号后面的注释" class="headerlink" title="括号后面的注释"></a>括号后面的注释</h4><blockquote>
<p>如在try的括号末尾添加//try来标识try结束，当出现这种行为意味着应该缩减代码了</p>
</blockquote>
<h4 id="注释掉的代码"><a href="#注释掉的代码" class="headerlink" title="注释掉的代码"></a>注释掉的代码</h4><blockquote>
<p>注释掉的代码并有用，只会堆放在那里形成垃圾</p>
<p>在有版本控制的今天，删就完了</p>
</blockquote>
<h4 id="非本地信息"><a href="#非本地信息" class="headerlink" title="非本地信息"></a>非本地信息</h4><blockquote>
<p>注释应该就近原则，别在函数上面注释系统级信息如端口</p>
</blockquote>
<h4 id="信息过多"><a href="#信息过多" class="headerlink" title="信息过多"></a>信息过多</h4><h4 id="不明显的联系"><a href="#不明显的联系" class="headerlink" title="不明显的联系"></a>不明显的联系</h4><h4 id="函数头"><a href="#函数头" class="headerlink" title="函数头"></a>函数头</h4><blockquote>
<p>短函数用名字比注释好</p>
</blockquote>
<h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><blockquote>
<p>参照ESLint即可</p>
</blockquote>
<h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="得墨忒耳律"><a href="#得墨忒耳律" class="headerlink" title="得墨忒耳律"></a>得墨忒耳律</h3><blockquote>
<p>模块不应了解它所操作对象的内部情形</p>
</blockquote>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="使用异常而非错误码"><a href="#使用异常而非错误码" class="headerlink" title="使用异常而非错误码"></a>使用异常而非错误码</h3><blockquote>
<p>使用错误码要求调用者即刻检查错误</p>
<p>最好独立抽离出异常函数</p>
</blockquote>
<h3 id="别返回-传递null值"><a href="#别返回-传递null值" class="headerlink" title="别返回/传递null值"></a>别返回/传递null值</h3><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><blockquote>
<p>简单设计的四条规则：</p>
<ol>
<li>运行所有测试</li>
<li>不可重复</li>
<li>表达了程序员的意图</li>
<li>尽可能减少类和方法的数量</li>
</ol>
</blockquote>
<h3 id="规则1：运行所有测试"><a href="#规则1：运行所有测试" class="headerlink" title="规则1：运行所有测试"></a>规则1：运行所有测试</h3><blockquote>
<p>代码耦合度越低、内聚度越高就越好测试</p>
<p>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚的目标</p>
</blockquote>
<h3 id="规则2-3：重构"><a href="#规则2-3：重构" class="headerlink" title="规则2-3：重构"></a>规则2-3：重构</h3><blockquote>
<p>在测试的基础上，重构就更容易了，因为消除了对破坏代码的恐惧</p>
</blockquote>
<h3 id="不可重复"><a href="#不可重复" class="headerlink" title="不可重复"></a>不可重复</h3><blockquote>
<p>用模板方法模式消除高层级重复</p>
</blockquote>
<h3 id="表达力"><a href="#表达力" class="headerlink" title="表达力"></a>表达力</h3><blockquote>
<p>选用好的名称</p>
</blockquote>
<h3 id="尽可能少的类和方法"><a href="#尽可能少的类和方法" class="headerlink" title="尽可能少的类和方法"></a>尽可能少的类和方法</h3><blockquote>
<p>在以上三条的基础上，才是这一条</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack优化</title>
    <url>/2021/02/23/Webpack%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="webpack优化"><a href="#webpack优化" class="headerlink" title="webpack优化"></a>webpack优化</h1><p>因为前端项目打包时间实在是太久了，而且由于太大了，每次都会把服务器搞宕机，看了一下webpack的教程，来解决一下打包问题。</p>
<h2 id="小试牛刀-thread-loader"><a href="#小试牛刀-thread-loader" class="headerlink" title="小试牛刀(thread-loader)"></a>小试牛刀(thread-loader)</h2><p>肯定不会用现在的版本去测试，于是用个人项目<code>vue-template</code>去测试</p>
<p>先上猛料，看看==多线程打包==如何，只能说差强人意吧</p>
<p><img src="/.com//1.jpg"></p>
<p>还有因为这是vue-cli脚手架形成的，里面的配置项眼花缭乱，只能步步为营</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">cnpm i thread-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改配置项</span></span><br><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;thread-loader&#x27;</span>,&#123;</span><br><span class="line">          loader:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;options&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">// 第二次构建时会读取之前的缓存</span></span><br><span class="line">            cacheDirectory: <span class="literal">true</span> <span class="comment">// 加了这个并没有明显感到加快</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// loader: [&#x27;thread-loader&#x27;,&#x27;babel-loader&#x27;],</span></span><br><span class="line">        include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>), resolve(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>)],</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="深入探究-speed-measure-webpack-plugin-webpack-bundle-analyzer"><a href="#深入探究-speed-measure-webpack-plugin-webpack-bundle-analyzer" class="headerlink" title="深入探究(speed-measure-webpack-plugin/webpack-bundle-analyzer)"></a>深入探究(speed-measure-webpack-plugin/webpack-bundle-analyzer)</h2><h3 id="speed-measure-webpack-plugin"><a href="#speed-measure-webpack-plugin" class="headerlink" title="speed-measure-webpack-plugin"></a>speed-measure-webpack-plugin</h3><blockquote>
<p>使用speed-measure-webpack-plugin来查看各模块用时</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev speed-measure-webpack-plugin <span class="comment">// 首先安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在webpack文件内创建对象</span></span><br><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">&#x27;speed-measure-webpack-plugin&#x27;</span>); <span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin(); <span class="comment">//创建插件对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123; <span class="comment">// 用smp.wrap包注export</span></span><br><span class="line">  context: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/.com//2.jpg"></p>
<p>可以看到都是老大哥了，用时都超过1000ms</p>
<h3 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a>webpack-bundle-analyzer</h3><blockquote>
<p>通过webpack-bundle-analyzer可以看到各个包的体积</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev webpack-bundle-analyzer</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p><img src="/.com//3.jpg"></p>
<p>可以发现echarts和element-ui占用的量最大，可以考虑用cdn来减少打包体积</p>
<h2 id="dll打包-大大加快"><a href="#dll打包-大大加快" class="headerlink" title="dll打包(大大加快)"></a>dll打包(大大加快)</h2><blockquote>
<p>根据打包体积的输出，可以看到主要有echarts、element-ui等包体积过大，于是准备用dll来加速打包过程</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install -D add-asset-html-webpack-plugin@<span class="number">2.1</span><span class="number">.2</span> <span class="comment">// 安装插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在build文件夹下创建新文件webpack.dll.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">		<span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line">		<span class="built_in">module</span>.exports = &#123;</span><br><span class="line">		  entry: &#123;</span><br><span class="line">		    vendor: [</span><br><span class="line">		      <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">		      <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">// 打包列表</span></span><br><span class="line">		    ]</span><br><span class="line">		  &#125;,</span><br><span class="line">		  output: &#123;</span><br><span class="line">		    path: path.join(__dirname, <span class="string">&#x27;../static/js&#x27;</span>), <span class="comment">//放在项目的static/js目录下面</span></span><br><span class="line">		    filename: <span class="string">&#x27;[name].dll.js&#x27;</span>, <span class="comment">//打包文件的名字</span></span><br><span class="line">		    library: <span class="string">&#x27;[name]_library&#x27;</span> <span class="comment">//可选 暴露出的全局变量名</span></span><br><span class="line">		    <span class="comment">// vendor.dll.js中暴露出的全局变量名。</span></span><br><span class="line">		    <span class="comment">// 主要是给DllPlugin中的name使用，</span></span><br><span class="line">		    <span class="comment">// 故这里需要和webpack.DllPlugin中的`name: &#x27;[name]_library&#x27;,`保持一致。</span></span><br><span class="line">		  &#125;,</span><br><span class="line">		  plugins: [</span><br><span class="line">		    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">		      path: path.join(__dirname, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;[name]-manifest.json&#x27;</span>), <span class="comment">//生成上文说到清单文件，放在当前build文件下面，这个看你自己想放哪里了。</span></span><br><span class="line">		      name: <span class="string">&#x27;[name]_library&#x27;</span>,</span><br><span class="line">		    &#125;),</span><br><span class="line">		  ]</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在webpack.prod.conf.js下添加以下代码</span></span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>);  <span class="comment">//在上面导入</span></span><br><span class="line">   <span class="keyword">new</span> webpack.DllReferencePlugin(&#123; <span class="comment">// 这是放在plugins里面的</span></span><br><span class="line">				context: path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>),</span><br><span class="line">				manifest: <span class="built_in">require</span>(<span class="string">&#x27;./vendor-manifest.json&#x27;</span>)</span><br><span class="line">				&#125;),</span><br><span class="line">				<span class="comment">//这个主要是将生成的vendor.dll.js文件加上hash值插入到页面中。</span></span><br><span class="line">				<span class="keyword">new</span> AddAssetHtmlPlugin([&#123;</span><br><span class="line">				filepath: path.resolve(__dirname, <span class="string">&#x27;../static/js/vendor.dll.js&#x27;</span>),</span><br><span class="line">				outputPath: utils.assetsPath(<span class="string">&#x27;js&#x27;</span>),</span><br><span class="line">				publicPath: path.posix.join(config.build.assetsPublicPath, <span class="string">&#x27;static/js&#x27;</span>),</span><br><span class="line">				includeSourcemap: <span class="literal">false</span>,</span><br><span class="line">				hash: <span class="literal">true</span>,</span><br><span class="line">				&#125;]),</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 在package.json里面添加指令</span></span><br><span class="line"><span class="string">&quot;dll&quot;</span>: <span class="string">&quot;webpack --config build/webpack.dll.conf.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行生成dll文件</span></span><br><span class="line">cnpm run dll</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包</span></span><br><span class="line">cnpm run build</span><br></pre></td></tr></table></figure>

<p>可以看到打包速度大大增加</p>
<p><img src="/.com//4.jpg"></p>
<h3 id="一个大坑-element-ui"><a href="#一个大坑-element-ui" class="headerlink" title="一个大坑(element-ui)"></a>一个大坑(element-ui)</h3><blockquote>
<p>在线上项目也改过后，发现element-ui的图表老是显示不出来，关掉打包加速发现正常了。把dll加速里面的element-ui移除发现正常了，在网上搜索一番后，element-ui部分决定不使用dll加速，应该使用cdn加速，具体配置如下</p>
</blockquote>
<p>webpack.base.conf.js</p>
<p><img src="/.com//5.jpg"></p>
<p>项目根目录下index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.14.1/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.5.2/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.14.1/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> Vue.config.productionTip=<span class="literal">false</span> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//6.jpg"></p>
<p>webpack.dll.conf.js</p>
<p><img src="/.com//7.jpg"></p>
<p>main.js:注释掉element-ui部分</p>
<p><img src="/.com//8.jpg"></p>
<p>配置完成</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack基础配置</title>
    <url>/2021/02/23/Webpack%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><blockquote>
<p>Webpack是一种前端构建工具，一种静态模块打包器</p>
<p>Webpack可以将浏览器不能识别的代码转化为浏览器可以识别的代码，如scss/less转化为css</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>webpack以入口文件为入口形成<code>依赖关系图</code></li>
<li>然后根据依赖关系图依次将相应资源引进形成<code>chunk</code>(代码块)</li>
<li>chunk里面的less/scss转化为css，js转化为浏览器可以识别的js等，这个过程叫<code>打包</code></li>
<li>打包输出的东西叫<code>bundle</code></li>
</ol>
<h3 id="五个核心概念"><a href="#五个核心概念" class="headerlink" title="五个核心概念"></a>五个核心概念</h3><h4 id="Entry-入口"><a href="#Entry-入口" class="headerlink" title="Entry(入口)"></a>Entry(入口)</h4><p>指示webpack以哪个文件为入口起点开始打包，分析构建内部依赖图</p>
<h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output(输出)"></a>Output(输出)</h4><p>指示webpack打包后的bundle输出到哪以及如何命名</p>
<h4 id="Loader-翻译器"><a href="#Loader-翻译器" class="headerlink" title="Loader(翻译器)"></a>Loader(翻译器)</h4><p>Loader让webpack能够去处理非js文件(webpack本身只理解js)</p>
<h4 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins(插件)"></a>Plugins(插件)</h4><p>可以用于执行更广的任务，包括打包优化和压缩、一直到重新定义环境中的变量等</p>
<h4 id="Mode-模式"><a href="#Mode-模式" class="headerlink" title="Mode(模式)"></a>Mode(模式)</h4><p>指示webpack使用相应模式的配置</p>
<p>如<code>development</code>或者<code>production</code></p>
<h2 id="DevServer-开发服务器"><a href="#DevServer-开发服务器" class="headerlink" title="DevServer(开发服务器)"></a>DevServer(开发服务器)</h2><blockquote>
<p>用来自动化(自动编译、打开浏览器、刷新浏览器等)</p>
<p>特点：只会在内存中编译打包，不会有任何输出</p>
<p>启动指令为：npx webpack-dev-server</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 项目构建后目录</span></span><br><span class="line">	contentBase: resolve(_dirname, <span class="string">&#x27;build),</span></span><br><span class="line"><span class="string">	// 启动gzip压缩</span></span><br><span class="line"><span class="string">	compress: true,</span></span><br><span class="line"><span class="string">	port: 3000</span></span><br><span class="line"><span class="string">    // 自动打开浏览器</span></span><br><span class="line"><span class="string">    open: true</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><blockquote>
<p>postcss –&gt; postcss-loader –&gt;postcss-preset-env</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;development&quot;</span>: [ <span class="comment">// 开发</span></span><br><span class="line">        <span class="string">&quot;last 1 chrome version&quot;</span>,</span><br><span class="line">        <span class="string">&quot;last 1 firefox version&quot;</span>,</span><br><span class="line">        <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;production&quot;</span>: [ <span class="comment">// 生产</span></span><br><span class="line">        <span class="string">&quot;&gt;0.2%&quot;</span>,</span><br><span class="line">        <span class="string">&quot;not dead&quot;</span>,</span><br><span class="line">        <span class="string">&quot;not op_mini all&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><h4 id="eslint代码检查"><a href="#eslint代码检查" class="headerlink" title="eslint代码检查"></a>eslint代码检查</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="built_in">module</span>: &#123;</span><br><span class="line">		rules: [</span><br><span class="line">			<span class="comment">// 语法检查: eslint-loader eslint</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\/js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 自动修复eslint错误</span></span><br><span class="line">                    fix: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="兼容性处理"><a href="#兼容性处理" class="headerlink" title="兼容性处理"></a>兼容性处理</h4><blockquote>
<p>babel-loader</p>
</blockquote>
<h3 id="压缩html和js"><a href="#压缩html和js" class="headerlink" title="压缩html和js"></a>压缩html和js</h3><p>生产环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 移除空格</span></span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 移除注释</span></span><br><span class="line">            removeComments: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="生产环境基本配置"><a href="#生产环境基本配置" class="headerlink" title="生产环境基本配置"></a>生产环境基本配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">      plugins: <span class="function">() =&gt;</span> [<span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;js/built.js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [...commonCssLoader]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">          先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">        loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  firefox: <span class="string">&#x27;50&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">          outputPath: <span class="string">&#x27;imgs&#x27;</span>,</span><br><span class="line">          esModule: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          outputPath: <span class="string">&#x27;media&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><h4 id="优化打包构建速度-HMR"><a href="#优化打包构建速度-HMR" class="headerlink" title="优化打包构建速度(HMR)"></a>优化打包构建速度(HMR)</h4><blockquote>
<p>默认修改单一模块，所有模块都要重新打包，所以需要HMR(hot module replacement 热模块替换)</p>
<p>HMR：一个模块变化，只会重新打包这个模块</p>
</blockquote>
<p>作用范围：</p>
<ol>
<li>样式文件，可以使用HMR，因为style-loader内部实现了</li>
<li>js，默认不能使用HMR</li>
<li>html，默认不能使用。解决：修改entry入口，将html文件引入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: [<span class="string">&#x27;./src/index.js&#x27;</span>, <span class="string">&#x27;./src/index.html&#x27;</span>]</span><br><span class="line">devServer: &#123;</span><br><span class="line">	<span class="comment">// 打开HMR</span></span><br><span class="line">	hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="优化代码调试-souce-map"><a href="#优化代码调试-souce-map" class="headerlink" title="优化代码调试(souce-map)"></a>优化代码调试(souce-map)</h4><blockquote>
<p>soucemap是一种提供源代码到构建后代码映射技术，可以追踪源代码，精确到错误行和列</p>
</blockquote>
<p>soucemap类别:</p>
<ol>
<li>inline-source-map:只生成一个内联sourcemap，提示错误代码准确信息和错误行</li>
<li>hidden-souce-map: 外部，提示错误代码原因，但是没有错误位置，不能追踪到源代码错误，只提示构建后代码错误位置</li>
<li>eval-souce-map: 内联，每个文件都声称对应的source-map，有错误提示和错误行</li>
<li>nosource-source-map：外部，有错误信息，但是没有任何源代码信息</li>
<li>cheap-source-map：外部，错误代码准确信息和错误行，只能精确到行</li>
<li>cheap-module-source-map：外部，错误代码准确信息和错误行</li>
</ol>
<p>内联和外部的区别：</p>
<ol>
<li>外部生成了文件，内联没有</li>
<li>内联构建速度更快</li>
</ol>
<p>开发环境：速度快，调式更友好</p>
<p>​    速度快(eval&gt;inline&gt;cheap&gt;…),最快：eval-cheap-source-map</p>
<p>​    调试更友好：source-map &gt; cheap-module-souce-map &gt; cheap-source-map</p>
<p>​    综合推荐：eval-souce-map</p>
<p>生产环境：源代码要不要隐藏？调试要不要更友好？</p>
<p>​    综合推荐: source-map</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devtool: <span class="string">&#x27;souce-map&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><h4 id="优化打包构建速度"><a href="#优化打包构建速度" class="headerlink" title="优化打包构建速度"></a>优化打包构建速度</h4><h5 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h5><blockquote>
<p>在oneOf里面的loader只会匹配一个，里面不能有两个配置处理同一个类型文件</p>
</blockquote>
<p>webpack原本的loader是将每个文件都过一遍，比如有一个js文件 rules中有10个loader，第一个是处理js文件的loader，当第一个loader处理完成后webpack不会自动跳出，而是会继续拿着这个js文件去尝试匹配剩下的9个loader，相当于没有break。<br>而oneOf就相当于这个break</p>
<h5 id="babel缓存"><a href="#babel缓存" class="headerlink" title="babel缓存"></a>babel缓存</h5><blockquote>
<p>因为js里面不支持HMR，每次都得重新编译，但是如果使用babel缓存的话就可以类似HMR</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">	...,</span><br><span class="line">	options: &#123;</span><br><span class="line">		<span class="comment">// 第二次构建时会读取之前的缓存</span></span><br><span class="line">		cacheDirectory: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h5><blockquote>
<p>一般给babel用，有利有弊</p>
<p>因为进程启动大概为600ms，进程通信也要占用开销</p>
<p>只有工作消耗时间比较长，才需要多进程打包</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        &#123;</span><br><span class="line">            loader:<span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                worksers: <span class="number">2</span> <span class="comment">// 进程两个，一般来说只放上面的就行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            ...其他配置项</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="external"><a href="#external" class="headerlink" title="external"></a>external</h5><blockquote>
<p>指定某些依赖不打包，需要手动引入cdn</p>
</blockquote>
<h5 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h5><blockquote>
<p>使用dll技术，对某些库(jquery, react, vue)进行单独打包</p>
</blockquote>
<h4 id="优化代码运行的性能"><a href="#优化代码运行的性能" class="headerlink" title="优化代码运行的性能"></a>优化代码运行的性能</h4><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><h5 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h5><blockquote>
<p>树摇：去除应用程序中没有运行的代码</p>
<p>前提：1. 必须使用ES6模块化、2.开启production就会自动启用树摇</p>
</blockquote>
<h5 id="code-split-代码分割"><a href="#code-split-代码分割" class="headerlink" title="code split(代码分割)"></a>code split(代码分割)</h5><h6 id="多入口-不推荐"><a href="#多入口-不推荐" class="headerlink" title="多入口(不推荐)"></a>多入口(不推荐)</h6><p>多入口：输出多个bundle</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    main: <span class="string">&#x27;./src..&#x27;</span>,</span><br><span class="line">    test: <span class="string">&#x27;./src...&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="单入口-推荐"><a href="#单入口-推荐" class="headerlink" title="单入口(推荐)"></a>单入口(推荐)</h6><ol>
<li>将node_modules打包成单独的chunk</li>
<li>自动分析多入口chunk中，有没有公共文件，如果有就单独打包成一个chunk</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">	splitChunks: &#123;</span><br><span class="line">		chunks: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="懒加载-预加载"><a href="#懒加载-预加载" class="headerlink" title="懒加载/预加载"></a>懒加载/预加载</h5><h5 id="pwa"><a href="#pwa" class="headerlink" title="pwa"></a>pwa</h5><blockquote>
<p>pwa：让网页像应用程序一样可以离线访问</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>查杀病毒xmrig</title>
    <url>/2021/02/22/%E6%9F%A5%E6%9D%80%E7%97%85%E6%AF%92xmrig/</url>
    <content><![CDATA[<h1 id="记一次查杀病毒XMRIG"><a href="#记一次查杀病毒XMRIG" class="headerlink" title="记一次查杀病毒XMRIG"></a>记一次查杀病毒XMRIG</h1><p>首先总结一下：这是一次因为Jenkins漏洞出现的病毒，在Jenkins运行过程中会运行脚本病毒，导致每次运行Jenkins的workspace里面的程序CPU都会卡炸</p>
<p>以下为过程：</p>
<h2 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h2><p>在傍晚时分，前端突然找我说是Jenkins部署不了，我试着登陆了一下果然不行，转而去登陆服务器，发现已经死机了</p>
<p>重启服务器后马上使用<code>top</code>指令，发现有一个进程的名字不曾见过，名叫<code>xmrig</code></p>
<p>百度了一下，发现是一个挖矿软件，锁定目标</p>
<p>除此之外还发现一个现象，Jenkins里面多了一个项目，虽然不知道哪里来的</p>
<p>但是在其他博客里面也发现会多一个项目，于是删之</p>
<p>也没忘了在Jenkins的workspace也删之</p>
<p>也排查了一下crontab，没发现里面有被入侵的痕迹，都是正常的脚本</p>
<h2 id="找到罪魁祸首"><a href="#找到罪魁祸首" class="headerlink" title="找到罪魁祸首"></a>找到罪魁祸首</h2><p>通过<code>ps -ef | grep xmrig </code>  指令找到了罪魁祸首</p>
<p><img src="/.com//1.jpg"></p>
<p>于是马上去<code>/root/c3pool/xmrig</code>目录下，果然发现了罪魁祸首，还明目张胆的叫miner，真是**呢，看了里面的代码比较简单</p>
<p><img src="/.com//2.jpg"></p>
<p>删除里面的文件，留了个心眼，不删除外部的文件，将c3pool文件夹用<code>sudo chmod 000 c3pool</code>指令锁了</p>
<p>如果没有对应的处理代码，下次可能会被堵住</p>
<h2 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h2><p>后来再次在workspace里面运行代码，发现还是会卡死，问题还是没解决</p>
<p>在别的文件夹拉了代码运行，发现没问题，分析应该是Jenkins顺带运行了病毒脚本</p>
<p>于是只能使用全局查找<code>sudo find / -name xmrig</code>,发现在/var/log/jenkins/tmpst/xmrig-5.11.1/xmrig里面还遗留着代码</p>
<p>前面以为是log里面的没有问题，遂将其删除</p>
<p>用相同的手法，删除文件，将文件夹设为000权限</p>
<p>终于，问题解决了，后端部署没问题了</p>
<h2 id="问题依旧"><a href="#问题依旧" class="headerlink" title="问题依旧"></a>问题依旧</h2><p>但是在部署前端的时候还是有问题，还是会卡死。不能说惨不忍睹，只能说不忍直视。每次失败都要重启服务器，因为都会卡死</p>
<p><img src="/.com//3.jpg"></p>
<p>接下来难以直接排查，于是只能自己手动部署一遍看看问题出在哪，不过依照进程来看应该是build阶段出的问题</p>
<p>手动<code>cnpm run build</code>，果然卡死了，百度了一下确实打包时间太久了，得优化webpack的打包</p>
<p>等过些时日学习一下webpack吧，看来这个问题并不是xmrig引起的…</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>设计原则和编程技巧</title>
    <url>/2021/02/21/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="设计原则和编程技巧"><a href="#设计原则和编程技巧" class="headerlink" title="设计原则和编程技巧"></a>设计原则和编程技巧</h1><p>取自《JavaScript设计模式与开发实践》</p>
<h2 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则(SRP)"></a>单一职责原则(SRP)</h2><p><strong>定义</strong>：引起一个方法改变的动机只能有一个，简而言之就是如果需要修改这个方法的内容，那样的动机只能有一个</p>
<p><strong>为什么？</strong>：如果一个方法承担了太多的职责，后期修改这个方法的可能性越大，也越难修改。是低内聚和高耦合的脆弱设计。</p>
<p><strong>什么时候？</strong>：并不是所有的职责都需要分离，以下情况可以不用着急分离</p>
<ol>
<li>如果随着需求的变化，有两个职责总是同时改变，那么就没必要分离他们，可以看作同一个职责</li>
<li>即使两个职责已经被耦合在一起，但他们还没有发生改变的征兆，可以等到重构但时候再分离也不迟</li>
</ol>
<p><strong>优点</strong>：降低单个类或者对象的复杂度</p>
<p><strong>缺点</strong>：增加代码的复杂度，分离后实际上也增加了对象之间相互联系的难度</p>
<h2 id="最少知识原则-LKP"><a href="#最少知识原则-LKP" class="headerlink" title="最少知识原则(LKP)"></a>最少知识原则(LKP)</h2><p><strong>定义</strong>：一个实体应该尽可能少的与其他实体发生相互作用。即应该减少对象之间的交互，常见的方法是引入第三者来转发</p>
<h2 id="开放-封闭原则-OCP"><a href="#开放-封闭原则-OCP" class="headerlink" title="开放-封闭原则(OCP)"></a>开放-封闭原则(OCP)</h2><p><strong>定义</strong>：实体应该是可以扩展的，但是不可修改</p>
<p><strong>思路</strong>：分离出代码中不可变和可变的地方，运用多态来动态使用他们</p>
<p><strong>怎么做</strong>：有些代码确实不能完全封闭，我们只能做到以下的点</p>
<ol>
<li>挑选出最容易发生变化的地方，然后构造抽象来封闭这些变化</li>
<li>在不可避免发生修改的时候，尽量修改那些容易修改的地方而不是选择难以修改</li>
</ol>
<h2 id="接口和面向接口编程"><a href="#接口和面向接口编程" class="headerlink" title="接口和面向接口编程"></a>接口和面向接口编程</h2><p><strong>思想</strong>：面向抽象编程而不是面向实现编程</p>
<h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><p>以下为重构的手段</p>
<h3 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h3><p>一个函数过长，需要将函数内的代码提炼出来，有以下好处：</p>
<ol>
<li>避免出现超大函数</li>
<li>独立出来的函数有助于代码复用</li>
<li>独立出来的函数更容易被覆写</li>
<li>独立出来的函数如果拥有一个良好的命名，本身就起到了注释的作用</li>
</ol>
<h3 id="合并重复的条件片段"><a href="#合并重复的条件片段" class="headerlink" title="合并重复的条件片段"></a>合并重复的条件片段</h3><h3 id="把条件分支语句提炼成函数"><a href="#把条件分支语句提炼成函数" class="headerlink" title="把条件分支语句提炼成函数"></a>把条件分支语句提炼成函数</h3><p>简而言之就是将长条件提炼成短函数，用函数的名称来当作注释，增加代码可读性</p>
<h3 id="提前让函数退出代替嵌套条件分支"><a href="#提前让函数退出代替嵌套条件分支" class="headerlink" title="提前让函数退出代替嵌套条件分支"></a>提前让函数退出代替嵌套条件分支</h3><p>没必要遵守“函数只有一个入口和出口的条件”，多个出口也未尝不好</p>
<h3 id="传递对象参数已代替过长的参数列表"><a href="#传递对象参数已代替过长的参数列表" class="headerlink" title="传递对象参数已代替过长的参数列表"></a>传递对象参数已代替过长的参数列表</h3><p><strong>在过长参数的函数中</strong>，以对象的竖序排列代替参数的横向排列以增加代码的可读性</p>
<h3 id="尽量减少参数数量"><a href="#尽量减少参数数量" class="headerlink" title="尽量减少参数数量"></a>尽量减少参数数量</h3><p>因为这样会使这个函数的复用率降低</p>
<h3 id="少用三目运算符"><a href="#少用三目运算符" class="headerlink" title="少用三目运算符"></a>少用三目运算符</h3><p>可读性太差了</p>
<h3 id="合理使用链式调用"><a href="#合理使用链式调用" class="headerlink" title="合理使用链式调用"></a>合理使用链式调用</h3><p>不要习惯于链式调用即类似new User().setId(123).setName(‘aaa’)</p>
<p>因为一旦出问题很难追踪错误</p>
<p>如果该链稳定的话无可厚非，但是如果很容易发生变化的话，建议使用普通调用模式</p>
<h3 id="用return退出多重循环"><a href="#用return退出多重循环" class="headerlink" title="用return退出多重循环"></a>用return退出多重循环</h3><p>因为用break的话可读性很差，很难分辨跳到哪一层循环了，而用return的话就很容易读懂</p>
<p>如果return以后还有要执行的内容，可以通过在外面声明函数，里面放要执行的代码</p>
<p>类似return thisFunction()的方式来执行最后的函数</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>前端权限实战</title>
    <url>/2021/02/08/%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="前端权限之路"><a href="#前端权限之路" class="headerlink" title="前端权限之路"></a>前端权限之路</h1><p>此版本为权限实操，思路请看《前端权限》</p>
<h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h2><p>在刚开始构建项目的时候，前端权限大多是靠后端传来的数据来定义:这里可以看到完全依赖写死(后端传来的数据)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Hide = &#123;</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">  hidden: <span class="literal">true</span>,</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">      name: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;main&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">21</span>,</span><br><span class="line">      name: <span class="string">&#x27;个人中心&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;person&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">22</span>,</span><br><span class="line">      name: <span class="string">&#x27;example2&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;example2&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理员的样例中心</span></span><br><span class="line"><span class="keyword">const</span> FM = &#123;</span><br><span class="line">  name: <span class="string">&#x27;优化中心&#x27;</span>,</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  icon: <span class="string">&#x27;iconfont icon-daibanshixiang&#x27;</span>,</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">      name: <span class="string">&#x27;优化样例一&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;exampleManage1&#x27;</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SM = &#123;</span><br><span class="line">  name: <span class="string">&#x27;样例中心&#x27;</span>,</span><br><span class="line">  id: <span class="number">2</span>,</span><br><span class="line">  icon: <span class="string">&#x27;iconfont icon-daibanshixiang&#x27;</span>,</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">      name: <span class="string">&#x27;表格样例&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;table&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">&#x27;图表样例&#x27;</span>,</span><br><span class="line">      routerName: <span class="string">&#x27;echarts&#x27;</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽离直接使用</span></span><br><span class="line"><span class="keyword">const</span> role0 = &#123;</span><br><span class="line">  Hide,</span><br><span class="line">  F: &#123;</span><br><span class="line">    name: <span class="string">&#x27;样例中心&#x27;</span>,</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    icon: <span class="string">&#x27;iconfont icon-daibanshixiang&#x27;</span>,</span><br><span class="line">    data: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">        name: <span class="string">&#x27;修改密码&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;example1&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">        name: <span class="string">&#x27;查看信息&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;example2&#x27;</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> role1 = &#123;</span><br><span class="line">  Hide,</span><br><span class="line">  FM,</span><br><span class="line">  SM,</span><br><span class="line">  S: &#123;</span><br><span class="line">    name: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    icon: <span class="string">&#x27;iconfont icon-renjijiaohu&#x27;</span>,</span><br><span class="line">    data: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">13</span>,</span><br><span class="line">        name: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;role&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">14</span>,</span><br><span class="line">        name: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;user&#x27;</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> role2 = &#123;</span><br><span class="line">  Hide,</span><br><span class="line">  FM,</span><br><span class="line">  SM,</span><br><span class="line">  S: &#123;</span><br><span class="line">    name: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    icon: <span class="string">&#x27;iconfont icon-renjijiaohu&#x27;</span>,</span><br><span class="line">    data: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">        name: <span class="string">&#x27;api管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;api&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">        name: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;auth&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">13</span>,</span><br><span class="line">        name: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;role&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">14</span>,</span><br><span class="line">        name: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">        routerName: <span class="string">&#x27;user&#x27;</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> allRole = &#123;role0, role1, role2&#125;</span><br></pre></td></tr></table></figure>



<p>因为这个是模板，没有多想写死了，这是第一个版本，这里完全是依赖传来的数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu</span><br><span class="line">    class&#x3D;&quot;menu&quot;</span><br><span class="line">    :default-active&#x3D;&quot;currentPage&quot;</span><br><span class="line">    background-color&#x3D;&quot;#2e3f53&quot;</span><br><span class="line">    text-color&#x3D;&quot;#b9c5d2&quot;</span><br><span class="line">    router</span><br><span class="line">    :collapse-transition&#x3D;false</span><br><span class="line">    :collapse&#x3D;&quot;isCollapse&quot;</span><br><span class="line">    style&#x3D;&quot;height:100%;overflow-y:scroll;&quot;</span><br><span class="line">    active-text-color&#x3D;&quot;#3e99d5&quot;&gt;</span><br><span class="line">    &lt;el-menu-item index&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont icon-gongyezujian-yibiaopan&quot; style&#x3D;&quot;&quot;&gt; &lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span style&#x3D;&quot;margin-right:70px;margin-left:10px&quot;&gt;Dashboard&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">    &lt;el-submenu :index&#x3D;&quot;item.id+&#39;&#39;&quot; v-for&#x3D;&quot;item in routerMapping&quot; v-if&#x3D;&quot;item.hidden&#x3D;&#x3D;undefined&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;template slot&#x3D;&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class&#x3D;&quot;item.icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span style&#x3D;&quot;margin-right:90px;padding-left:10px&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;el-menu-item :index&#x3D;&quot;items.routerName&quot; v-for&#x3D;&quot;items in item.data&quot; v-if&#x3D;&quot;items.hidden&#x3D;&#x3D;undefined&quot; :key&#x3D;&quot;items.id&quot;&gt;&#123;&#123;items.name&#125;&#125;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">    &lt;&#x2F;el-submenu&gt;</span><br><span class="line">    &lt;el-menu-item index&#x3D;&quot;person&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont icon-icon_zhanghao&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span style&#x3D;&quot;margin-right:70px;padding-left:10px&quot;&gt;个人中心&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">  &lt;&#x2F;el-menu&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; allRole &#125; from &#39;@&#x2F;assets&#x2F;staticData&#x2F;rolesFront.js&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Aside&#39;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: [&#39;is-collapse&#39;],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      allRole,</span><br><span class="line">      routerMapping: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    currentPage () &#123;</span><br><span class="line">      return this.$store.getters.getCurrentPage</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    &#x2F;&#x2F; this.roleinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    &#x2F;&#x2F; this.roleinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.roleinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    roleinit () &#123;</span><br><span class="line">      &#x2F;&#x2F; 假如role的权限为0,则使用学生权限,反之使用管理员权限</span><br><span class="line">      const roleState &#x3D; this.$store.getters.getRole</span><br><span class="line">      this.routerMapping &#x3D; this.allRole[&#39;role&#39; + roleState]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> .menu::-webkit-scrollbar&#123;</span><br><span class="line">    width: 0 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h2><p>昨天的时候看上一个项目的代码发现这样做不靠谱，后端不可能传来这么多信息，所以花了几个小时大改了一波。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu</span><br><span class="line">    class&#x3D;&quot;menu&quot;</span><br><span class="line">    :default-active&#x3D;&quot;currentPage&quot;</span><br><span class="line">    background-color&#x3D;&quot;#2e3f53&quot;</span><br><span class="line">    text-color&#x3D;&quot;#b9c5d2&quot;</span><br><span class="line">    router</span><br><span class="line">    :collapse-transition&#x3D;false</span><br><span class="line">    :collapse&#x3D;&quot;isCollapse&quot;</span><br><span class="line">    style&#x3D;&quot;height:100%;overflow-y:scroll;&quot;</span><br><span class="line">    active-text-color&#x3D;&quot;#3e99d5&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;item in routerGet&quot; :key&#x3D;&quot;item.id&quot; v-if&#x3D;&quot;(item.hidden&#x3D;&#x3D;undefined) &amp;&amp; (JSON.stringify(routerMapping).indexOf(item.name)!&#x3D;&#x3D;-1)&quot;&gt;</span><br><span class="line">      &lt;!-- 循环判断假如有children则进入上面，否则进入下面 --&gt;</span><br><span class="line">      &lt;el-menu-item v-if&#x3D;&quot;item.children.length &#x3D;&#x3D;&#x3D; 1&quot; :index&#x3D;&quot;item.children[0].name&quot;&gt;</span><br><span class="line">        &lt;i :class&#x3D;&quot;item.meta.icon&quot; style&#x3D;&quot;&quot;&gt; &lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span style&#x3D;&quot;margin-right:70px;margin-left:10px&quot;&gt;&#123;&#123;item.meta.name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;el-menu-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-submenu v-else :index&#x3D;&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;template slot&#x3D;&quot;title&quot;&gt;</span><br><span class="line">          &lt;i :class&#x3D;&quot;item.meta.icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">          &lt;span style&#x3D;&quot;margin-right:90px;padding-left:10px&quot;&gt;&#123;&#123;item.meta.name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;el-menu-item :index&#x3D;&quot;items.name&quot; v-for&#x3D;&quot;items in item.children&quot; v-if&#x3D;&quot;(items.hidden&#x3D;&#x3D;undefined) &amp;&amp; (JSON.stringify(routerMapping).indexOf(items.name)!&#x3D;&#x3D;-1)&quot; :key&#x3D;&quot;items.id&quot; popper-append-to-body&gt;&#123;&#123;items.meta.name&#125;&#125;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-submenu&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;el-menu&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; allRole &#125; from &#39;@&#x2F;assets&#x2F;staticData&#x2F;rolesFront.js&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Aside&#39;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: [&#39;is-collapse&#39;],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      allRole,</span><br><span class="line">      routerGet: &#123;&#125;,</span><br><span class="line">      routerMapping: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    currentPage () &#123;</span><br><span class="line">      console.log(this.$store.getters.getCurrentPage)</span><br><span class="line">      return this.$store.getters.getCurrentPage</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    &#x2F;&#x2F; this.roleinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    &#x2F;&#x2F; this.roleinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.roleinit()</span><br><span class="line">    this.routerinit()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; handleOpen (key, keyPath) &#123;</span><br><span class="line">    &#x2F;&#x2F;   console.log(key, keyPath)</span><br><span class="line">    &#x2F;&#x2F; &#125;,</span><br><span class="line">    &#x2F;&#x2F; handleClose (key, keyPath) &#123;</span><br><span class="line">    &#x2F;&#x2F;   console.log(key, keyPath)</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">    routerinit () &#123;</span><br><span class="line">      this.routerGet &#x3D; this.$router.options.routes</span><br><span class="line">      &#x2F;&#x2F; console.log(this.routerGet)</span><br><span class="line">    &#125;,</span><br><span class="line">    roleinit () &#123;</span><br><span class="line">      &#x2F;&#x2F; 假如role的权限为0,则使用学生权限,反之使用管理员权限</span><br><span class="line">      &#x2F;&#x2F; console.log(this.studentRouterMapping)</span><br><span class="line">      const roleState &#x3D; this.$store.getters.getRole</span><br><span class="line">      this.routerMapping &#x3D; this.allRole[&#39;role&#39; + roleState]</span><br><span class="line">      console.log(JSON.stringify(this.routerMapping))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> .menu::-webkit-scrollbar&#123;</span><br><span class="line">    width: 0 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Version3"><a href="#Version3" class="headerlink" title="Version3"></a>Version3</h2><p>但是昨天晚上又想了一下得重新规划，不然后面越来越难改，这是第三个权限版本。目前项目重构会直接摧毁原有架构，所以选择维持方案二，这个项目预计会用vue3重构，到时候选择用方案一。</p>
<h3 id="方案一-推荐"><a href="#方案一-推荐" class="headerlink" title="方案一(推荐)"></a>方案一(推荐)</h3><p>选择在router里面存储角色信息，用来判断是否是对应权限路由，不然使用indexOf整个路由的方法太笨重，每次都需要调用和转换路由，渲染路由直接addRoute。如果没有对应权限的话，因为不在this.$router里面，所以直接会跳转到404。</p>
<p>但是出现了问题：</p>
<p>​    问题一：渲染路由的时候得保证侧边栏路由的顺序是可控的，如何实现？</p>
<p>​    想法：顺序确定的静态路由写在前面，会变化顺序的动态路由写在后面，但是权限所有用户都有就是。</p>
<p>​    问题二：addRoute产生的路由不是响应式的，不能用于动态渲染路由</p>
<p>​    想法：使用vuex来渲染路由</p>
<h3 id="方案二-维持"><a href="#方案二-维持" class="headerlink" title="方案二(维持)"></a>方案二(维持)</h3><p>维持原来的，只不过尽量缩短roleFront.js的数据，用roleFront.js里面的数据来判断是否渲染侧边栏项目和拦截跳转路由</p>
<p>vue3重构的时候选择使用方案一，这里顺便提出目前项目的不足：</p>
<ol>
<li>侧边栏不能多级路由渲染，只能两级</li>
<li>权限还是不满意</li>
</ol>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全</title>
    <url>/2021/02/06/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h1><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote>
<p>xss：跨站脚本攻击(Cross Site Scripting)，最常见的攻击方法，攻击者通过注入非法的html标签或者JavaScript代码，当用户浏览该网页时控制用户浏览器</p>
</blockquote>
<p>危害：</p>
<ul>
<li>利用虚假输入表单骗取用户个人信息</li>
<li>利用脚本窃取用户cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求</li>
<li>显示伪造的文章或图片</li>
</ul>
<h3 id="DOM-xss"><a href="#DOM-xss" class="headerlink" title="DOM xss"></a>DOM xss</h3><blockquote>
<p>使用DOM可以允许程序和脚本动态的访问和更新DOM的内容、结构和样式，它不需要服务器解析响应，可以认为是客户端攻击</p>
</blockquote>
<p>DOM 型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL。</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
<p>DOM 型 XSS 跟后两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</p>
<h4 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h4><p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</p>
<p>如果用 Vue/React 技术栈，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患。</p>
<p>DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</p>
<h3 id="反射型-xss"><a href="#反射型-xss" class="headerlink" title="反射型 xss"></a>反射型 xss</h3><blockquote>
<p>反射型xss也称为非持久性xss，是现在**<em>最容易出现**</em>的一种xss漏洞。发出请求时，xss代码出现在url中，最后提交给服务器，服务器解析后响应xss代码，最后浏览器执行</p>
</blockquote>
<p>反射型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li>
</ol>
<h3 id="存储型-xss"><a href="#存储型-xss" class="headerlink" title="存储型 xss"></a>存储型 xss</h3><blockquote>
<p>存储型xss又称为持久性xss，是最危险的一种跨站脚本，相比其他两种具有更高的隐蔽性，所以危害更大，它不需要用户手动触发，允许用户存储数据的web程序都可能存在存储型xss漏洞，当攻击者提交一段xss代码后，被服务器接受并存储，当所有浏览者访问某个页面时都会被xss，最典型的例子就是留言板</p>
</blockquote>
<h4 id="存储型xss攻击样例"><a href="#存储型xss攻击样例" class="headerlink" title="存储型xss攻击样例"></a>存储型xss攻击样例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showInput</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> col = <span class="built_in">document</span>.getElementById(<span class="string">&quot;txt&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> val = col.value;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;display&quot;</span>);</span></span><br><span class="line"><span class="javascript">          dv.innerText = val; <span class="comment">// 这里可以看到直接innerText的不会被执行</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>存储型XSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showInput()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;display&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>试试水<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="comment">// 但是直接放入的会被执行，故需要防止数据库直接存储信息</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// while (true) &#123;</span></span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&#x27;Hello&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      alert(<span class="built_in">document</span>.cookie)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>如果数据库直接存储脚本的话，就会执行脚本，在客户端不会执行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul>
<li><p>httpOnly：在cookie中设置httpOnly</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa</span></span><br><span class="line">  ctx.cookies.set(name, value, &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span> <span class="comment">// 默认为 true</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>输入检查：对邮箱、电话号码、用户名、密码等按照规定格式输入。前后端都要检查，因为可以绕过直接访问接口。</p>
<ol>
<li>HTML 转义是非常复杂的，在不同的情况下要采用不同的转义规则。如果采用了错误的转义规则，很有可能会埋下 XSS 隐患。</li>
<li>应当尽量避免自己写转义库，而应当采用成熟的、业界通用的转义库。</li>
</ol>
</li>
<li><p>对于链接跳转，如a href=”xxx” 或 location.href=”xxx”，要检验其内容，禁止以 javascript:开头的链接，和其他非法的 scheme。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://xxx/?redirect_to=javascript:alert(&#x27;XSS&#x27;)</span><br><span class="line">http://xxx/?redirect_to=%20javascript:alert(&#x27;XSS&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;session内容&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 直接获取session内容</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(sessionStorage.getItem(&#x27;a&#x27;))&quot;</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>HtmlEncode：某些情况下，不能对用户进行严格过滤，这时候需要对标签进行转换</li>
</ul>
<p><img src="/.com//1.jpg"></p>
<ul>
<li><p>JavaScriptEncode：对下列字符加上反斜杠</p>
<p><img src="/.com//2.jpg"></p>
</li>
</ul>
<h3 id="XSS注入方法"><a href="#XSS注入方法" class="headerlink" title="XSS注入方法"></a>XSS注入方法</h3><ul>
<li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</li>
<li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</li>
<li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</li>
<li>在标签的 href、src 等属性中，包含 <code>javascript:</code> 等可执行代码。</li>
<li>在 onload、onerror、onclick 等事件中，注入不受控制代码。</li>
<li>在 style 属性和标签中，包含类似 <code>background-image:url(&quot;javascript:...&quot;);</code> 的代码（新版本浏览器已经可以防范）。</li>
<li>在 style 属性和标签中，包含类似 <code>expression(...)</code> 的 CSS 表达式代码（新版本浏览器已经可以防范）。</li>
</ul>
<h3 id="减少漏洞产生"><a href="#减少漏洞产生" class="headerlink" title="减少漏洞产生"></a>减少漏洞产生</h3><ul>
<li><strong>利用模板引擎</strong> 开启模板引擎自带的 HTML 转义功能。例如： 在 ejs 中，尽量使用 <code>&lt;%= data %&gt;</code> 而不是 <code>&lt;%- data %&gt;</code>； 在 doT.js 中，尽量使用 <code>&#123;&#123;! data &#125;` 而不是 `&#123;&#123;= data &#125;`； 在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 `freemarker.core.OutputFormat`。
- **避免内联事件** 尽量不要使用 `onLoad="onload('&#123;&#123;data&#125;&#125;&#39;)&quot;</code>、<code>onClick=&quot;go(&#39;&#123;&#123;action&#125;&#125;&#39;)&quot;</code> 这种拼接内联事件的写法。在 JavaScript 中通过 <code>.addEventlistener()</code> 事件绑定会更安全。</li>
<li><strong>避免拼接 HTML</strong> 前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 <code>createElement</code>、<code>setAttribute</code> 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。</li>
<li><strong>时刻保持警惕</strong> 在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。</li>
<li><strong>增加攻击难度，降低攻击后果</strong> 通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。</li>
<li><strong>主动检测和发现</strong> 可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。</li>
</ul>
<h3 id="XSS攻击练习"><a href="#XSS攻击练习" class="headerlink" title="XSS攻击练习"></a>XSS攻击练习</h3><p><a href="https://alf.nu/alert1">alert(1) to win</a> <a href="http://prompt.ml/">prompt(1) to win</a> <a href="https://xss-game.appspot.com/">XSS game</a></p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote>
<p>csrf：跨站点请求伪造(Cross-Site Request Forgeries)。冒充用户发起请求(在用户不知情的情况下)，完成一些违背用户意愿的事情(如修改用户信息等)</p>
</blockquote>
<p>可能造成以下影响：</p>
<ul>
<li>利用已通过认证的用户权限更新设定信息等</li>
<li>利用已通过认证的用户权限购买商品</li>
</ul>
<p><img src="/.com//3.jpg"></p>
<h3 id="CSRF攻击流程与特点"><a href="#CSRF攻击流程与特点" class="headerlink" title="CSRF攻击流程与特点"></a>CSRF攻击流程与特点</h3><p>一个典型的CSRF攻击有着如下的流程：</p>
<ul>
<li><a href="http://受害者登录a.com/">受害者登录a.com</a>，并保留了登录凭证（Cookie）。</li>
<li><a href="http://攻击者引诱受害者访问了b.com/">攻击者引诱受害者访问了b.com</a>。</li>
<li><a href="http://b.com/">b.com</a> 向 <a href="http://a.com/">a.com</a> 发送了一个请求：<a href="http://a.com/act=xx%E3%80%82%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E9%BB%98%E8%AE%A4%E6%90%BA%E5%B8%A6a.com%E7%9A%84Cookie%E3%80%82">a.com/act=xx。浏览器会…</a></li>
<li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li>
<li>a.com以受害者的名义执行了act=xx。</li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li>
</ul>
<p>CSRF的特点</p>
<ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li>
<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。</li>
<li>整个过程<em>攻击者并不能获取到受害者的登录凭证</em>，仅仅是“冒用”。</li>
<li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li>
</ul>
<h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><p>攻击特征：</p>
<ul>
<li>跨域请求。</li>
<li>GET类型请求Header的MIME类型大概率为图片，而实际返回Header的MIME类型为Text、JSON、HTML。</li>
</ul>
<p>思路：</p>
<ul>
<li>阻止不明外域的访问<ul>
<li>同源检测</li>
<li>Samesite Cookie</li>
</ul>
</li>
<li>提交时要求附加本域才能获取的信息<ul>
<li>CSRF Token</li>
<li>双重Cookie验证</li>
</ul>
</li>
</ul>
<p>方法：</p>
<ul>
<li>验证码：强迫用户与应用交互才能完成请求，很有效但是用户体验较差</li>
<li>尽量使用post，限制使用get</li>
<li>Referer check：请求来源限制，但不能保证100%有效，可能取不到Referer或者收到伪造的Referer</li>
<li>token:思路如下<ol>
<li>后端随机产生token，存到session中，同时后端把token传给前端</li>
<li>前端提交请求时，把token加入头部传给后端</li>
<li>后端验证传来的token与session是否一致，一致则合法</li>
<li>Tip:若网站同时存在XSS漏洞时，这个方法没用！</li>
</ol>
</li>
</ul>
<p>用户安全建议：</p>
<ul>
<li>使用网页版邮件的浏览邮件或者新闻也会带来额外的风险，因为查看邮件或者新闻消息有可能导致恶意代码的攻击。</li>
<li>尽量不要打开可疑的链接，一定要打开时，使用不常用的浏览器。</li>
</ul>
<h2 id="点击劫持ClickJacking"><a href="#点击劫持ClickJacking" class="headerlink" title="点击劫持ClickJacking"></a>点击劫持ClickJacking</h2><blockquote>
<p>是指透明的按钮或链接做成的陷阱，覆盖在web页面上，诱使用户在不知情的情况下，点击链接的攻击手段，这种行为又称为界面伪装(UI Redressing)</p>
</blockquote>
<h3 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h3><ul>
<li>X-FRAME-OPTIONS</li>
</ul>
<p>X-FRAME-OPTIONS响应头给浏览器指示允许一个页面是否可在frame、iframe或者object展示的标记，网站可以使用此功能确保自己的网站内容没有被嵌到比尔网站中，也可以避免点击劫持</p>
<ul>
<li>js 判断顶层窗口跳转，可轻易破解，意义不大</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome-DevTools</title>
    <url>/2021/02/05/Chrome-DevTools/</url>
    <content><![CDATA[<h1 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome-DevTools"></a>Chrome-DevTools</h1><h2 id="通过节点截图获取DOM元素"><a href="#通过节点截图获取DOM元素" class="headerlink" title="通过节点截图获取DOM元素"></a>通过节点截图获取DOM元素</h2><p><img src="/.com//1.jpg"></p>
<h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><h3 id="在控制台中使用上次操作的值"><a href="#在控制台中使用上次操作的值" class="headerlink" title="在控制台中使用上次操作的值"></a>在控制台中使用上次操作的值</h3><p><img src="/.com//2.jpg"></p>
<h3 id="x-获取元素"><a href="#x-获取元素" class="headerlink" title="$x()/$()/?()获取元素"></a>$x()/$()/?()获取元素</h3><p><code>$()</code> - 返回满足指定 CSS 规则的第一个元素，此方法为 document.querySelector()的简化。</p>
<p><code>?()</code> - 返回满足指定 CSS 规则的所有元素，此方法为 querySelectorAll()的简化。</p>
<p><code>$x()</code> - 返回满足指定 XPath 的所有元素。</p>
<p><img src="/.com//12.jpg"></p>
<h3 id="获取最近5个审查元素选中过的DOM节点"><a href="#获取最近5个审查元素选中过的DOM节点" class="headerlink" title="获取最近5个审查元素选中过的DOM节点"></a>获取最近5个审查元素选中过的DOM节点</h3><p><img src="/.com//11.jpg"></p>
<h3 id="keys-values"><a href="#keys-values" class="headerlink" title="keys()/values()"></a>keys()/values()</h3><p><img src="/.com//13.jpg"></p>
<h3 id="copy-Save-global-variable"><a href="#copy-Save-global-variable" class="headerlink" title="copy()/Save global variable()"></a>copy()/Save global variable()</h3><p><img src="/.com//14.jpg"></p>
<h3 id="console-log-warn-error"><a href="#console-log-warn-error" class="headerlink" title="console.log/warn/error()"></a>console.log/warn/error()</h3><p><img src="/.com//5.jpg"></p>
<h3 id="console-time-console-timeEnd"><a href="#console-time-console-timeEnd" class="headerlink" title="console.time(),console.timeEnd()"></a>console.time(),console.timeEnd()</h3><p><img src="/.com//6.jpg"></p>
<h3 id="console-count"><a href="#console-count" class="headerlink" title="console.count()"></a>console.count()</h3><p><img src="/.com//7.jpg"></p>
<h3 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace()"></a>console.trace()</h3><p><img src="/.com//8.jpg"></p>
<h3 id="console-group"><a href="#console-group" class="headerlink" title="console.group()"></a>console.group()</h3><p><img src="/.com//9.jpg"></p>
<p><img src="/.com//10.jpg"></p>
<h3 id="任意编辑网页内文本"><a href="#任意编辑网页内文本" class="headerlink" title="任意编辑网页内文本"></a>任意编辑网页内文本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.contentEditable=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>



<p><img src="/.com//3.jpg"></p>
<h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h3 id="递增-递减CSS属性值"><a href="#递增-递减CSS属性值" class="headerlink" title="递增/递减CSS属性值"></a>递增/递减CSS属性值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 增量0.1</span><br><span class="line">  * Windows： Alt +向上和Alt +向下</span><br><span class="line">* 增量1</span><br><span class="line">  * Windows：向上+向下</span><br><span class="line">* 增量10</span><br><span class="line">  * Windows：shift+向上和shift+向下</span><br><span class="line">* 递增100</span><br><span class="line">  * Windows： Ctrl +向上和Ctrl +向下</span><br></pre></td></tr></table></figure>



<h3 id="取色"><a href="#取色" class="headerlink" title="取色"></a>取色</h3><p><img src="/.com//25.jpg"></p>
<h3 id="css调试"><a href="#css调试" class="headerlink" title="css调试"></a>css调试</h3><p>选择元素状态</p>
<p><img src="/.com//15.jpg"></p>
<p>computed样式跳转</p>
<p><img src="/.com//16.jpg"></p>
<h3 id="选中元素按H隐藏-按删除键删除"><a href="#选中元素按H隐藏-按删除键删除" class="headerlink" title="选中元素按H隐藏/按删除键删除"></a>选中元素按H隐藏/按删除键删除</h3><p><img src="/.com//17.jpg"></p>
<h2 id="NetWork"><a href="#NetWork" class="headerlink" title="NetWork"></a>NetWork</h2><p><img src="/.com//18.jpg"></p>
<p><img src="/.com//19.jpg"></p>
<h3 id="Request-Table"><a href="#Request-Table" class="headerlink" title="Request Table"></a>Request Table</h3><p><img src="/.com//23.jpg"></p>
<h3 id="单个资源的Timing标签"><a href="#单个资源的Timing标签" class="headerlink" title="单个资源的Timing标签"></a>单个资源的Timing标签</h3><p><img src="/.com//21.jpg"></p>
<ul>
<li><code>Queuing</code> (排队)</li>
</ul>
<blockquote>
<p>浏览器在以下情况下对请求排队</p>
<ol>
<li>存在更高优先级的请求, 请求被渲染引擎推迟，这经常发生在 images（图像）上, 因为它被认为比关键资源（如脚本 / 样式）的优先级低。</li>
<li>此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1。在等待一个即将被释放的不可用的 TCP socket</li>
<li>浏览器正在短暂分配磁盘缓存中的空间，生成磁盘缓存条目（通常非常快）</li>
</ol>
</blockquote>
<ul>
<li><p><code>Stalled</code> (停滞) - 发送请求之前等待的时间。它可能因为进入队列的任意原因而被阻塞，这个时间包括代理协商的时间。请求可能会因 Queueing 中描述的任何原因而停止。</p>
</li>
<li><p><code>DNS lookup</code> (DNS 查找) - 浏览器正在解析请求 IP 地址，页面上的每个新域都需要完整的往返 (roundtrip) 才能进行 DNS 查找</p>
</li>
<li><p><code>Proxy Negotiation</code> - 浏览器正在与代理服务器协商请求</p>
</li>
<li><p><code>initial connection</code> (初始连接) - 建立连接所需的时间，包括 TCP 握手 / 重试和协商 SSL。</p>
</li>
<li><p><code>SSL handshake</code> (SSL 握手) - 完成 SSL 握手所用的时间</p>
</li>
<li><p><code>Request sent</code> (请求发送) - 发出网络请求所花费的时间，通常是几分之一毫秒。</p>
</li>
<li><p><code>Waiting</code> (等待) - 等待初始响应所花费的时间，也称为<code>Time To First Byte</code>(接收到第一个字节所花费的时间)。这个时间除了等待服务器传递响应所花费的时间之外，还包括 1 次往返延迟时间及服务器准备响应所用的时间（服务器发送数据的延迟时间）</p>
</li>
<li><p><code>Content Download</code>(内容下载) - 接收响应数据所花费的时间 (从接收到第一个字节开始，到下载完最后一个字节结束)</p>
</li>
<li><p><code>ServiceWorker Preparation</code> - 浏览器正在启动 Service Worker</p>
</li>
<li><p><code>Request to ServiceWorker</code> - 正在将请求发送到 Service Worker</p>
</li>
<li><p><code>Receiving Push</code> - 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据</p>
</li>
<li><p><code>Reading Push</code> - 浏览器正在读取之前收到的本地数据</p>
</li>
</ul>
<p><img src="/.com//20.jpg"></p>
<h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p><img src="/.com//22.jpg"></p>
<ul>
<li><code>requests</code> 查看请求的总数量 </li>
<li><code>transferred</code> 查看请求的总大小</li>
<li><code>resources</code> 资源</li>
<li><code>Finish</code> 所有 http 请求响应完成的时间</li>
<li>DOMContentLoaded 时间</li>
<li>load 时间</li>
</ul>
<h3 id="选择网络速度"><a href="#选择网络速度" class="headerlink" title="选择网络速度"></a>选择网络速度</h3><p><img src="/.com//4.jpg"></p>
<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p><img src="/.com//25.jpg"></p>
<h2 id="Render实时检测网页变化"><a href="#Render实时检测网页变化" class="headerlink" title="Render实时检测网页变化"></a>Render实时检测网页变化</h2><p><img src="/.com//26.jpg"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex布局</title>
    <url>/2021/01/04/Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><p>此笔记是为平时使用flex布局时快速索引</p>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 决定主轴的方向</span><br><span class="line">flex-direction:row | row-reverse | column | column-reverse;</span><br><span class="line"></span><br><span class="line">// 换行</span><br><span class="line">flex-wrap:nowrap | wrap | wrap-reverse;</span><br><span class="line"></span><br><span class="line">// flex-flow为flex-direction和flex-wrap的简写，默认值为row,nowrap</span><br><span class="line">flex-flow:&lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line"></span><br><span class="line">// 主轴上的对齐方式</span><br><span class="line">justify-content:flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">// space-between：两端对齐，项目之间的间隔都相等。</span><br><span class="line">// space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br><span class="line"></span><br><span class="line">// 单一交叉轴对齐方式</span><br><span class="line">align-items:flex-start | flex-end | center | baseline | stretch;</span><br><span class="line"></span><br><span class="line">// 多根交叉轴的对齐方式</span><br><span class="line">align-content:flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure>



<h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 项目的排列顺序,数值越小越靠前,默认为0</span><br><span class="line"><span class="selector-tag">order</span>: &lt;<span class="selector-tag">integer</span>&gt;;</span><br><span class="line"></span><br><span class="line">// 项目的放大比例,默认为0</span><br><span class="line"><span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">// 项目的缩小比例</span><br><span class="line"><span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">// flex属性为flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</span><br><span class="line">flex: none | [ &lt;&#x27;flex-grow&#x27;&gt; &lt;&#x27;flex-shrink&#x27;&gt;? || &lt;&#x27;flex-basis&#x27;&gt; ]</span><br><span class="line">// 该属性有两个快捷值 auto (1 1 auto) 和 none (0 0 auto)。</span><br><span class="line"></span><br><span class="line">// 允许与其他项目不一样的对齐方式,可覆盖align-items属性,默认为auto,继承父的align-items属性,若没有,等同stretch</span><br><span class="line">align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>go服务器部署</title>
    <url>/2021/01/03/go%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="go服务器部署"><a href="#go服务器部署" class="headerlink" title="go服务器部署"></a>go服务器部署</h1><ol>
<li>从官网下载Go语言安装包：<a href="https://studygolang.com/dl">https://studygolang.com/dl</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;studygolang.com&#x2F;dl&#x2F;golang&#x2F;go1.15.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解压安装包到指定目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf go1.15.linux-amd64.tar.gz -C &#x2F;opt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将包复制到/usr/local</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -r go &#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在当前用户目录创建go目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir go</span><br><span class="line">mkdir goprogram</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>设置环境变量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go</span><br><span class="line">export GOPATH&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;goprogram</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin</span><br><span class="line">export GO111MODULE&#x3D;on</span><br><span class="line">export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io</span><br><span class="line"></span><br><span class="line">#先进入root用户</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">#查看go环境</span><br><span class="line">go env</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在开发目录下创建文件夹</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;ubuntu&#x2F;go&#x2F;program</span><br><span class="line">mkdir bin</span><br><span class="line">mkdir src</span><br><span class="line">mkdir pkg</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>编写go文件并运行</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd bin</span><br><span class="line">vim hello.go</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Println(&quot;hello,world!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#退出后,直接运行</span><br><span class="line">go run hello.go</span><br><span class="line"></span><br><span class="line">#使用go build生成可执行文件</span><br><span class="line">go build hello.go</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>服务器端部署</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将源代码拷贝到服务器,服务器上编译</span><br><span class="line">go build main.go</span><br><span class="line">#而后将生成可执行文件main</span><br><span class="line">#执行文件</span><br><span class="line">nohup .&#x2F;main &amp;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>go常用命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编译并把编译好的结果移到$GOPATH&#x2F;pkg或者$GOPATH&#x2F;bin</span><br><span class="line">go install</span><br><span class="line"></span><br><span class="line">#编译</span><br><span class="line">go build</span><br><span class="line">-o:指定输出文件名,可以带上路径 go build -O out main.go</span><br><span class="line">-i 安装相应的包,编译+go install</span><br><span class="line">-v 打印出来正在编译的包名</span><br><span class="line"></span><br><span class="line">#安装第三方包</span><br><span class="line">go get</span><br><span class="line">-d 只下载不安装</span><br><span class="line">-u 强制使用网络去更新包和它的依赖包</span><br><span class="line">-v 显示执行的命令</span><br><span class="line"></span><br><span class="line">#移除当前源码包和关联源码包里面编译生成的文件</span><br><span class="line">go clean</span><br><span class="line"></span><br><span class="line">#格式化代码</span><br><span class="line">go fmt</span><br><span class="line"></span><br><span class="line">#编译并运行go程序</span><br><span class="line">go run</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>前端权限思路</title>
    <url>/2020/12/14/%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h1><p>此版本为权限的思路，实例请看《前端权限之路》</p>
<h2 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h2><h3 id="后端权限"><a href="#后端权限" class="headerlink" title="后端权限"></a>后端权限</h3><p>后端获取用户状态方式：</p>
<ul>
<li>cookie</li>
<li>session</li>
<li>token</li>
</ul>
<p>后端权限设计RBAC(基于角色的权限控制，三者各一张表)：</p>
<ul>
<li>用户</li>
<li>角色</li>
<li>权限</li>
</ul>
<h2 id="前端权限意义"><a href="#前端权限意义" class="headerlink" title="前端权限意义"></a>前端权限意义</h2><ul>
<li>降低非法操作可能性</li>
<li>尽可能排除不必要请求</li>
<li>提高用户体验</li>
</ul>
<h1 id="Vue的权限控制实现"><a href="#Vue的权限控制实现" class="headerlink" title="Vue的权限控制实现"></a>Vue的权限控制实现</h1><h2 id="侧边栏的控制"><a href="#侧边栏的控制" class="headerlink" title="侧边栏的控制"></a>侧边栏的控制</h2><ul>
<li>不同用户展示不同的列表，根据后端传来的菜单信息v-for进行动态渲染</li>
<li>前端自己渲染，判断用户类型进行渲染</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户登录后 后端传来的权限</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">500</span>,</span><br><span class="line">	<span class="string">&quot;rid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">	<span class="string">&quot;mobile&quot;</span>: <span class="string">&quot;13999999999&quot;</span>,</span><br><span class="line">	<span class="string">&quot;email&quot;</span>: <span class="string">&quot;123999@qq.com&quot;</span>,</span><br><span class="line">	<span class="string">&quot;token&quot;</span>: <span class="string">&quot;Bearer</span></span><br><span class="line"><span class="string">	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1M</span></span><br><span class="line"><span class="string">	TI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHmtPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM&quot;</span></span><br><span class="line">    <span class="comment">// token,⽤于前端⽤户的状态保持</span></span><br><span class="line">&#125;,</span><br><span class="line">	<span class="string">&quot;rights&quot;</span>: [&#123; </span><br><span class="line">    <span class="comment">// rights:该⽤户具备的权限数据,⼀级权限就对应⼀级菜单,⼆级权限就对应⼆级菜单,存在vuex和sessionStorage中</span></span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">125</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;⽤户管理&quot;</span>,</span><br><span class="line">	<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;icon-user&quot;</span>,</span><br><span class="line">	<span class="string">&quot;children&quot;</span>: [&#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">110</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;⽤户列表&quot;</span>,</span><br><span class="line">	<span class="string">&quot;path&quot;</span>: <span class="string">&quot;users&quot;</span>,</span><br><span class="line">	<span class="string">&quot;rights&quot;</span>: [<span class="string">&quot;view&quot;</span>, <span class="string">&quot;edit&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">103</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;⻆⾊管理&quot;</span>,</span><br><span class="line">	<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;icon-tijikongjian&quot;</span>,</span><br><span class="line">	<span class="string">&quot;children&quot;</span>: [&#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">111</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;⻆⾊列表&quot;</span>,</span><br><span class="line">	<span class="string">&quot;path&quot;</span>: <span class="string">&quot;roles&quot;</span>,</span><br><span class="line">	<span class="string">&quot;rights&quot;</span>: [<span class="string">&quot;view&quot;</span>, <span class="string">&quot;edit&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">	<span class="string">&quot;icon&quot;</span>: <span class="string">&quot;icon-shangpin&quot;</span>,</span><br><span class="line">	<span class="string">&quot;children&quot;</span>: [&#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">104</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;商品列表&quot;</span>,</span><br><span class="line">	<span class="string">&quot;path&quot;</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">	<span class="string">&quot;rights&quot;</span>: [<span class="string">&quot;view&quot;</span>, <span class="string">&quot;edit&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">	<span class="string">&quot;id&quot;</span>: <span class="number">121</span>,</span><br><span class="line">	<span class="string">&quot;authName&quot;</span>: <span class="string">&quot;商品分类&quot;</span>,</span><br><span class="line">	<span class="string">&quot;path&quot;</span>: <span class="string">&quot;categories&quot;</span>,</span><br><span class="line">	<span class="string">&quot;rights&quot;</span>: [<span class="string">&quot;view&quot;</span>, <span class="string">&quot;edit&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;],</span><br><span class="line">	<span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">	<span class="string">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="界面的控制"><a href="#界面的控制" class="headerlink" title="界面的控制"></a>界面的控制</h2><blockquote>
<p>这部分使用路由导航守卫进行控制</p>
<ul>
<li>如果用户没有token则跳转login登陆</li>
<li>如果用户没有权限则跳转404</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否登陆</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&#x27;token&#x27;</span>, res.data.token)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由导航守卫</span></span><br><span class="line">router.beforEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(!token) &#123;</span><br><span class="line">            next(<span class="string">&#x27;/login&#x27;</span>)<span class="comment">// 没有token登陆</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()<span class="comment">//后端测如果没有权限则返回404</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态路由 将要抽离的路由在router中移开</span></span><br><span class="line"><span class="keyword">const</span> userRule = &#123; <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">component</span>: Users &#125;</span><br><span class="line"><span class="keyword">const</span> categoryRule = &#123; <span class="attr">path</span>: <span class="string">&#x27;/categories&#x27;</span>, <span class="attr">component</span>: GoodsCate &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ruleMapping = &#123;</span><br><span class="line">    <span class="string">&#x27;users&#x27;</span>: userRule,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initDynamicRoutes</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 添加到登陆成功的逻辑中,登陆成功后渲染侧边栏</span></span><br><span class="line">    <span class="comment">// 还要添加到app.vue的created里面,以免用户刷新后权限消失</span></span><br><span class="line">    <span class="keyword">const</span> currentRoutes = router.options.routes <span class="comment">// 路由里面的可达页面</span></span><br><span class="line">    <span class="keyword">const</span> rightList = store.state.rightList</span><br><span class="line">    rightList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="comment">// 遍历rightList里面的二级权限看看是否有权限，如果有的话则添加路由</span></span><br><span class="line">        item.children.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            currentRoutes[<span class="number">2</span>].children.push(ruleMapping[item.path])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    router.addRoutes(currentRoutes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="按钮的控制"><a href="#按钮的控制" class="headerlink" title="按钮的控制"></a>按钮的控制</h2><blockquote>
<p>如果用户没有对应的权限则不展示某些按钮</p>
<p>写入对应permission.js判断是否有权限，使用对应v-permission指令</p>
</blockquote>
<h2 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h2><blockquote>
<p>如果用户通过调试工具发出请求，此时拦截</p>
<p>创建对应权限操作映射，通过axios拦截非权限操作</p>
</blockquote>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue全家桶</title>
    <url>/2020/11/28/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<h1 id="Vue全家桶"><a href="#Vue全家桶" class="headerlink" title="Vue全家桶"></a>Vue全家桶</h1><p>对vue的查漏补缺</p>
<h2 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div id=<span class="string">&quot;app&quot;</span></span><br><span class="line">    div &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="comment">// 不需要操作dom直接将数据挂载到标签上</span></span><br><span class="line">script</span><br><span class="line">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#app&#x27;</span>,<span class="comment">// 元素挂载位置，CSS选择器或者DOM元素</span></span><br><span class="line">        data: &#123;<span class="comment">// 模型数据</span></span><br><span class="line">            msg: <span class="string">&#x27;Hello Vue&#x27;</span><span class="comment">// 数据填充到标签里</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><p><img src="/.com//1.jpg"></p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="数据绑定指令"><a href="#数据绑定指令" class="headerlink" title="数据绑定指令"></a>数据绑定指令</h4><ul>
<li>v-text：填充纯文本</li>
<li>v-html：填充HTML片段；但存在安全问题、本网站内部数据可以使用，来自第三方的数据不可以用</li>
<li>v-pre：填充原始信息，跳过编译过程</li>
</ul>
<h4 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h4><blockquote>
<p>html5的响应式：样式随着屏幕变化变化</p>
<p>数据响应式：数据变化导致页面内容变化</p>
</blockquote>
<ul>
<li>数据绑定：将数据填充到标签中</li>
<li>v-once：显示内容后不再具有响应式功能</li>
<li>双向数据绑定：v-model,底层实现就是v-on和v-bind结合</li>
</ul>
<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul>
<li>v-on：语法糖@</li>
</ul>
<h5 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h5><ul>
<li>直接绑定函数名称@click=’say’</li>
<li>调用函数@click=’say()’</li>
</ul>
<h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><ul>
<li>@click=’say{“hi”,$event}’如果事件直接绑定函数名称，那么默认事件对象为事件函数的一个参数</li>
<li>如果事件绑定函数调用，那么事件对象必须作为最后一个参数显式传递，且名称必须为$event</li>
</ul>
<h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><ul>
<li>@click.stop阻止冒泡</li>
<li>@click.prevent阻止默认行为</li>
</ul>
<h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><ul>
<li>v-bind：缩写’:’</li>
</ul>
<h4 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">：<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    isActive: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    handle()&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive=!<span class="built_in">this</span>.isActive</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h3><p><img src="/.com//2.jpg"></p>
<ul>
<li>M(model)：模型数据</li>
<li>V(view)：视图，模版，本质为DOM</li>
<li>VM(View-Model)：控制逻辑，将Model和View结合</li>
</ul>
<blockquote>
<p>从Model到View通过数据绑定，从View到Model通过事件监听的方式</p>
</blockquote>
<h3 id="vue常用特性"><a href="#vue常用特性" class="headerlink" title="vue常用特性"></a>vue常用特性</h3><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>&#123;</span><br><span class="line">	inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123; <span class="comment">// el是element的简写，表示指令绑定的元素</span></span><br><span class="line">	el.focus();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">input type=<span class="string">&quot;text&quot;</span> v-focus</span><br></pre></td></tr></table></figure>



<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p><img src="/.com//3.jpg"></p>
<blockquote>
<p>监听器应用场景：执行异步或开销比较大的操作</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fullName = val + <span class="string">&#x27;&#x27;</span> +<span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><blockquote>
<p>组件化开发思想：</p>
<ul>
<li>标准：组件标准规范</li>
<li>分治：不同功能封装到不同组件中</li>
<li>重用：组件可以更换</li>
<li>组合：组合新的产品</li>
</ul>
</blockquote>
<p><img src="/.com//4.jpg"></p>
<h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><ul>
<li>每个组件都是独立的</li>
<li>组件模版必须是单个根元素</li>
<li>组件命名推荐短横线-</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局组件注册语法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;组件名称&#x27;</span>,&#123;</span><br><span class="line">	data: 组件数据,</span><br><span class="line">	template: 组件模块内容</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>,&#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:<span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;点击了&#123;&#123;count&#125;&#125;次.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">div id=<span class="string">&quot;app&quot;</span></span><br><span class="line">	button-counter /</span><br><span class="line">/div</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部组件注册</span></span><br><span class="line"><span class="comment">// 局部组件只能在注册他的父组件中使用</span></span><br><span class="line"><span class="keyword">var</span> ComponentA=&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB=&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC=&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>:ComponentA,</span><br><span class="line">    <span class="string">&#x27;component-b&#x27;</span>:ComponentB,</span><br><span class="line">    <span class="string">&#x27;component-c&#x27;</span>:ComponentC</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="组件间数据交换"><a href="#组件间数据交换" class="headerlink" title="组件间数据交换"></a>组件间数据交换</h3><h4 id="组件间数据交互"><a href="#组件间数据交互" class="headerlink" title="组件间数据交互"></a>组件间数据交互</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件向子组件传值</span></span><br><span class="line"><span class="comment">// 组件内部通过props接收传递的值</span></span><br><span class="line">Vue.component(<span class="string">&#x27;menu-item&#x27;</span>,&#123;</span><br><span class="line">    props: [<span class="string">&#x27;title&#x27;</span>],<span class="comment">//props也要使用短横线形式-</span></span><br><span class="line">    <span class="comment">// props只允许父元素向子组件传值，单向数据流</span></span><br><span class="line">    template:<span class="string">&#x27;...&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">menu-item title=<span class="string">&quot;来自父组件的数据&quot;</span></span><br><span class="line">menu-item :title=<span class="string">&quot;title&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件向父组件传值，通过自定义事件</span></span><br><span class="line">button @click=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;,0.1)&#x27;</span><span class="comment">//子组件，自定义事件,携带一个值</span></span><br><span class="line">menu-item @enlarge-text=<span class="string">&#x27;handle($event)&#x27;</span><span class="comment">//父组件，绑定事件，通过$event获取值</span></span><br><span class="line"><span class="comment">// 使用js添加事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非父子组件通信，通过事件中心来触发和监听</span></span><br><span class="line"><span class="keyword">var</span> eventHub=<span class="keyword">new</span> Vue()</span><br><span class="line">eventHub.$on(<span class="string">&#x27;add-todo&#x27;</span>,addTodo)<span class="comment">//监听</span></span><br><span class="line">eventHub.$off(<span class="string">&#x27;add-todo&#x27;</span>)<span class="comment">//销毁</span></span><br><span class="line">eventHub.$emit(<span class="string">&#x27;add-todo&#x27;</span>,id)<span class="comment">//触发事件</span></span><br></pre></td></tr></table></figure>



<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><blockquote>
<p>之前为数据交互，这里为模版的内容</p>
<p>简而言之：组件插槽是调用模版，插槽内的数据是可自定义传入的</p>
</blockquote>
<p><img src="/.com//5.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件插槽</span></span><br><span class="line">Vue.component(<span class="string">&#x27;alert-box&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">	div class=&quot;demo-alert-box&quot;</span></span><br><span class="line"><span class="string">	strong Error! strong</span></span><br><span class="line"><span class="string">	slot slot</span></span><br><span class="line"><span class="string">	div`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">alert-box <span class="comment">//如果传递了内容则用内容，否则使用slot默认内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 具名插槽</span></span><br><span class="line">slot name=<span class="string">&quot;header&quot;</span><span class="comment">//插槽定义</span></span><br><span class="line">h1 slot=<span class="string">&quot;header&quot;</span><span class="comment">//插槽内容</span></span><br></pre></td></tr></table></figure>



<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote>
<p>购物车</p>
<ul>
<li>标题组件</li>
<li>列表组件(再划分组件)</li>
<li>结算组件</li>
</ul>
</blockquote>
<p><img src="/.com//6.jpg"></p>
<h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><blockquote>
<p>Js异步效果</p>
<ul>
<li>定时任务</li>
<li>Ajax</li>
<li>事件函数</li>
</ul>
<p>多次异步结果分析：</p>
<ul>
<li>多次异步调用的结果顺序不确定</li>
<li>异步调用结果如果存在依赖需要嵌套</li>
</ul>
</blockquote>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><ul>
<li><p>async/await是ES7语法</p>
</li>
<li><p>async用于函数上，返回的是Promise实例对象</p>
</li>
<li><p>await用于async函数中</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单个请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> ret=<span class="keyword">await</span> axios.get(<span class="string">&#x27;adata&#x27;</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(ret.data)</span><br><span class="line">	<span class="keyword">return</span> ret.data</span><br><span class="line">&#125;</span><br><span class="line">queryData().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="click"><a href="#click" class="headerlink" title="@click"></a>@click</h4><p>提交时使用了()出现bug，自己探索了一下</p>
<ul>
<li><p>@click=this.函数名 正常提交时打印的是MouseEvent鼠标事件</p>
</li>
<li><p>@click=this.函数名()时会报错</p>
</li>
<li><p>@click=函数名() 没传参时是undefined</p>
</li>
<li><p>@click=函数名(参数)传的是正常参数</p>
</li>
</ul>
<h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p><img src="/.com//7.jpg"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>jsMdn</title>
    <url>/2020/11/14/jsMdn/</url>
    <content><![CDATA[<h1 id="JsMdn"><a href="#JsMdn" class="headerlink" title="JsMdn"></a>JsMdn</h1><blockquote>
<p>此文用于js内容查漏补缺</p>
<p>因为Mdn的内容较完整故用此网站</p>
</blockquote>
<h2 id="Js指南"><a href="#Js指南" class="headerlink" title="Js指南"></a>Js指南</h2><h3 id="Grammar-and-types"><a href="#Grammar-and-types" class="headerlink" title="Grammar and  types"></a>Grammar and  types</h3><ul>
<li>Js区分大小写，且采用unicode值</li>
<li>如果一条语句只占一行，那么可以不用加分号，但<em>并不建议这么做</em></li>
<li>用var和let声明的变量，如果没有赋值则默认为undefined</li>
<li>函数之内为局部变量，之外全局变量</li>
<li>变量提升：Js允许先使用变量后声明，但是这个变量为undefined值(x)</li>
<li>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量</li>
<li>const：对象和数组被定义为常量是不被保护的，所以重新定义不会出错</li>
</ul>
<h3 id="Control-flow-and-error-handling"><a href="#Control-flow-and-error-handling" class="headerlink" title="Control flow and error handling"></a>Control flow and error handling</h3><ul>
<li>if(){}else if(){}else if(){}else{}</li>
<li>if的false包括false，undefined，null，0，NaN，””</li>
</ul>
<h3 id="Loop-and-iteration"><a href="#Loop-and-iteration" class="headerlink" title="Loop and iteration"></a>Loop and iteration</h3><ul>
<li>label语句：用于更好的跳出循环或者继续</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">outPoint:<span class="comment">//label:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; <span class="number">10</span> ; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span> )&#123;</span><br><span class="line">      <span class="keyword">break</span> outPoint; <span class="comment">// 在 i = 5，j = 5 时，跳出所有循环，</span></span><br><span class="line">                      <span class="comment">// 返回到整个 outPoint 下方，继续执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(num); <span class="comment">// 输出 55</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同时，break也可以这样写：break [label];continue同</li>
<li>for…in语句循环一个对象的所有可枚举属性，但是for…in迭代数组时返回的除了数字索引外，还可能是自定义的属性名称</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;unique&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    concole.log(arr[i]);<span class="comment">//输出结果还有个函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>for…of适用于迭代Array、map、set、arguments等</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for...in与for...of对比</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.foo = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul>
<li>在另一个函数中定义的函数可以访问在其父函数中定义的所有变量和父函数有权访问的对象(继承)</li>
<li>作用域链:{inside&gt;ouside&gt;全局变量}</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inside</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outside()(<span class="number">10</span>); <span class="comment">// returns 20 instead of 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数的实际参数会存在arguments对象中，可以arguments[i]找出传入的对象，参数的数量arguments.length</li>
</ul>
<h3 id="Expressions-and-Operators"><a href="#Expressions-and-Operators" class="headerlink" title="Expressions and Operators"></a>Expressions and Operators</h3><ul>
<li>全等：===，两边操作数相等且类型相同时返回true</li>
<li>不全等：!==，两边操作数不相等或类型不同时返回true</li>
<li>指数运算符:2**3==8</li>
<li>/&gt;&gt;:算术右移，有符号</li>
<li>/&gt;&gt;&gt;:无符号右移</li>
<li>&amp;：按位与</li>
<li>|：按位或</li>
<li>^：按位异或</li>
<li>~：按位非</li>
<li>delete：删除一个对象或一个对象的属性或者一个数组中某一个值</li>
<li>typeof：返回类型</li>
<li>in：如果所指定属性存在于指定对象中，则返回true：propNameOrNumber in objectName</li>
<li>instanceof：所判别对象确实是所指定类型，返回true：objectName instanceof objectType</li>
</ul>
<h3 id="Indexed-collections"><a href="#Indexed-collections" class="headerlink" title="Indexed collections"></a>Indexed collections</h3><ul>
<li>创建数组：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(element0, element1, ..., elementN);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(element0, element1, ..., elementN);</span><br><span class="line"><span class="keyword">var</span> arr = [element0, element1, ..., elementN];</span><br><span class="line"><span class="comment">//var arr=[4] 和 var arr=new Array(4)是不等效的，</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组的索引可以不只是正整数，但是是作为一个代表数组的对象属性创建，而非数组的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray=<span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">myArray=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;aaaa&#x27;</span>];</span><br><span class="line">myArray[<span class="number">-1</span>]=<span class="number">10</span>;</span><br><span class="line">myArray[<span class="string">&#x27;a&#x27;</span>]=<span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrtest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myArray)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myArray[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>array.length是返回最后一个元素的索引+1</li>
<li>遍历数组可以使用for、for…of、forEach()</li>
</ul>
<h3 id="Keyed-Collection"><a href="#Keyed-Collection" class="headerlink" title="Keyed Collection"></a>Keyed Collection</h3><ul>
<li>Map和Object对比</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Object允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而Map具有更多的优势</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Object的键均为Strings类型，在Map里键可以是任意类型。</span></span><br><span class="line"><span class="comment">必须手动计算Object的尺寸，但是可以很容易地获取使用Map的尺寸。</span></span><br><span class="line"><span class="comment">Map的遍历遵循元素的插入顺序。</span></span><br><span class="line"><span class="comment">Object有原型，所以映射中有一些缺省的键。（可以用 map = Object.create(null) 回避）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用Map。</span></span><br><span class="line"><span class="comment">如果需要将原始值存储为键，则使用Map，因为Object将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。</span></span><br><span class="line"><span class="comment">如果需要对个别元素进行操作，使用Object。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Array和Set对比</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组中用于判断元素是否存在的indexOf 函数效率低下。</span></span><br><span class="line"><span class="comment">Set对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。</span></span><br><span class="line"><span class="comment">数组的indexOf方法无法找到NaN值。</span></span><br><span class="line"><span class="comment">Set对象存储不重复的值，所以不需要手动处理包含重复值的情况。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="Working-with-Objects"><a href="#Working-with-Objects" class="headerlink" title="Working with Objects"></a>Working with Objects</h3><ul>
<li>Object.keys(o)：该方法返回对象 <code>o</code> 自身包含（不包括原型中）的所有可枚举属性的名称的数组。</li>
<li>Object.getOwnPropertyNames(o)：该方法返回对象 <code>o</code> 自身包含（不包括原型中）的所有属性(无论是否可枚举)的名称的数组。</li>
<li>比较对象：只有两个对象有同样的引用时才会返回true</li>
</ul>
<h3 id="Using-Promises"><a href="#Using-Promises" class="headerlink" title="Using Promises"></a>Using Promises</h3><ul>
<li>本质上Promise是一个函数返回的对象，它代表了一个异步操作的完成或者失败，我们可以在它上面绑定回调函数</li>
<li>在本轮事件循环运行完成前，回调函数并不会被调用。</li>
<li>即使异步操作完成/失败后，一样可以通过使用then()调用</li>
<li>then()的链式调用按顺序调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse(result);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">newResult</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doThirdThing(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">finalResult</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(failureCallback);</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.all()和Promise.race()用于并行异步操作</li>
</ul>
<h3 id="Iterators-and-Generators"><a href="#Iterators-and-Generators" class="headerlink" title="Iterators and Generators"></a>Iterators and Generators</h3><blockquote>
<p>迭代器是一个对象，定义一个序列，通过next()方法实现迭代协议(内置类型：String,Array,TypedArray,Map,Set)的对象，该方法返回具有两个属性的对象value，这是next值;done，如果迭代到序列最后一个值，则为true。如果value和done在一起，则为迭代器返回值。</p>
</blockquote>
<h3 id="meta-Programming"><a href="#meta-Programming" class="headerlink" title="meta Programming"></a>meta Programming</h3><blockquote>
<p>元编程，拦截某些操作并实现自定义行为</p>
</blockquote>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><blockquote>
<p>Js是基于原型的</p>
</blockquote>
<h3 id="继承和原型链"><a href="#继承和原型链" class="headerlink" title="继承和原型链"></a>继承和原型链</h3><ul>
<li>原型链：对象属性-&gt;原型属性-&gt;null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.构造函数：通过new调用即构造函数，反之为普通函数</span></span><br><span class="line"><span class="keyword">let</span> person1=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//2.函数Person(),有一个属性prototype(指针)指向原型对象，原形对象也有个指针指向Person对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Person===Person.prototype.constructor);<span class="comment">//constructor实例对象访问原型对象</span></span><br><span class="line"><span class="comment">//3.实例对象person1有一个属性指向原型对象，实例对象可以通过这个属性访问原型对象上的属性和方法</span></span><br><span class="line">Person.prototype.sex = <span class="string">&#x27;男&#x27;</span>; <span class="comment">//给原型对象赋值&#x27;男&#x27;</span></span><br><span class="line">person2.sex = <span class="string">&#x27;女&#x27;</span>; <span class="comment">//单独给person2对象赋值&#x27;女&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sex)  <span class="comment">// &#x27;男&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sex)  <span class="comment">//&#x27;女&#x27; </span></span><br><span class="line"><span class="comment">//说明只有实例对象没有相应属性时才会去访问原型对象的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承也是利用原型链去获取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//在A的原型上绑定sayA()方法</span></span><br><span class="line">A.prototype.sayA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;from A&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//让B的原型对象指向A的一个实例</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="comment">//在B的原型上绑定sayB()方法</span></span><br><span class="line">B.prototype.sayB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;from B&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成一个B的实例</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="comment">//b1可以调用sayB和sayA</span></span><br><span class="line">b1.sayB();<span class="comment">//&#x27;from B&#x27;</span></span><br><span class="line">b1.sayA();<span class="comment">//&#x27;from A&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当继承的函数被调用时，this指向的是当前继承的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  m: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.m()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 当调用 o.m 时，&#x27;this&#x27; 指向了 o.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o);</span><br><span class="line"><span class="comment">// p是一个继承自 o 的对象</span></span><br><span class="line"></span><br><span class="line">p.a = <span class="number">4</span>; <span class="comment">// 创建 p 的自身属性 &#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(p.m()); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 调用 p.m 时，&#x27;this&#x27; 指向了 p</span></span><br><span class="line"><span class="comment">// 又因为 p 继承了 o 的 m 函数</span></span><br><span class="line"><span class="comment">// 所以，此时的 &#x27;this.a&#x27; 即 p.a，就是 p 的自身属性 &#x27;a&#x27; </span></span><br></pre></td></tr></table></figure>

<ul>
<li>在原型链上查找属性比较耗时，且试图访问不存在的属性时会遍历整个原型链，故需要注意原型链的长度，并在必要时将其分解</li>
</ul>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>严格模式的变化：</p>
<ul>
<li>将过失错误转成异常<ol>
<li>无法意外创建全局变量，如m=17，需要let m=17才能创建</li>
<li>引起静默失败的赋值操作抛出异常</li>
<li>试图删除不可删除的属性会抛出异常</li>
<li>对象内所有属性名在对象内必须唯一</li>
<li>函数的参数名唯一</li>
<li>禁止八进制数字语法</li>
<li>禁止设置primitive值的属性</li>
<li>禁用with</li>
<li>eval不再为上层范围引入新变量</li>
<li>禁止删除声明变量</li>
<li>eval和arguments不能通过程序语法被绑定或赋值</li>
<li>参数的值不会随arguments对象的值改变而变化</li>
<li>不再支持arguments.callee</li>
<li>通过this传递给一个函数的值不会被强制转化为一个对象</li>
<li>arguments不会再提供访问与调用这个函数相关的变量的途径</li>
<li>禁止了不在脚本或者函数层面上的函数声明</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">eval</span>()<span class="comment">//eval函数可计算某字符串并执行其中的js代码</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Js-pink</title>
    <url>/2020/11/10/Js-pink/</url>
    <content><![CDATA[<h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="浏览器执行Js"><a href="#浏览器执行Js" class="headerlink" title="浏览器执行Js"></a>浏览器执行Js</h3><p> 浏览器分为：</p>
<ul>
<li>渲染引擎：用来解析HTML与CSS，俗称内核，如chrome的blink</li>
<li>JS引擎：也称为JS解释器，用来读取网页中Js代码，对其处理后执行，如chrome的v8</li>
</ul>
<h3 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成"></a>JS组成</h3><p><img src="/.com//1.jpg"></p>
<ul>
<li>ECMAScript：规定js的编程语法和基础核心知识</li>
<li>BOM：浏览器对象模型，可以与浏览器窗口进行互动的对象结构，通过BOM可以操作浏览器窗口，如弹出框，跳转等</li>
<li>DOM：文档对象模型，是处理可扩展标记语言的标准编程接口，通过DOM提供的接口可以对页面上元素进行各种操作</li>
</ul>
<h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><blockquote>
<p>主要学BOM和DOM</p>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h4><p><img src="/.com//2.jpg"></p>
<ul>
<li>文档：一个页面就是一个文档，在DOM中使用document表示</li>
<li>元素：页面中所有标签都是元素，DOM中使用element表示</li>
<li>节点：网页中所有内容都是节点(标签、属性、文本、注释等)，DOM中使用Node表示</li>
</ul>
<h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID,文档.根据元素找到id,id为字符串,返回对象</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(element);<span class="comment">//打印返回的元素对象，更好查看里面的属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据标签名获取元素，返回对象集合，以伪数组的形式存储</span></span><br><span class="line"><span class="comment">//如果没有这个元素返回空数组</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">//可以指定父元素，获取里面的子元素name</span></span><br><span class="line"><span class="keyword">let</span> ol=element.getElementsByName(<span class="string">&#x27;ol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据类名获取</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择器,返回指定选择器的第一个元素对象</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;选择器&#x27;</span>);<span class="comment">//如.box 类名，#nav id，p 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择器,返回选择器所有</span></span><br><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;选择器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取body元素</span></span><br><span class="line"><span class="keyword">let</span> body=<span class="built_in">document</span>.body;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取html元素</span></span><br><span class="line"><span class="keyword">let</span> html=<span class="built_in">document</span>.documentElement;</span><br></pre></td></tr></table></figure>



<h4 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h4><blockquote>
<p>事件：触发–响应机制</p>
</blockquote>
<p>事件组成：</p>
<ul>
<li>事件源：事件被触发的对象</li>
<li>事件类型：如何触发 什么事件 鼠标点击还是经过</li>
<li>事件处理程序： 通过函数方式完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h5><ol>
<li>获取事件源</li>
<li>注册事件(绑定事件)</li>
<li>添加事件处理程序(函数赋值)</li>
</ol>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onlick</td>
<td>鼠标左键</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>onfocus</td>
<td>鼠标焦点</td>
</tr>
<tr>
<td>onblur</td>
<td>失去焦点</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标移动</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标弹起触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按下触发</td>
</tr>
</tbody></table>
<h5 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变元素内容,去除html标签，空格和换行去掉</span></span><br><span class="line">element.innerText=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//改变元素内容，包括html标签，同时保留空格和换行(推荐)</span></span><br><span class="line">element.innerHTML=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//这两个方法也可以用于获取内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//src、href 改变</span></span><br><span class="line">element.src=<span class="string">&quot;&quot;</span></span><br><span class="line">element.href=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改表单元素的属性,</span></span><br><span class="line">input.value=<span class="string">&quot;被点击了&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.disabled=<span class="literal">true</span>;<span class="comment">//this指向的是事件函数的调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//样式属性修改</span></span><br><span class="line"><span class="built_in">this</span>.style.backgroundColor=<span class="string">&#x27;purple&#x27;</span>;<span class="comment">//修改行内样式</span></span><br><span class="line">box.style.display=<span class="string">&quot;none&quot;</span>;<span class="comment">//修改类样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用className修改样式属性</span></span><br><span class="line"><span class="built_in">this</span>.className=<span class="string">&#x27;change&#x27;</span>;<span class="comment">//修改className修改类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排他思想，给多个按钮增加点击事件</span></span><br><span class="line"><span class="keyword">let</span> btns=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].onlick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">            btns[i].style.backgroundColor=<span class="string">&#x27;&#x27;</span>;<span class="comment">//将所有元素清除样式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.style.backgroundColor=<span class="string">&#x27;pink&#x27;</span>;<span class="comment">//留下新元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取自定义属性值</span></span><br><span class="line">element.属性 <span class="comment">//获取内置属性值</span></span><br><span class="line">element.getAttribute(<span class="string">&#x27;属性&#x27;</span>) <span class="comment">//获得自定义属性,如标签内aaa=&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置属性值</span></span><br><span class="line">element.属性=<span class="string">&#x27;&#x27;</span><span class="comment">//设置内置属性</span></span><br><span class="line">element.setAttribute(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)<span class="comment">//设置自定义属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line">div.removeAttribute(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//H5设置自定义属性</span></span><br><span class="line">div data-index=<span class="string">&quot;1&quot;</span><span class="comment">//data-自定义属性名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//H5设置获取自定义属性的方法,dataset是一个集合，里面存放了所有以data开头的自定义属性</span></span><br><span class="line">div.dataset.index</span><br><span class="line">div.dataset[<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line"><span class="comment">//如果自定义属性有多个-连接的单词，我们获取的时候采取驼峰命名法</span></span><br><span class="line"><span class="comment">//data-list-name</span></span><br><span class="line">div.dataset[<span class="string">&#x27;listName&#x27;</span>]</span><br></pre></td></tr></table></figure>



<p>tab栏切换的本质是隐藏和显示</p>
<p><img src="/.com//3.jpg"></p>
<h4 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h4><blockquote>
<p>利用父子兄弟节点关系获取元素</p>
<p>逻辑性较强，但兼容性较差</p>
</blockquote>
<p>节点基本属性：</p>
<ul>
<li>nodeType(节点类型)</li>
<li>nodeName(节点名称)</li>
<li>nodeValue(节点值)</li>
</ul>
<p>nodeType:</p>
<ul>
<li>1：元素节点(主要)</li>
<li>2：属性节点</li>
<li>3：文本节点:换行等</li>
</ul>
<h5 id="获取父子兄弟节点"><a href="#获取父子兄弟节点" class="headerlink" title="获取父子兄弟节点"></a>获取父子兄弟节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父子</span></span><br><span class="line"><span class="comment">//父级节点,得到离元素最近的父亲节点，如果找不到则返回null</span></span><br><span class="line">node.parentNode</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有子节点，包括换行等文本节点，不提倡使用childNodes</span></span><br><span class="line">node.childNodes</span><br><span class="line"><span class="comment">//获取元素子节点</span></span><br><span class="line">node.children</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个子节点</span></span><br><span class="line">node.firstChild</span><br><span class="line"><span class="comment">//最后一个子节点</span></span><br><span class="line">node.lastChild</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个元素子节点,有兼容性问题，下同</span></span><br><span class="line">node.firstElementChild</span><br><span class="line"><span class="comment">//最后一个子节点</span></span><br><span class="line">node.lastElementChild</span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容性解决方法，通用</span></span><br><span class="line">node.children[<span class="number">0</span>]</span><br><span class="line">node.children[ol.children.length<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下一个兄弟节点，包含元素节点或者文本节点等等</span></span><br><span class="line">node.nextSibling</span><br><span class="line"><span class="comment">//上一个兄弟节点，上同</span></span><br><span class="line">node.previousSibling</span><br><span class="line"></span><br><span class="line"><span class="comment">//下一个兄弟元素节点</span></span><br><span class="line">node.nextElementSibling</span><br><span class="line"><span class="comment">//上一个</span></span><br><span class="line">node.previousElementSibling</span><br></pre></td></tr></table></figure>



<h5 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建节点</span></span><br><span class="line"><span class="keyword">let</span> li=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="comment">//2.添加节点,node是父级，li是子级</span></span><br><span class="line">ul.appendChild(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lili=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">ul.insertBefore(lili,ul.children[<span class="number">0</span>])<span class="comment">//在ul第一个孩子前添加lili</span></span><br></pre></td></tr></table></figure>



<h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除子元素</span></span><br><span class="line">node.removeChild(child)</span><br><span class="line"></span><br><span class="line"><span class="comment">//阻止链接跳转</span></span><br><span class="line">javascript:;</span><br></pre></td></tr></table></figure>



<h5 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;如果括号参数为空或者为false,则为浅拷贝，只克隆赋值节点本身，不克隆里面的子节点</span><br><span class="line">&#x2F;&#x2F;如果括号为true，深拷贝，复制里面的内容</span><br><span class="line">node.cloneNode()</span><br></pre></td></tr></table></figure>



<h4 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h4><h5 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h5><h6 id="传统注册方式"><a href="#传统注册方式" class="headerlink" title="传统注册方式"></a>传统注册方式</h6><ul>
<li>on开头的事件onclick</li>
<li>特点：注册事件的唯一性</li>
<li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li>
</ul>
<h6 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h6><ul>
<li>addEventListener()</li>
<li>同一个元素同一个元素可以注册多个监听器</li>
<li>按照注册顺序执行</li>
</ul>
<p>addEventListener(type,listener[,useCapture])</p>
<ul>
<li>type:事件类型字符串，如click、mouseover</li>
<li>listener：事件处理函数</li>
<li>useCapture，可选参数，默认false</li>
</ul>
<h5 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h5><h6 id="传统注册方式-1"><a href="#传统注册方式-1" class="headerlink" title="传统注册方式"></a>传统注册方式</h6><p>eventTarget.onclick=null;</p>
<h6 id="方法监听注册方式-1"><a href="#方法监听注册方式-1" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h6><p>eventTarget.addEventListener(type,fn)</p>
<p>function fn(){</p>
<p>​    …//不能使用默认函数的方式，里面的fn不用加小括号<br>​            removeEventListener(type,fn)</p>
<p>}</p>
<h4 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h4><p><img src="/.com//4.jpg"></p>
<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul>
<h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;&#125;<span class="comment">//这个event可以自动机命名，如e等</span></span><br><span class="line"><span class="comment">//这个event就是事件对象,可以通过这个对象判断用户按了哪个键</span></span><br><span class="line"></span><br><span class="line">e.target<span class="comment">//返回的是触发事件的对象</span></span><br><span class="line"><span class="built_in">this</span><span class="comment">//返回的是绑定事件的对象</span></span><br></pre></td></tr></table></figure>

<h5 id="常见属性和方法"><a href="#常见属性和方法" class="headerlink" title="常见属性和方法"></a>常见属性和方法</h5><table>
<thead>
<tr>
<th>事件对象属性方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.target</td>
<td>返回触发事件的对象</td>
</tr>
<tr>
<td>e.type</td>
<td>返回事件的类型</td>
</tr>
<tr>
<td>e.cancelBubble</td>
<td>该属性阻止冒泡</td>
</tr>
<tr>
<td>e.preventDefault()</td>
<td>阻止默认事件，如阻止链接跳转</td>
</tr>
<tr>
<td>e.stopPropagation()</td>
<td>阻止冒泡 标准</td>
</tr>
</tbody></table>
<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>事件冒泡坏处</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻止冒泡</span></span><br><span class="line">e.stopPropagation()</span><br></pre></td></tr></table></figure>



<h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>使用事件冒泡好处 </p>
<blockquote>
<p>需要给每个dom注册事件太麻烦，故需要事件委托</p>
<p><em>事件委托原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</em></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给父节点添加监听器，利用事件冒泡影响每一个子节点</span></span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    e.target.style.backgroundColor=<span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止鼠标右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	e.preventDefault();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁止鼠标选中</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>BOM浏览器对象模型，其核心对象是window，兼容性较差</p>
</blockquote>
<p>window对象：</p>
<ul>
<li>它是JS访问浏览器窗口的一个接口</li>
<li>它是一个全局对象，定义在全局作用域中的变量，如alert()，其实是window.alert()</li>
</ul>
<h4 id="window常见事件"><a href="#window常见事件" class="headerlink" title="window常见事件"></a>window常见事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗口加载事件,当文档内容完全加载完成(样式表、图片、flash等)会触发该事件</span></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//窗口加载事件，不包括样式表、图片、flash等</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整窗口大小事件</span></span><br><span class="line"><span class="built_in">window</span>.onresize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.innerWidth<span class="comment">//当前屏幕的宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器-一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(调用函数,<span class="string">&#x27;毫秒数&#x27;</span>)</span><br><span class="line"><span class="comment">//停止定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutID)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器-多次</span></span><br><span class="line"><span class="built_in">setInterval</span>(回调函数，<span class="string">&#x27;毫秒数&#x27;</span>)</span><br><span class="line"><span class="comment">//停止定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timeoutID)</span><br></pre></td></tr></table></figure>



<h4 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h4><blockquote>
<p>this最终指向调用它的对象</p>
<ol>
<li>全局作用域或普通函数中this指向全局对象window(定时器里的this也是)</li>
<li>方法调用中谁调用this指向谁</li>
<li>构造函数中this指向构造函数实例</li>
</ol>
</blockquote>
<h4 id="js执行队列"><a href="#js执行队列" class="headerlink" title="js执行队列"></a>js执行队列</h4><blockquote>
<p>js是单线程的</p>
<p>H5提出多线程标准，允许js创建多线程，于是js出现同步和异步</p>
<p>事件循环：主线程不断重复获得任务、执行任务、再获取再执行，故这种机制称为事件循环(event loop)</p>
</blockquote>
<p>js执行顺序：</p>
<ol>
<li>将同步任务放入主线程执行栈中</li>
<li>而异步任务通过异步进程处理决定要不要把异步任务放入任务队列中(是否调用回调函数)</li>
<li>同步任务完成后，读取消息队列并执行</li>
</ol>
<h5 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h5><p>js所有同步任务放到主线程执行栈上</p>
<h5 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h5><p>js的异步是通过<em>回调函数</em>实现的</p>
<p>异步任务类型：</p>
<ul>
<li>普通事件：如click、resize等</li>
<li>资源加载：如load、error等</li>
<li>定时器：如setInterval、setTimeout等</li>
</ul>
<p>异步任务相关<em>回调函数</em>添加到<em>任务队列</em>中(也称消息队列)</p>
<h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><blockquote>
<p>window对象提供了一个location属性用于获取或设置窗体的url，返回的是对象，故也称location对象</p>
</blockquote>
<h5 id="location跳转"><a href="#location跳转" class="headerlink" title="location跳转"></a>location跳转</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.href=<span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line">location.assign()<span class="comment">//跟href一样，可以跳转页面(也称为重定向页面)，记录历史，可以后退</span></span><br><span class="line">location.replace()<span class="comment">//替换当前页面，因为不记录历史，所以不能后退</span></span><br><span class="line">location.reload()<span class="comment">//重新加载液面，相当于f5，如果参数为true则强制刷新ctrl+f5</span></span><br></pre></td></tr></table></figure>



<h4 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">navigator.userAgent<span class="comment">//匹配navigator的userAgent知道用户用什么登陆</span></span><br></pre></td></tr></table></figure>



<h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">back()<span class="comment">//后退</span></span><br><span class="line">forward()<span class="comment">//前进</span></span><br><span class="line">go()<span class="comment">//前进后退功能，参数如果是1前进1，-1后退1</span></span><br></pre></td></tr></table></figure>



<h4 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h4><h5 id="offset元素偏移量"><a href="#offset元素偏移量" class="headerlink" title="offset元素偏移量"></a>offset元素偏移量</h5><ul>
<li>获得元素距离带有定位父元素的距离</li>
<li>获得元素自身的大小</li>
<li>返回的数都不带单位</li>
<li>offset用于获取值合适，style适合修改值</li>
</ul>
<p>常用属性：</p>
<ul>
<li>element.offsetParent:返回作为该元素带有定位的父元素</li>
<li>element.offsetTop：带有定位父元素距上边距离</li>
<li>element.offsetLeft：带有定位父元素距左边距离</li>
<li>element.offsetWidth：返回自身包括padding，边框，内容区宽度</li>
<li>element.offsetHeight：返回自身包括padding，边框，内容区高度</li>
</ul>
<h5 id="client元素可视区"><a href="#client元素可视区" class="headerlink" title="client元素可视区"></a>client元素可视区</h5><blockquote>
<p>通过client可以动态获得该元素的边框大小、元素大小</p>
</blockquote>
<ul>
<li>element.clientTop：返回元素上边框大小</li>
<li>element.clientLeft：返回元素左边框大小</li>
<li>element.clientWidth：返回自身包括padding、内容区的宽度、不含边框，返回数值不含单位</li>
<li>element.clientHeight：：返回自身包括padding、内容区的高度、不含边框，返回数值不含单位</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//立即执行函数,创建了一个独立作用域，避免了命名冲突问题</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;())</span><br></pre></td></tr></table></figure>



<h5 id="scroll滚动条"><a href="#scroll滚动条" class="headerlink" title="scroll滚动条"></a>scroll滚动条</h5><ul>
<li>element.scrollTop：返回被卷的上侧距离</li>
<li>element.scrollLeft：左侧</li>
<li>element.scrollWidth：返回自身实际宽度</li>
<li>element.scrollHeight：返回自身实际高度</li>
</ul>
<h4 id="mouseenter和mouseover事件区别"><a href="#mouseenter和mouseover事件区别" class="headerlink" title="mouseenter和mouseover事件区别"></a>mouseenter和mouseover事件区别</h4><blockquote>
<p>mouseenter只会经过自身盒子触发，mouseover鼠标经过自身和子盒子都会触发</p>
</blockquote>
<h4 id="js轮播图"><a href="#js轮播图" class="headerlink" title="js轮播图"></a>js轮播图</h4><p>点击滚动</p>
<p><img src="/.com//5.jpg"></p>
<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><blockquote>
<p>只能存储字符串，可以将对象JSON.stringfy()编码后存储</p>
</blockquote>
<h5 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h5><blockquote>
<p>容纳约5M</p>
<p>生命周期为关闭浏览器窗口</p>
<p>在同一个窗口下数据可以共享</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(key,value)</span><br><span class="line">sessionStorage.getItem(key)</span><br><span class="line">sessionStorage.removeItem(key)</span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>



<h5 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h5><blockquote>
<p>容纳约20M</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(key,value)</span><br><span class="line"><span class="built_in">localStorage</span>.getItem(key)</span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key)</span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>C3基础</title>
    <url>/2020/11/06/C3/</url>
    <content><![CDATA[<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><blockquote>
<p>CSS:层叠样式表，同样是标记语言</p>
</blockquote>
<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>CSS构成：选择器以及一条或多条声明</p>
<p><img src="/.com//1.jpg"></p>
<p>注释:/* */</p>
<h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//展开风格</span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">	color: pink;//属性值前面，冒号后面有个空格</span><br><span class="line">	<span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><blockquote>
<p>选择器就是根据不同需求把不同<em>标签</em>选出来</p>
</blockquote>
<p>分为：</p>
<ul>
<li>基础选择器:由单个选择器组成，包括标签选择器(标签名)，类选择器(class)，id选择器(id)和通配符选择器()</li>
<li>复合选择器:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标签选择器,p标签*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类选择器,.类名，class=&quot;类名&quot;，不能用标签如.div*/</span></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">div class=&quot;cup J_Cup&quot;/* 一个标签多个类名 中间用空格隔开 */</span><br><span class="line"><span class="comment">/*id选择器,id只能调用一次*/</span></span><br><span class="line"><span class="selector-id">#id</span>名&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通配符选择器  对所有标签都使用*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">类命名规则：</span></span><br><span class="line"><span class="comment">头:header</span></span><br><span class="line"><span class="comment">内容:content</span></span><br><span class="line"><span class="comment">尾:footer</span></span><br><span class="line"><span class="comment">导航:nav</span></span><br><span class="line"><span class="comment">侧栏:sidebar</span></span><br><span class="line"><span class="comment">栏目:column</span></span><br><span class="line"><span class="comment">页面外围控制整体布局宽度:wrapper</span></span><br><span class="line"><span class="comment">登陆条:loginbar</span></span><br><span class="line"><span class="comment">标志:logo</span></span><br><span class="line"><span class="comment">广告:banner</span></span><br><span class="line"><span class="comment">热点:hot</span></span><br><span class="line"><span class="comment">新闻:news</span></span><br><span class="line"><span class="comment">下载:download</span></span><br><span class="line"><span class="comment">子导航:subnav</span></span><br><span class="line"><span class="comment">菜单:menu</span></span><br><span class="line"><span class="comment">子菜单:submenu</span></span><br><span class="line"><span class="comment">搜索:search</span></span><br><span class="line"><span class="comment">友情链接:friendlink</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字体系列 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="comment">/*Microsoft Yahei*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体大小 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体粗细 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;<span class="comment">/*bold, bolder,lighter,number(bold:700) 实际开发提倡使用数字*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体样式 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:normal;<span class="comment">/*italic 倾斜, */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*字体符合属性 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="comment">/*font:font-style font-weight font-size/line-height font-family 按顺序</span></span><br><span class="line"><span class="comment">    不需要的属性可以省略，但必须暴溜font-size和font-family属性,否则不起作用*/</span></span><br><span class="line">    <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span>/<span class="number">20px</span> <span class="string">&#x27;Microsoft yahei&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*文本颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文本对齐-只能用于设置水平对齐*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*装饰文本*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;<span class="comment">/*underline,overline,line-through*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文本缩进,只缩进首行，em:当前文字大小距离*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-index</span>:<span class="number">2em</span>;<span class="comment">/*当前文字两个大小单位*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*行间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内部样式表：写到style标签中*/</span></span><br><span class="line"><span class="comment">/*行内样式表：写到行内*/</span></span><br><span class="line"><span class="comment">/*外部样式表*/</span></span><br></pre></td></tr></table></figure>



<h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><p>右边CSS可以暂时改变样式，CSS里面样式前面黄色感叹号被划掉代表样式有问题</p>
<p><img src="/.com//2.jpg"></p>
<h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><h3 id="快速生成html"><a href="#快速生成html" class="headerlink" title="快速生成html"></a>快速生成html</h3><ul>
<li>生成标签：直接输入标签名，按tab即可</li>
<li>生成多个相同标签：输入标签名*n即可，如div*3</li>
<li>如果有父子级关系的标签，用&gt;即可，如ul&gt;li</li>
<li>如果有兄弟关系的标签，用+即可，如div+p</li>
<li>如果生成带有类名或者id名字的，直接写.demo或#two，生成一个div</li>
<li>如果生成的div类是有顺序的，可以用自增符号$</li>
</ul>
<h3 id="快速生成css"><a href="#快速生成css" class="headerlink" title="快速生成css"></a>快速生成css</h3><p>css基本采取简写即可</p>
<ul>
<li>w200，即可生成width:200px</li>
<li>lh26，即可生成line-height:26px</li>
</ul>
<h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><p>VSCODE自带的，右键Shift+Alt+F</p>
<h2 id="CSS符合选择器"><a href="#CSS符合选择器" class="headerlink" title="CSS符合选择器"></a>CSS符合选择器</h2><p>分为：</p>
<ul>
<li>后代选择器</li>
<li>子选择器</li>
<li>并集选择器</li>
<li>伪类选择器</li>
</ul>
<h3 id="后代选择器-重要"><a href="#后代选择器-重要" class="headerlink" title="后代选择器(重要)"></a>后代选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以选择父元素里子元素，也可以是孙子	选择ol父元素中的li进行渲染，只渲染li的元素*/</span></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="子选择器-重要"><a href="#子选择器-重要" class="headerlink" title="子选择器(重要)"></a>子选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 亲儿子选择器，必须是最近的才行，只渲染li而不渲染li的儿子孙子等*/</span></span><br><span class="line"><span class="selector-tag">ol</span>&gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="并集选择器-重要"><a href="#并集选择器-重要" class="headerlink" title="并集选择器(重要)"></a>并集选择器(重要)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择多组标签*/</span></span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="comment">/*约定并集选择器竖着写*/</span></span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*链接伪类需要按照顺序才能生效*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>	<span class="comment">/*未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>	<span class="comment">/*已被访问*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>	<span class="comment">/*鼠标指针位于上面的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>	<span class="comment">/*选择活动链接，按下未弹起*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*焦点伪类选择器	一般表单元素才能focus*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h2><p>元素分类：</p>
<ul>
<li>块元素</li>
<li>行内元素</li>
</ul>
<h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><ul>
<li>常见块元素:div,h</li>
</ul>
<p>特点:</p>
<ul>
<li>自己独占一行</li>
<li>高度、宽度、内外边距都能改变</li>
<li>宽度默认是容器的100%</li>
<li>是一个容器盒子，里面可以放行内或者块级元素</li>
<li>文字类元素里面不能使用块级元素，如p，h1等</li>
</ul>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul>
<li>常见的行内元素:a,strong,b,em,i,del,s,ins,u,span</li>
</ul>
<p>特点:</p>
<ul>
<li>相邻行内元素在一行上</li>
<li>高，宽设置是无效的</li>
<li>默认宽度就是本身内容的宽度</li>
<li>行内只能容纳文本或者其他行内元素</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul>
<li>行内块元素:img,input,td同时拥有块元素和行内元素的特点</li>
</ul>
<p>特点：</p>
<ul>
<li>和相邻行内元素在一行上，但是他们之间有间隙，一行可以显示多个</li>
<li>默认宽度就是它本身的宽度</li>
<li>高度、行高、内外边距可以控制</li>
</ul>
<h3 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*如增加链接a的触发范围 */</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;<span class="comment">/*转换成块级元素*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline;<span class="comment">/*转换成行内元素*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-block;<span class="comment">/*转换为行内块元素*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*CSS垂直居中*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/*让height=line-height*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>();</span><br><span class="line">    <span class="attribute">background-repeat</span>:repeat/no-repeat/repeat-x/repeat-y</span><br><span class="line">        <span class="comment">/*平铺，不平铺，沿x轴平铺，沿y轴平铺*/</span></span><br><span class="line">    background-position:center top;</span><br><span class="line">        <span class="comment">/*改变背景图片在背景中的位置,</span></span><br><span class="line"><span class="comment">    	left,right,center,top,</span></span><br><span class="line"><span class="comment">    	如果只写一个方位名词，则第二个值默认居中*/</span></span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line">		<span class="comment">/*精确背景位置	x轴 y轴*/</span>    </span><br><span class="line">    <span class="attribute">background-attachment</span>:scroll;</span><br><span class="line">    	<span class="comment">/*视差滚动scroll,固定:fixed*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景属性复合写法*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景颜色半透明*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)<span class="comment">/*最后一个是透明度0~1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS层叠性</span></span><br><span class="line"><span class="comment">样式冲突，遵循就近原则，样式不冲突，不会层叠</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CSS继承性</span></span><br><span class="line"><span class="comment">子标签会继承父标签的部分样式</span></span><br><span class="line"><span class="comment">如text-,font-,line-这些元素开头的可以继承,以及color属性</span></span><br><span class="line"><span class="comment">行高的继承:子元素会继承父元素的行高，即使子元素跟父元素的文字大小不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CSS优先级</span></span><br><span class="line"><span class="comment">当同一个元素有多个选择器时,</span></span><br><span class="line"><span class="comment">选择器相同，执行层叠性</span></span><br><span class="line"><span class="comment">选择性不同，按照权重</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选择器</th>
<th>选择器权重</th>
</tr>
</thead>
<tbody><tr>
<td>继承 或者*</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>类选择器，伪类选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>ID选择器</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>行内样式 style=“”</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>!important 重要的</td>
<td>无穷大</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*复合选择器会有权重叠加的问题</span></span><br><span class="line"><span class="comment">权重相加</span></span><br><span class="line"><span class="comment">但永远不会进位*/</span></span><br></pre></td></tr></table></figure>



<h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><blockquote>
<p>HTML中的布局元素可以当成盒子，封装周边的元素，包括边框，外边距，内边距和实际内容</p>
</blockquote>
<img src="/.com//3.jpg" style="zoom: 67%;">

<h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框(border)"></a>边框(border)</h3><p>组成：</p>
<ul>
<li>宽度：border-width，单位px</li>
<li>样式：border-style，如solid实线，dashed虚线，dotted点线</li>
<li>颜色：border-color</li>
</ul>
<p>特点：</p>
<ul>
<li>复合写法：border:1px solid red;没有顺序</li>
<li>分边框：border-top、bottom、left、right</li>
<li>表格细线边框：因为表格会有两边边框加一起两倍大小的现象，所以需要border-collapse:collapse;合并</li>
</ul>
<h3 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h3><blockquote>
<p>设置盒子边框与内容的距离</p>
<p>padding-top/bottom/left/right</p>
</blockquote>
<p>复合属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*padding符合属性*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;<span class="comment">/*1个值，上下左右5px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;<span class="comment">/*2个值，上下5px 左右10px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span>;<span class="comment">/*3个值，上5px 左右10px 下20px*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">25px</span>;<span class="comment">/*4个值，顺时针 上5px 右10px...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果盒子本身没有指定width/height属性，则padding不会撑开盒子大小，给定的才会撑开</li>
</ul>
<h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h3><blockquote>
<p>设置盒子与盒子之间的距离</p>
<p>margin-left/right/top/bottom</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">外边距可以让块级盒子水平居中，条件为</span></span><br><span class="line"><span class="comment">1.盒子必须指定宽度</span></span><br><span class="line"><span class="comment">2.盒子的左右外边距设为auto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="comment">/*上下为0，左右为auto，常用*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">行内元素水平居中: text-align:center</span></span><br><span class="line"><span class="comment">行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，设置了也没用</span></span><br><span class="line"><span class="comment">但是块级元素和行内块元素就可以了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">嵌套块元素垂直外边距塌陷</span></span><br><span class="line"><span class="comment">两个嵌套关系的块元素，父元素有上外边距同时子元素也有，此时父元素会塌陷较大的外边距值</span></span><br><span class="line"><span class="comment">解决方法:为父元素添加overflow:hidden</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*不会增加盒子大小*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除全部内外边距*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="圆角边框-重点"><a href="#圆角边框-重点" class="headerlink" title="圆角边框(重点)"></a>圆角边框(重点)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*圆角边框*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	border-radius:10px;/*可以是px也可以是百分值*/‘</span><br><span class="line">    <span class="selector-tag">border-radius</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;<span class="comment">/*顺时针*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="盒子阴影-重点"><a href="#盒子阴影-重点" class="headerlink" title="盒子阴影(重点)"></a>盒子阴影(重点)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*盒子阴影*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>) inset;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    水平阴影 垂直阴影 模糊距离 阴影的尺寸 阴影的颜色 将外部阴影改为内部阴影</span></span><br><span class="line"><span class="comment">    前两个必需，后面非必须</span></span><br><span class="line"><span class="comment">    盒子阴影不占用空间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*鼠标经过添加阴影效果*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>) inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><blockquote>
<p>浮动可以改变元素标签默认的排列方式</p>
<p>float属性用于创建浮动框,移动直到遇到左边缘或右边缘及包含块或另一个浮动框的边缘</p>
<p> 多个块级元素纵向排列找标准流，横向排列找浮动</p>
<p>浮动元素经常和标准流的父级搭配使用</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>:none/left/right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浮动特性-重难点"><a href="#浮动特性-重难点" class="headerlink" title="浮动特性(重难点)"></a>浮动特性(重难点)</h3><p>特性：</p>
<ul>
<li>浮动元素会脱离标准流的控制(俗称脱标)</li>
<li>浮动的盒子不再保留原先的位置，即不占有位置</li>
<li>如果有多个盒子设置浮动，他们会按照属性值一行内显示且顶端对齐</li>
<li>浮动的元素贴在一起没有缝隙</li>
<li>元素添加浮动后会拥有行内块元素的特性</li>
<li>一个元素浮动了，理论上其余的兄弟元素也要浮动</li>
</ul>
<p>浮动与标准流：</p>
<ul>
<li><p>浮动只会压住后面的标准流，前面的标准流不会被压住</p>
</li>
<li><p>浮动后有标准流，标准流会出现在浮动的下面</p>
</li>
</ul>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><blockquote>
<p>因为浮动盒子是不占有位置的，所以父元素没有高度了，会对后面元素排版产生影响</p>
<p>所以需要清除浮动</p>
<p>清除浮动的本质是清除浮动元素造成的影响</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">	<span class="attribute">clear</span>:both;<span class="comment">/*一般开发用both*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*额外标签法：</span></span><br><span class="line"><span class="comment">找到最后一个浮动标签，写clear:both;*/</span></span><br><span class="line">div class=&quot;a&quot;</span><br><span class="line">div class=&quot;b&quot;</span><br><span class="line">div class=&quot;clear&quot;/*最后一个标签,必须是块级元素才行*/</span><br><span class="line"></span><br><span class="line"><span class="comment">/*父级添加overflow*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;<span class="comment">/*优点：简洁；缺点：无法显示溢出的部分*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*父级添加:after伪元素法,给每个后面添加新盒子*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*双伪元素清除浮动*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow</span><br><span class="line">2.自身属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</span><br><span class="line">3.文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</span><br><span class="line">4.其他属性(CSS3)：content&#x2F;cursor&#x2F;boorder-radius&#x2F;box-shadow...</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*导航栏	.nav*&#x2F;</span><br><span class="line">使用li+a表示链接</span><br><span class="line">给li加浮动变为一行</span><br></pre></td></tr></table></figure>



<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><blockquote>
<p>定位=定位模式+边偏移</p>
</blockquote>
<h3 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h3><ul>
<li>static:静态定位</li>
<li>relative:相对定位</li>
<li>absolute:绝对定位</li>
<li>fixed:固定定位</li>
</ul>
<h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><p>子级使用绝对定位，父级则需要使用相对定位</p>
<ul>
<li>子级绝对定位，不会占有位置，可以放到父盒子的任何一个地方，不会影响其他的兄弟盒子</li>
<li>父盒子需要加定位限制子盒子在父盒子内显示</li>
<li>父盒子布局需要占有位置所以只能是相对定位</li>
</ul>
<h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><p>静态定位按照标准流特性摆放位置，没有边偏移</p>
<p>很少用到，了解即可</p>
<h4 id="相对定位-重要"><a href="#相对定位-重要" class="headerlink" title="相对定位(重要)"></a>相对定位(重要)</h4><ul>
<li>相对定位是在元素移动位置时，相对于它原来的位置</li>
<li>虽然它相对于自己原来位置，但是它原来的位置保留，后面的盒子仍然以标准流方式对待他</li>
<li>最典型的应用是给绝对定位当爹的</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/.com//4.jpg" alt="原位置" style="zoom: 33%;">

<img src="/.com//5.jpg" alt="相对定位后" style="zoom: 33%;">

<h4 id="绝对定位-重要"><a href="#绝对定位-重要" class="headerlink" title="绝对定位(重要)"></a>绝对定位(重要)</h4><ul>
<li>绝对定位时元素在移动位置时，相对于它祖先元素来说的</li>
<li>没有祖先元素或祖先元素没有定位，则根据浏览器的为准</li>
<li>如果父元素有定位，则以最近一级有定位父级元素为准</li>
<li>绝对定位不再占有原先位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="固定定位-重要"><a href="#固定定位-重要" class="headerlink" title="固定定位(重要)"></a>固定定位(重要)</h4><ul>
<li>固定定位是元素固定于浏览器可视区域的位置</li>
<li>主要使用在浏览器滚动元素时位置不改变</li>
<li>以浏览器的可视窗口为参照点移动元素</li>
<li>跟父元素没有关系</li>
<li>固定定位不占有原先位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*固定到版心右侧*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">405px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h4><p>相对定位和固定定位混合</p>
<ul>
<li>以浏览器的可视窗口为参照点移动元素</li>
<li>粘性定位占有原先位置</li>
<li>必须添加top、left、bottom、right 其中一个才有效 </li>
<li>兼容性较差</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:sticky;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><ul>
<li>top 相对于其父元素上边线的距离</li>
<li>bottom 相对于其父元素下边线的距离</li>
<li>left 相对于其父元素左边线的距离</li>
<li>right 相对于其父元素右边线的距离</li>
</ul>
<h3 id="定位叠放"><a href="#定位叠放" class="headerlink" title="定位叠放"></a>定位叠放</h3><p>盒子重叠时使用z-index控制盒子前后次序</p>
<ul>
<li>如果属性值相同，则按书写顺序，后来居上</li>
<li>z-index默认取值auto，可以为正负数</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">100px</span>;<span class="comment">/*盒子的50%*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定位特殊特性"><a href="#定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">行内元素添加绝对或者固定定位，可以直接设置高度和宽度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">weight</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">块级元素添加绝对或者固定定位，不给宽度或者高度，默认大小是内容大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="绝对-固定定位会压住盒子"><a href="#绝对-固定定位会压住盒子" class="headerlink" title="绝对/固定定位会压住盒子"></a>绝对/固定定位会压住盒子</h4><ul>
<li>浮动元素不同，只会压住下面标准流的盒子，不会压住下面标准流盒子里面的文字(图片)</li>
<li>绝对定位/固定定位会压住下面标准流的所有内容</li>
</ul>
<h2 id="显示-隐藏元素"><a href="#显示-隐藏元素" class="headerlink" title="显示/隐藏元素"></a>显示/隐藏元素</h2><ul>
<li>display</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display值</p>
<ul>
<li>none：隐藏对象，不占有原位置</li>
<li>block：除了转化为块级元素外，还有显示元素的意思</li>
</ul>
<h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p>visibility值：</p>
<ul>
<li>inherit：继承父对象的可见性</li>
<li>visible：可见</li>
<li>hidden：不可见，继续占有原位置</li>
</ul>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>对溢出部分显示/隐藏</p>
<ul>
<li>有定位的盒子，慎用overflow:hidden，因为它会隐藏多余的部分</li>
</ul>
<p>overflow值：</p>
<ul>
<li>visible</li>
<li>hidden</li>
<li>scroll：滚动条，没有超出也有</li>
<li>auto：在溢出时加滚动条</li>
</ul>
<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><blockquote>
<p>将网页中多个背景小图片整合到大图片，减少请求次数</p>
<p>背景图片经常更换故不用这种方法</p>
<p>基本原理是将精灵图移动到想显示的背景，background-position，一般是负值</p>
<p>适用于一些结构和样式较复杂的图片</p>
<p>缺点：图片文件还是较大的，图片放大缩小会失真，更换复杂</p>
</blockquote>
<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><blockquote>
<p>主要用于显示网页中通用、常用的一些小图标</p>
<p>本质是文字</p>
<p>适用于一些结构和演示比较简单的的小图标</p>
</blockquote>
<p>网站：</p>
<ul>
<li>icomoon</li>
<li>iconfont</li>
</ul>
<h3 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h3><img src="/.com//6.jpg" style="zoom: 67%;">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">fontsize</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">cursor</span>:default;<span class="comment">/*默认*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:pointer;<span class="comment">/*小手*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:move;<span class="comment">/*移动*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:text;<span class="comment">/*文本*/</span></span><br><span class="line">	<span class="attribute">cursor</span>:not-allowed;<span class="comment">/*禁止*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*取消表单轮廓*/</span></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">	<span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取消文本域拖拽*/</span></span><br><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line">	<span class="attribute">resize</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><blockquote>
<p>用于设置一个元素的垂直对齐方式，但它只针对行内元素或行内块元素有效</p>
</blockquote>
<p>vertical-align:</p>
<ul>
<li>bottom：底线对齐</li>
<li>middle：中线对齐</li>
<li>top：顶线对齐</li>
</ul>
<h3 id="解决图片底侧空白缝隙"><a href="#解决图片底侧空白缝隙" class="headerlink" title="解决图片底侧空白缝隙"></a>解决图片底侧空白缝隙</h3><p>因为行内块元素会和文字的基线对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法一：改对齐,提倡*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>:bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法二：将图片改为行内块元素*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="溢出的文字用省略号"><a href="#溢出的文字用省略号" class="headerlink" title="溢出的文字用省略号"></a>溢出的文字用省略号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单行文本溢出省略号*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;<span class="comment">/*不允许换行*/</span></span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;<span class="comment">/*文字溢出的时候用省略号*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*多行文本溢出显示省略号:有兼容性问题,一般用在webkit*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">    <span class="attribute">display</span>:-webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>:<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><h4 id="margin负值应用"><a href="#margin负值应用" class="headerlink" title="margin负值应用"></a>margin负值应用</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*多边框时margin出现双倍宽度，不同于原来的表格*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框选中四边*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*1.盒子没有定位时*/</span></span><br><span class="line">    <span class="attribute">position</span>: relative;<span class="comment">/*不选相对定位右边会被覆盖*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*2.盒子有定位，提高层级即可*/</span></span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片周围浮动文字"><a href="#图片周围浮动文字" class="headerlink" title="图片周围浮动文字"></a>图片周围浮动文字</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*浮动元素不会压住文字*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="行内块巧妙运用"><a href="#行内块巧妙运用" class="headerlink" title="行内块巧妙运用"></a>行内块巧妙运用</h4><p>分页码</p>
<h4 id="CSS三角巧妙运用"><a href="#CSS三角巧妙运用" class="headerlink" title="CSS三角巧妙运用"></a>CSS三角巧妙运用</h4><p><img src="/.com//7.jpg"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/11/06/ES6/</url>
    <content><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>var：</p>
<ul>
<li>可以重复声明</li>
<li>没有块级作用域</li>
</ul>
<p>let/const：</p>
<ul>
<li>不可以重复声明</li>
<li>有块级作用域</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>如果只有一个参数()可以省略</li>
<li>如果只有一个返回值{}可以省略</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有一个参数</span></span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="params">a</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">return</span> a*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个返回值</span></span><br><span class="line"><span class="keyword">let</span> show=<span class="function">(<span class="params">a,index</span>)=&gt;</span>a*<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h2 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b,c,...</span>)//可以有多个参数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//作用：</span></span><br><span class="line"><span class="function">//1.收集剩余参数</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">show</span>(<span class="params">a,b,...args</span>)</span></span><br><span class="line"><span class="function">//2.展开数组</span></span><br><span class="line"><span class="function"><span class="title">show</span>(<span class="params">...arr</span>)</span></span><br><span class="line">//即将arr=[]里面的东西全部拿出来</span><br></pre></td></tr></table></figure>



<h2 id="默认参数-amp-解构赋值"><a href="#默认参数-amp-解构赋值" class="headerlink" title="默认参数&amp;解构赋值"></a>默认参数&amp;解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b=<span class="number">5</span>,c=<span class="number">10</span></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值:解构赋值必须声明和赋值一起</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> &#123;a,c,d&#125;=&#123;<span class="attr">a</span>:<span class="number">12</span>,<span class="attr">c</span>:<span class="number">5</span>,<span class="attr">d</span>:<span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">let</span> [json,arr,string]=[&#123;<span class="attr">a</span>:<span class="number">5</span>,<span class="attr">b</span>:<span class="number">10</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">&#x27;aaa&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map、reduce、filter、forEach</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map,映射</span></span><br><span class="line"><span class="keyword">let</span> result=arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce汇总</span></span><br><span class="line"><span class="keyword">let</span> result=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tmp,item,index</span>)</span>&#123;<span class="comment">//分别是暂时的结果,输入的值,索引</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter过滤器</span></span><br><span class="line">arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(...)&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;<span class="comment">//true返回</span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;&#125;)<span class="comment">//false不返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach迭代器</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.startsWith(<span class="string">&#x27;a&#x27;</span>)<span class="comment">//以a开头的字符串</span></span><br><span class="line">str.endsWith(<span class="string">&#x27;b&#x27;</span>)<span class="comment">//以b结尾的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模版字符串</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">`aaa<span class="subst">$&#123;title&#125;</span>`</span><span class="comment">//模版字符串使用反单引号,取变量用$&#123;&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面向对象</span></span><br><span class="line">Class User&#123;</span><br><span class="line">	constractor(name,pass)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name=name</span><br><span class="line">		<span class="built_in">this</span>.pass=pass</span><br><span class="line">	&#125;</span><br><span class="line">	showName()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,pass,level)&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,pass)</span><br><span class="line">        <span class="built_in">this</span>.level=level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel()&#123;<span class="comment">//其余方法可以从父类继承</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> v1=<span class="keyword">new</span> VipUser(<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">v1.showName()</span><br></pre></td></tr></table></figure>



<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(json)<span class="comment">//把json变成字符串，不然就是一个object</span></span><br><span class="line"><span class="comment">//str转JSON标准写法</span></span><br><span class="line"><span class="comment">//1.只能用双引号</span></span><br><span class="line"><span class="comment">//2.所有名字都必须用引号包起来</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;&#123;&quot;a&quot;:12,&quot;b&quot;:5&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> json=<span class="built_in">JSON</span>.parse(str) <span class="comment">//把字符串变成json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON简写</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> json=&#123;<span class="attr">a</span>:a,<span class="attr">b</span>:b&#125;</span><br><span class="line"><span class="keyword">let</span> json=&#123;a,b,<span class="attr">c</span>:<span class="number">55</span>&#125;<span class="comment">//当名字和值一样时可以简写</span></span><br></pre></td></tr></table></figure>



<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Promise用同步的方式写异步方法,封装</span></span><br><span class="line"><span class="comment">//Promise.all 多个请求都同时成功才res，不然err</span></span><br><span class="line"><span class="built_in">Promise</span>.all([$.ajax(),$.ajax()].then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise.race 竞速</span></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">    </span><br><span class="line">])</span><br></pre></td></tr></table></figure>



<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Generator 生成器--特殊函数,中间能暂停</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span><span class="comment">//暂停,可以用来请求数据</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line">genObj.next()<span class="comment">//执行a</span></span><br><span class="line">genObj.next()<span class="comment">//执行b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//yield传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> a=<span class="keyword">yield</span><span class="comment">//暂停</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    alert(a)<span class="comment">//结果为5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line">genObj.next(<span class="number">12</span>)<span class="comment">//没法给yield传参</span></span><br><span class="line">genObj.next(<span class="number">5</span>)<span class="comment">//执行b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//yield 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;<span class="comment">//*表明是生成器</span></span><br><span class="line">    alert(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">12</span><span class="comment">//暂停,可以用来请求数据</span></span><br><span class="line">    alert(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj=show();</span><br><span class="line"><span class="keyword">let</span> res1=genObj.next()</span><br><span class="line"><span class="built_in">console</span>.log(res1)<span class="comment">//value:12,done:fales</span></span><br><span class="line"><span class="keyword">let</span> res2=genObj.next()</span><br><span class="line"><span class="built_in">console</span>.log(res2)<span class="comment">//value:undefind,done:true</span></span><br></pre></td></tr></table></figure>



<h3 id="Runner实例"><a href="#Runner实例" class="headerlink" title="Runner实例"></a>Runner实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">runner(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> data1=<span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">	<span class="keyword">let</span> data2=<span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模块通过webpack编译才能使用</span></span><br><span class="line"><span class="built_in">module</span>.exports&#123;</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    entry:<span class="string">&#x27;./js/index.js&#x27;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">        filename:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出(export)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span><span class="comment">//默认成员</span></span><br><span class="line"><span class="comment">//导入(import)</span></span><br><span class="line"><span class="keyword">import</span> mod1 <span class="keyword">from</span> <span class="string">&#x27;./mod1&#x27;</span> <span class="comment">//相当于import default mod1 from &#x27;./mod1&#x27; 引入default成员</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mod1 <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span> <span class="comment">//引入所有成员</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b <span class="keyword">as</span> name2&#125; <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PStudy</category>
        <category>web-Design</category>
      </categories>
      <tags>
        <tag>web-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs数据泄漏</title>
    <url>/2020/10/22/Nodejs%E6%95%B0%E6%8D%AE%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<h1 id="Nodejs内存泄漏"><a href="#Nodejs内存泄漏" class="headerlink" title="Nodejs内存泄漏"></a>Nodejs内存泄漏</h1><h2 id="第一部分：寻找原因"><a href="#第一部分：寻找原因" class="headerlink" title="第一部分：寻找原因"></a>第一部分：寻找原因</h2><p>前几天老是发现后台挂了，去检查nohup.out文件发现报了JS内存泄漏</p>
<p><img src="/.com//1.jpg"></p>
<p>一运行20m以后就到100%CPU，node使用的CPU一直在增加，是node内存泄漏的标志</p>
<p>由于前后端都是用基于JS，所以先得排查是前端还是后端的问题</p>
<p>前端把nginx停了以后，发现CPU还是增长，所以应该不是前端问题</p>
<h2 id="第二部分：排查后端"><a href="#第二部分：排查后端" class="headerlink" title="第二部分：排查后端"></a>第二部分：排查后端</h2><p>从网上查到Nodejs的内存泄漏有以下可能</p>
<ol>
<li>全局变量 (排除)</li>
<li>闭包 (排除)</li>
<li>事件监听 (待排查)</li>
<li>缓存使用不当 (可能)</li>
<li>内存没有即时释放 (排除，查看了node使用内存)</li>
<li>SetTimeOut方法 (待排查)</li>
</ol>
<blockquote>
<p><em>先关闭了Egg定时器发现CPU增长不是线性增长而是阶梯增长的，但是还会增加到100%</em></p>
<p><em>然后关了监听还是如此，但是可以跑24h了，缓存用的也不是很多</em>，缓存使用不当也排除了</p>
</blockquote>
<h2 id="第三部分：意外之喜"><a href="#第三部分：意外之喜" class="headerlink" title="第三部分：意外之喜"></a>第三部分：意外之喜</h2><p>在整理Linux命令的时候使用了netstat指令</p>
<p>后面发现一直在给以前项目发数据包</p>
<p>于是去问后端怎么回事</p>
<p>原来是WAMP没有关掉</p>
<p>关掉后CPU就在3-20%之间来回了</p>
<p>舒服了</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>crawl:Fund</title>
    <url>/2020/10/20/crawl-Fund/</url>
    <content><![CDATA[<h1 id="爬虫：基金"><a href="#爬虫：基金" class="headerlink" title="爬虫：基金"></a>爬虫：基金</h1><p>因为发现以前找基金的方法太经验化了，所以准备整个排序</p>
<ul>
<li>去除了三年以内的建立的基金</li>
<li>去除了部分值</li>
<li>去除了累计净值&lt;1的基金</li>
<li>去除了三年和&lt;100%的基金</li>
</ul>
<p>部分结果展示：</p>
<p><img src="/.com//1.jpg"></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>python：3.8</p>
<p>工具：Spyder</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getL</span>():</span></span><br><span class="line">    url=<span class="string">&#x27;http://fund.eastmoney.com/data/rankhandler.aspx?op=ph&amp;dt=kf&amp;ft=zs&amp;rs=&amp;gs=0&amp;sc=1nzf&amp;st=desc&amp;sd=2019-10-18&amp;ed=2020-10-20&amp;qdii=|&amp;tabSubtype=,,,,,&amp;pi=1&amp;pn=10000&amp;dx=1&amp;v=0.9486377750883621&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fund.eastmoney.com&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fund.eastmoney.com/data/fundranking.html&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    funds=[]<span class="comment">#基金列表</span></span><br><span class="line">    datas=eval(re.findall(<span class="string">&#x27;\[.*?\]&#x27;</span>,text,re.S)[<span class="number">0</span>])<span class="comment">#[]找到基金信息</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        funds.append(data)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;funds.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;基金代码,基金名称,名字缩写,日期,单位净值,累计净值,日增长率,近一周,近一月,近三月,近六月,近一年,近两年,近三年,今年来,成立来,1,2,3,4,手续费,5,6,7,8\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> fund <span class="keyword">in</span> funds:</span><br><span class="line">            f.write(fund+<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#写入文件</span></span><br><span class="line">    fileNameStr = <span class="string">&#x27;funds.csv&#x27;</span></span><br><span class="line">    DataDF = pd.read_csv(fileNameStr,encoding = <span class="string">&quot;gbk&quot;</span>,dtype = str)<span class="comment">#读取csv文件</span></span><br><span class="line">    DataDF.drop(<span class="string">&#x27;日期&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)<span class="comment">#去除列</span></span><br><span class="line">    DataDF.drop(<span class="string">&#x27;日增长率&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近一周&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近一月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近三月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;近六月&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;今年来&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;1&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;2&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;3&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;4&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;5&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;6&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;7&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;8&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.drop(<span class="string">&#x27;名字缩写&#x27;</span>,axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近一年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近两年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;近三年&#x27;</span>].replace(<span class="string">&#x27;-[0-9]*.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF[<span class="string">&#x27;累计净值&#x27;</span>].replace(<span class="string">&#x27;0.[0-9]*&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    add= <span class="keyword">lambda</span> x,y,z:float(x)+float(y)+float(z)</span><br><span class="line">    DataDF[<span class="string">&#x27;三年和&#x27;</span>] = DataDF.apply(<span class="keyword">lambda</span> x:add(x[<span class="string">&#x27;近一年&#x27;</span>],x[<span class="string">&#x27;近两年&#x27;</span>],x[<span class="string">&#x27;近三年&#x27;</span>]),axis=<span class="number">1</span>)</span><br><span class="line">    DataDF.sort_values(by=<span class="string">&#x27;三年和&#x27;</span>,ascending=<span class="literal">False</span>,inplace=<span class="literal">True</span>)<span class="comment">#排序</span></span><br><span class="line">    DataDF.to_csv(<span class="string">&#x27;funds.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>,index=<span class="literal">False</span>, line_terminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>():</span><span class="comment">#在getL()里面replace不了不知道为什么</span></span><br><span class="line">    fileNameStr = <span class="string">&#x27;funds.csv&#x27;</span></span><br><span class="line">    DataDF = pd.read_csv(fileNameStr,encoding = <span class="string">&quot;gbk&quot;</span>,dtype = str)</span><br><span class="line">    DataDF[<span class="string">&#x27;三年和&#x27;</span>].replace(<span class="string">&#x27;^[0-9]&#123;1&#125;[0-9]&#123;1&#125;.&#123;1&#125;[0-9]*$&#x27;</span>,np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    DataDF.dropna(how=<span class="string">&#x27;any&#x27;</span>,inplace=<span class="literal">True</span>)<span class="comment">#去除整行有缺失值的</span></span><br><span class="line">    DataDF.to_csv(<span class="string">&#x27;funds.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>,index=<span class="literal">False</span>, line_terminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    getL()</span><br><span class="line">    cut()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>



<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>也没有涉及到多个页面，就小试牛刀</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>crawl</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>crawl:Picture</title>
    <url>/2020/10/20/crawl-Picture/</url>
    <content><![CDATA[<h1 id="爬虫：爬取图片"><a href="#爬虫：爬取图片" class="headerlink" title="爬虫：爬取图片"></a>爬虫：爬取图片</h1><p>无意间在知乎上看见爬妹子图的爬虫教程，很感兴趣，但是可惜妹子图网站没了</p>
<p>但这并不能阻挡我使用爬虫</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>python版本：3.6.3</p>
<p>工具：python自带IDLE</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>因为我个人比较喜欢直接开干所以直接放代码，要说的都在注释里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局对象好调用</span></span><br><span class="line">d1=&#123;<span class="number">0</span>:<span class="string">&#x27;0&#x27;</span>&#125;<span class="comment">#字典对象</span></span><br><span class="line">c=<span class="number">1</span><span class="comment">#计数</span></span><br><span class="line">title=<span class="string">&#x27;&#x27;</span><span class="comment">#标题</span></span><br><span class="line">UserAgent_List = [<span class="comment">#因为长时间爬网站会发现并拒绝访问，所以爬一次重新换一次头，用random实现</span></span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getL</span>():</span><span class="comment">#获取页面内容</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List</span><br><span class="line">    url=<span class="string">&#x27;...&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),<span class="comment">#random使用头部</span></span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span><span class="comment">#gbk编码</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    <span class="comment">#print(bs.prettify()) # 格式化html结构</span></span><br><span class="line">    title=bs.find(<span class="string">&#x27;tbody&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&#x27;table-layout:fixed;&#x27;</span>&#125;).findAll(<span class="string">&#x27;tr&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;tr3 t_one tac&#x27;</span>&#125;)<span class="comment">#通过寻找bs里面的标签来寻找内容，如前面就是在寻找tbody里面有style：table...属性的标签</span></span><br><span class="line">    <span class="keyword">global</span> c<span class="comment">#引用全局变量</span></span><br><span class="line">    <span class="keyword">global</span> d1</span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> title:</span><br><span class="line">        txd=tx.findAll(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> txdd <span class="keyword">in</span> txd:</span><br><span class="line">            txa=str(<span class="string">&#x27;...&#x27;</span>+txdd.find(<span class="string">&#x27;a&#x27;</span>).attrs[<span class="string">&quot;href&quot;</span>])<span class="comment">#attrs寻找属性</span></span><br><span class="line">            txb=str(txdd.find(<span class="string">&#x27;a&#x27;</span>).contents[<span class="number">0</span>])<span class="comment">#contents获取标签里的明文内容</span></span><br><span class="line">            txd=str(tx.contents)</span><br><span class="line">            d1[c]=txa</span><br><span class="line">            <span class="keyword">if</span> (re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd) ):<span class="comment">#正则表达匹配繁体字</span></span><br><span class="line">                txc=str(re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd).group(<span class="number">0</span>))<span class="comment">#group获取正则匹配结果</span></span><br><span class="line">                <span class="keyword">if</span>(txc!=<span class="string">&#x27;[...]&#x27;</span> <span class="keyword">and</span> txc!=<span class="string">&#x27;[...]&#x27;</span>):</span><br><span class="line">                    print(str(c)+<span class="string">&#x27;.&#x27;</span>+txc+txb+<span class="string">&#x27;\n&#x27;</span>+txa+<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                    c=c+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exc</span>(<span class="params">url</span>):</span><span class="comment">#执行下载</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),</span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    <span class="comment">#print(bs.prettify()) # 格式化html结构</span></span><br><span class="line">    <span class="keyword">global</span> title</span><br><span class="line">    title=bs.find(<span class="string">&#x27;head&#x27;</span>).find(<span class="string">&#x27;meta&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;description&#x27;</span>&#125;).attrs[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">    num=re.search(<span class="string">&#x27;[0-9]\d&#x27;</span>, title)</span><br><span class="line">    print(num.group())<span class="comment">#group()获得匹配结果</span></span><br><span class="line">    print(title)</span><br><span class="line">    os.makedirs(<span class="string">&#x27;py/&#x27;</span>+title)</span><br><span class="line">    t=bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;t t2&#x27;</span>&#125;).findAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> t:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        b=str(a)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            txd=tx.attrs[<span class="string">&quot;ess-data&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        img_html = requests.get(txd, headers=headers) </span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;py/&#x27;</span>+title+<span class="string">&#x27;/&#x27;</span>+b+<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#存为图片</span></span><br><span class="line">            f.write(img_html.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(str(a)+<span class="string">&#x27;.&#x27;</span>+txd)<span class="comment">#打印链接</span></span><br><span class="line">            a=a+<span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;下载结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span>():</span><span class="comment">#选择列表下载</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        getL()</span><br><span class="line">        d1.values() </span><br><span class="line">        print(<span class="string">&#x27;数字列表样例(1,7,10,50)&#x27;</span>)</span><br><span class="line">        lists = ast.literal_eval(input(<span class="string">&quot;请输入数字列表，使用逗号隔开: 注意必须是英文括号逗号&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span><br><span class="line">            exc(d1[l])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;请记得删除下载失败的文件夹否则会报错&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;要删除的文件夹为当前目录下:py/&#x27;</span>+title)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topic</span>():</span><span class="comment">#选择主题下载</span></span><br><span class="line">        getL()</span><br><span class="line">        f=input(<span class="string">&#x27;请选择主题1.[...] 2.[...] 3.[...]&#x27;</span>)</span><br><span class="line">        d2=&#123;<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;[...]&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">        <span class="keyword">elif</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">        <span class="keyword">elif</span> d2[f]==<span class="string">&#x27;[...]&#x27;</span>:</span><br><span class="line">            tdl(d2[f])</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdl</span>(<span class="params">t</span>):</span><span class="comment">#主题具体下载</span></span><br><span class="line">    <span class="keyword">global</span> UserAgent_List<span class="comment">#图省事复制粘贴的getH()</span></span><br><span class="line">    url=<span class="string">&#x27;...&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(UserAgent_List),</span><br><span class="line">           <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">    html=requests.get(url,headers=headers)</span><br><span class="line">    html.encoding=<span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    text=html.text</span><br><span class="line">    bs = BeautifulSoup(text,<span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 缩进格式</span></span><br><span class="line">    title=bs.find(<span class="string">&#x27;tbody&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&#x27;table-layout:fixed;&#x27;</span>&#125;).findAll(<span class="string">&#x27;tr&#x27;</span>,&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;tr3 t_one tac&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> tx <span class="keyword">in</span> title:</span><br><span class="line">        txd=tx.findAll(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> txdd <span class="keyword">in</span> txd:</span><br><span class="line">            txa=str(<span class="string">&#x27;https://cl.hn32.xyz/&#x27;</span>+txdd.find(<span class="string">&#x27;a&#x27;</span>).attrs[<span class="string">&quot;href&quot;</span>])</span><br><span class="line">            txb=str(txdd.find(<span class="string">&#x27;a&#x27;</span>).contents[<span class="number">0</span>])</span><br><span class="line">            txd=str(tx.contents)</span><br><span class="line">            <span class="keyword">if</span> (re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd) ):<span class="comment">#匹配繁体字</span></span><br><span class="line">                txc=str(re.search(<span class="string">&#x27;\[[\u4e00-\u9FFF]*\]&#x27;</span>,txd).group(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">if</span>(txc==t):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        exc(txa)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;请选择列表/主题下载&#x27;</span>)</span><br><span class="line">    e=input(<span class="string">&#x27;列表下载输入1，主题下载输入2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> e==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        w()</span><br><span class="line">    <span class="keyword">elif</span> e==<span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        topic()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入错误请重新输入&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>



<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>当时写了几个小时吧，还是很有意思的，简而言之就是对标签内容的获取然后下载</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>crawl</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2020/10/07/nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>高并发多连接</li>
<li>生态好</li>
<li>跨平台</li>
<li>稳定</li>
</ul>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="/.com//1.jpg"></p>
<p>特点：</p>
<ul>
<li>访问原来无法访问的资源，如Google</li>
<li>可以做缓存</li>
<li>客户端认证</li>
<li>记录用户访问记录</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理服务器将客户端发给服务器的请求按照一定规则分发给后端服务器</p>
<p><img src="/.com//2.jpg"></p>
<p>特点：</p>
<ul>
<li>保证内网安全：隐藏服务器信息</li>
<li>负载均衡</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件、目录与磁盘格式</title>
    <url>/2020/10/05/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Linux的文件权限与目录配置"><a href="#Linux的文件权限与目录配置" class="headerlink" title="Linux的文件权限与目录配置"></a>Linux的文件权限与目录配置</h1><p>r(读权限)：表示你可以查询该目录下的文件名，如ls指令</p>
<p>w(写指令)：</p>
<ul>
<li>建立新的文件与目录</li>
<li>删除已存在的文件或目录(不论权限如何，就算只有w也可以！！！)</li>
<li>将已经存在的文件或目录进行更名</li>
<li>移动该目录内的文件、目录位置</li>
</ul>
<p>x(执行权限)</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>内容</th>
<th>r</th>
<th>w</th>
<th>x</th>
</tr>
</thead>
<tbody><tr>
<td>文件</td>
<td>详细数据data</td>
<td>读到文件内容</td>
<td>修改文件内容</td>
<td>执行文件内容</td>
</tr>
<tr>
<td>目录</td>
<td>文件名</td>
<td>读到文件名</td>
<td>修改文件名</td>
<td>进入该目录的权限</td>
</tr>
</tbody></table>
<h2 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h2><p>使用命令ls -al，文件类型权限如下图-rw-r–r–.</p>
<p><img src="/.com//1.jpg"></p>
<p>第一个字符代表这个文件类型，常见的如下：</p>
<ul>
<li>[d]：目录</li>
<li>[-]：文件</li>
<li>[l]：链接文件</li>
</ul>
<p>接下来的三个为一组：</p>
<ul>
<li>第一组为文件拥有者可具备的权限：rw-表示读写权限，但不可执行</li>
<li>第二组为加入此用户组账号的权限</li>
<li>第三组为非本人且没有加入本用户组的其他账号的权限</li>
</ul>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>chgrp：修改文件所属用户组</p>
<p>chown：修改文件拥有者，用此命令需要用数字指代权限，r=4，w=2，x=1，如rwx=7</p>
<p>chmod：修改文件的权限</p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>文件名之前多一个(.)，说明此文件为隐藏文件</li>
<li>root不受系统的权限限制，所有无论文件权限是什么，默认root都可以读写</li>
<li>通常开放的目录至少会具备rx这两个权限</li>
<li>Linux的文件没有扩展名，一个文件能否被执行，与属性有关系，与文件名没关系</li>
</ul>
<h2 id="Linux目录配置–FHS"><a href="#Linux目录配置–FHS" class="headerlink" title="Linux目录配置–FHS"></a>Linux目录配置–FHS</h2><blockquote>
<p>根目录(/)所在的分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内</p>
</blockquote>
<h3 id="根目录下："><a href="#根目录下：" class="headerlink" title="根目录下："></a>根目录下：</h3><p>FHS要求必须要存在的目录：</p>
<ul>
<li>/bin：存放执行文件，此目录下放置的是单人维护模式下还能够使用的命令</li>
<li>/boot：此目录放置启动会使用到的文件</li>
<li>/dev：任何设备和接口设备都以文件形式存在于此目录</li>
<li>/etc：系统内的配置文件几乎都放置在这个目录，FHS建议不要放置可执行文件在这个目录</li>
<li>/lib：此目录放置的是启动时会用到的函数库</li>
<li>/media：此目录放置的是可删除的设备，包括软盘、光盘、DVD等设备</li>
<li>/mnt：暂时挂载某些额外的设备可以放在此目录</li>
<li>/opt：第三方辅助软件放置的目录，如KDE桌面管理系统</li>
<li>/run：系统启动后产生的各项信息</li>
<li>/sbin：启动过程需要的，里面包括了启动、修复、还原系统所需要的命令</li>
<li>/srv：一些网络服务启动后，这些服务所需要使用的数据目录</li>
<li>/tmp：让一般用户或是正在执行的程序暂时放置文件的地方，这个目录任何人都能够存取</li>
<li>/usr：后续介绍</li>
<li>/var：后续介绍</li>
</ul>
<p>FHS建议可以存在的目录：</p>
<ul>
<li>/home：系统默认家目录</li>
<li>/root：系统管理员的家目录</li>
</ul>
<h3 id="usr目录下："><a href="#usr目录下：" class="headerlink" title="usr目录下："></a>usr目录下：</h3><p><em>usr指的是UNIX Software Resource，即操作系统软件资源放置的目录，而不是user用户数据</em></p>
<p>FHS要求必须要存在的目录：</p>
<ul>
<li>/usr/bin/：所有一般用户能够使用的命令都放在这里</li>
<li>/usr/lib/：与/lib功能相同，/lib链接到此目录</li>
<li>/usr/local/：管理员在本机安装自己下载的软件，建议安装到此目录</li>
<li>/usr/sbin/：非系统正常运行所需要的系统命令</li>
<li>/usr/share/：主要放置只读的数据文件，当然也包括共享文件</li>
</ul>
<p>FHS建议可以存在的目录：</p>
<ul>
<li>/usr/include/：C/C++等程序语言的头文件(header)与包含文件(include)放置处</li>
<li>/usr/libexec/：某些不被一般用户常用的执行文件或脚本</li>
<li>/usr/src/：一般源代码建议放置到这里</li>
</ul>
<h3 id="var目录下："><a href="#var目录下：" class="headerlink" title="var目录下："></a>var目录下：</h3><p><em>var目录主要针对经常性变动的文件</em></p>
<p>​    FHS要求必须要存在的目录：</p>
<ul>
<li>/var/cache/：应用程序运行过程中的缓存</li>
<li>/var/lib/：程序执行过程中，需要使用的数据文件放置的目录</li>
<li>/var/lock/：给设备上锁</li>
<li>/var/log/：日志文件</li>
<li>/var/mail/：个人电子邮箱</li>
<li>/var/run/：某些程序或是服务启动后，会将PID放到这个目录下</li>
<li>/var/spool/：这个目录通常放置一些队列数据，即排队等待其他程序使用的数据</li>
</ul>
<h3 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>. ：代表当前目录，也可以用./表示</li>
<li>.. ：代表上一层目录，也可以用../表示</li>
<li>当出现找不到命令时，代表该命令不在环境变量$PATH目录下</li>
</ul>
<h1 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h1><p>有关命令：</p>
<ul>
<li>ls：查看文件与目录名称</li>
<li>cp：复制;注意：在默认的条件下，cp的源文件与目标文件的权限不同，目标文件的拥有者是操作者本身</li>
<li>rm：删除文件或目录</li>
<li>mv：移动文件或目录，也可以修改文件名</li>
</ul>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><ul>
<li>cat：由第一行开始显示文件内容</li>
<li>tac：从最后一行开始显示</li>
<li>nl：显示时，同时输出行号</li>
<li>more：一页一页显示文件内容</li>
<li>less：与more类似，但是可以往前翻</li>
<li>head：只看前几行</li>
<li>tail：只看后几行</li>
<li>od：以二进制的方式读取文件内容</li>
<li>touch：修改文件时间或创建新文件</li>
</ul>
<h2 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h2><p>umask：查看文件默认权限，指的是该默认值需要减掉的权限，如umask0022，默认权限为7755</p>
<p>chattr：配置文件隐藏属性</p>
<p>lsattr：显示文件隐藏属性</p>
<h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><p>SUID</p>
<p>SGID</p>
<p>SBIT</p>
<h2 id="命令与文件查找"><a href="#命令与文件查找" class="headerlink" title="命令与文件查找"></a>命令与文件查找</h2><ul>
<li><p>which：脚本文件查找，即查找执行文件</p>
</li>
<li><p>whereis：特定目录中查找文件</p>
</li>
<li><p>locate：依据/var/lib/mlocate内的数据库记录</p>
</li>
<li><p>find：常用查找</p>
</li>
</ul>
<h1 id="Linux磁盘与文件管理系统"><a href="#Linux磁盘与文件管理系统" class="headerlink" title="Linux磁盘与文件管理系统"></a>Linux磁盘与文件管理系统</h1><h2 id="文件系统特性"><a href="#文件系统特性" class="headerlink" title="文件系统特性"></a>文件系统特性</h2><blockquote>
<p>磁盘分区完毕后还需要格式化，因为每种操作系统所设置的文件属性/权限并不同，所以需要格式化以成为操作系统可以使用的</p>
<p>文件系统通常会将文件权限(rwx)与文件属性(拥有者、用户组等)放在不同的区块，权限与属性放到inode中，实际数据则放置到数据区块中。</p>
<p>而超级区块会记录整个文件系统的整体信息，包括inode与数据区块的总量、使用量、剩余量等。</p>
<p>inode记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的区块号码。</p>
</blockquote>
<p><em>inode记录的信息：</em></p>
<ul>
<li>该文件的读写属性(rwx)</li>
<li>该文件的拥有者与用户组(owner、group)</li>
<li>该文件大小</li>
<li>该文件建立或状态改变的时间(ctime)</li>
<li>最近一次读取时间(atime)</li>
<li>最近修改时间(mtime)</li>
<li>定义文件特性的标识(flag)</li>
<li>该文件真正内容的指向(pointer)</li>
</ul>
<blockquote>
<p>系统读取的文件时需要先找到inode，并分析inode所记录的权限与用户是否符合，若符合才能读取</p>
</blockquote>
<p><em>Superblock(超级区块)记录的信息：</em></p>
<ul>
<li>数据区块与inode的总量</li>
<li>未使用与已使用的inode与数据区块数量</li>
<li>数据库与inode的大小</li>
<li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘的时间等文件系统相关信息</li>
<li>一个有效位数值，若此文件系统被挂载，则为0，未挂载为1</li>
</ul>
<p><em>硬链接：</em></p>
<blockquote>
<p>一般一个文件，目录-&gt;文件名-&gt;inode-&gt;文件内容，硬链接则增加一个目录下文件名指向相同inode</p>
<p>硬链接的限制：1.不能跨文件系统 2.不能链接目录</p>
</blockquote>
<p><em>符号链接：</em></p>
<blockquote>
<p>符号链接就是建立一个独立的文件，读取这个文件相当于读取这个文件指向的链接的文件名，相当于windows的快捷方式</p>
</blockquote>
<h2 id="磁盘分区、格式化检验与挂载"><a href="#磁盘分区、格式化检验与挂载" class="headerlink" title="磁盘分区、格式化检验与挂载"></a>磁盘分区、格式化检验与挂载</h2><p>在Linux系统中，当新增一个磁盘时，有以下操作需做：</p>
<ol>
<li>对磁盘进行划分，以建立磁盘分区</li>
<li>对磁盘格式化，以建立文件系统</li>
<li>检验文件系统</li>
<li>建立挂载点，并挂载到挂载点</li>
</ol>
<p>挂载注意事项：</p>
<ul>
<li>单一文件系统不应该挂载在不同挂载点中</li>
<li>单一目录不应该重复挂载多个文件系统</li>
<li>作为挂载点的目录，理论上应该是已存在空目录</li>
<li>根目录/是必须挂载的，而且一定要先于其他挂载点被挂载进来</li>
<li>如若进行卸载，必须先将工作目录移到挂载点(及子目录)之外</li>
</ul>
<h1 id="压缩技术"><a href="#压缩技术" class="headerlink" title="压缩技术"></a>压缩技术</h1><p>原理：</p>
<ul>
<li>一种将文件中没有使用到的空间空出来，以让文件占用空间变小</li>
<li>一种类似有100个1，压缩技术记录为100个1</li>
</ul>
<h2 id="Linux系统常见的压缩命令"><a href="#Linux系统常见的压缩命令" class="headerlink" title="Linux系统常见的压缩命令"></a>Linux系统常见的压缩命令</h2><table>
<thead>
<tr>
<th></th>
<th>gzip</th>
<th>xz</th>
</tr>
</thead>
<tbody><tr>
<td>压缩比</td>
<td>较低</td>
<td>高</td>
</tr>
<tr>
<td>所用时间</td>
<td>较短</td>
<td>较长</td>
</tr>
</tbody></table>
<h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><p>记住以下即可：</p>
<ul>
<li>压缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</li>
<li>查询：tar -jtv -f filename.tar.bz2</li>
<li>解查询：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>鸟哥的Linux私房菜</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的规划与安装</title>
    <url>/2020/10/05/Linux%E7%9A%84%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Linux的规划与安装"><a href="#Linux的规划与安装" class="headerlink" title="Linux的规划与安装"></a>Linux的规划与安装</h1><p>linux版本号：</p>
<ul>
<li>奇数：开发板</li>
<li>偶数：稳定版</li>
</ul>
<h2 id="计算机概论"><a href="#计算机概论" class="headerlink" title="计算机概论"></a>计算机概论</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>CPU里面含有两个主要的单元：<em>算逻单元</em>和<em>控制单元</em></p>
<blockquote>
<p>CPU里面的数据都是从内存里来的，也就是说，<em>输入单元-&gt;内存-&gt;CPU-&gt;内存-&gt;输出单元。</em></p>
</blockquote>
<p>CPU里面含有的指令集：</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>精简指令集(RISC)</th>
<th>复杂指令集(CISC)</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>指令运行时间很短，完成的操作也简单。</td>
<td>指令运行时间长，指令数目多而且复杂。</td>
</tr>
<tr>
<td>使用该架构的CPU</td>
<td>ARM</td>
<td>AMD、Intel、VIA</td>
</tr>
<tr>
<td>实例</td>
<td>手机、导航系统、网络设备(交换机、路由器)</td>
<td>个人电脑</td>
</tr>
</tbody></table>
<h4 id="CPU运行参数"><a href="#CPU运行参数" class="headerlink" title="CPU运行参数"></a>CPU运行参数</h4><p>CPU的频率表示CPU每秒钟可以进行的工作次数，频率目前仅能用来比较同款CPU的速度。</p>
<p>CPU每次能够处理的数据量称为字长，64位代表CPU一次可以读写64bit的数据。</p>
<p>早期CPU有南北桥，如今因为北桥限制频率问题，北桥被整合到CPU中。</p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ul>
<li>CPU具有向下兼容能力，如i7可以兼容i5</li>
</ul>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p><img src="/.com//1.png" alt="image-20200526095428528"></p>
<p>L2是与CPU频率相同的SRAM(静态随机存取内存)，被整合到CPU内部，其价格高，速度快，用于提示CPU运行性能，里面存放常用的程序或数据。</p>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>显卡影响屏幕分辨率和颜色深度。</p>
<p>显卡通过GPU的控制芯片来与CPU、内存等通信。</p>
<h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>机械硬盘的读取通过主轴马达让碟片转动，机械手臂读写来完成。</p>
<p>固态硬盘则是用闪存做的大容量存储设备。</p>
<h2 id="主机规划与磁盘分区"><a href="#主机规划与磁盘分区" class="headerlink" title="主机规划与磁盘分区"></a>主机规划与磁盘分区</h2><blockquote>
<p><em>在Linux中，每个设备相当于一个文件</em>，几乎所有硬件设备都在/dev这个目录下</p>
</blockquote>
<h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><blockquote>
<p>磁盘利用参考对照<em>柱面</em>或<em>扇区号码</em>来分区。</p>
</blockquote>
<p>整块磁盘的<em>第一个扇区</em>特别重要，它记录了磁盘的重要信息。</p>
<p>扇区是磁盘的最小单位，如以前的磁盘的扇区为512字节，如今有4K的扇区</p>
<table>
<thead>
<tr>
<th></th>
<th>MBR</th>
<th>GPT</th>
</tr>
</thead>
<tbody><tr>
<td>安全性</td>
<td>较低，仅有一个扇区记录区分信息</td>
<td>较高，不仅前面有34个LBA，磁盘最后的34个LBA用来备份</td>
</tr>
<tr>
<td>支持磁盘大小</td>
<td>无法使用2.2TB以上的内容</td>
<td>支持2.2TB以上</td>
</tr>
<tr>
<td>引导程序区块大小</td>
<td>较小，只有446字节</td>
<td>较大，整个LBA0</td>
</tr>
</tbody></table>
<h4 id="MBR-MS-DOS-分区表"><a href="#MBR-MS-DOS-分区表" class="headerlink" title="MBR(MS-DOS)分区表"></a>MBR(MS-DOS)分区表</h4><p>MBR第一个扇区的512字节通常会有这些：</p>
<ul>
<li>主引导记录：可以安装启动引导程序的地方，有446字节</li>
<li>分区表：记录整块硬盘分区的状态，有64字节，最多仅能有四组记录区，每组记录区记录了该区段的起始与结束的柱面号码。</li>
</ul>
<p>分区表：</p>
<p>​    分区表里的四组记录区称为主要(Primary)或扩展(Extended)分区</p>
<ul>
<li>主要分区：第一个扇区的64字节，可以被格式化</li>
<li>扩展分区：记录额外扇区的分区信息，并不能格式化</li>
<li>逻辑分区：扩展分区划分的分区，可以被格式化</li>
</ul>
<p>MBR的缺陷：</p>
<ul>
<li>操作系统无法使用2.2TB以上的磁盘容量</li>
<li>MBR仅有一个区块，若被破坏，难以恢复</li>
<li>MBR存放启动引导程序的区块仅446字节，无法存储较多的程序代码</li>
</ul>
<h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>逻辑分区号码：1-4分区是保留给主要/扩展分区，因此第一个逻辑分区是从5开始的</li>
</ul>
<h4 id="GPT磁盘分区表"><a href="#GPT磁盘分区表" class="headerlink" title="GPT磁盘分区表"></a>GPT磁盘分区表</h4><blockquote>
<p>如今的扇区大小已经有4K，为了兼容以前的512字节，GPT大多使用所谓的逻辑区块地址(LBA)来处理。</p>
</blockquote>
<p>GPT模式结构：</p>
<ul>
<li>LBA0：存储第一阶段的启动引导程序</li>
<li>LBA1：这个部分记录了分区表本身的位置和大小，同时记录了备份用的GPT分区，还放置了分区表的校验码</li>
<li>LBA2-33：实际记录分区信息处</li>
</ul>
<h3 id="启动流程中的BIOS与UEFI启动检测程序"><a href="#启动流程中的BIOS与UEFI启动检测程序" class="headerlink" title="启动流程中的BIOS与UEFI启动检测程序"></a>启动流程中的BIOS与UEFI启动检测程序</h3><h4 id="BIOS启动流程"><a href="#BIOS启动流程" class="headerlink" title="BIOS启动流程"></a>BIOS启动流程</h4><p>如下：</p>
<ol>
<li>BIOS：启动主动执行的固件，会认识第一个可启动的设备</li>
<li>MBR：第一个可启动设备的第一个扇区内的主引导记录块，内含启动引导代码</li>
<li>启动引导程序(boot loader)：一个可读取内核文件来执行的软件</li>
<li>内核文件：开始启动操作系统</li>
</ol>
<p>boot loader的主要任务如下：</p>
<ul>
<li>提供选项：用户可选择不同的启动选项，即多重引导到不同操作系统</li>
<li>加载内核文件：直接指向可使用的程序区段来启动操作系统</li>
<li>转交其他启动引导程序：将启动管理功能转交给其他启动引导程序负责，也与多重引导有关</li>
</ul>
<h5 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h5><ul>
<li>启动扇区除了可以安装在MBR外，还可以安装在每个分区的启动扇区(boot loader)，这种特性才能造就“多重引导”</li>
</ul>
<h4 id="UEFI-BIOS"><a href="#UEFI-BIOS" class="headerlink" title="UEFI BIOS"></a>UEFI BIOS</h4><p>与传统BIOS对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>传统BIOS</th>
<th>UEFI</th>
</tr>
</thead>
<tbody><tr>
<td>硬件资源控制</td>
<td>16位</td>
<td>CPU保护模式</td>
</tr>
<tr>
<td>扩充方式</td>
<td>通过IRQ连接</td>
<td>直接加载驱动程序</td>
</tr>
<tr>
<td>第三方厂商支持</td>
<td>较差</td>
<td>较多且可支持多平台</td>
</tr>
<tr>
<td>图形能力</td>
<td>较差</td>
<td>较好</td>
</tr>
<tr>
<td>内置简化操作系统环境</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><ul>
<li>目录树：/，即以根目录为主</li>
<li>挂载：即利用一个目录当成进入点，将磁盘分区的数据放在该目录下，此目录称为挂载点</li>
<li>swap分区：当物理内存不足时，将不常用数据放到swap分区，而将速度较快的物理内存留给需要的程序使用。且该分区不会挂载在根目录下</li>
<li>每个账号都有自己的工作目录，如账号ccc，则此目录就在/home/ccc</li>
</ul>
<h3 id="Linux重要热键"><a href="#Linux重要热键" class="headerlink" title="Linux重要热键"></a>Linux重要热键</h3><ul>
<li>Tab：具有命令补全与文件补齐的功能，按下第一次为<em>命令补全</em>，第二次为<em>文件补齐</em></li>
<li>Ctrl+C：中断目前程序</li>
<li>Ctrl+D：键盘输入结束</li>
<li>Shift+Page UP/Page down：翻页</li>
<li>命令–help：命令的基本用法与选项参数。</li>
<li>man 命令：命令操作说明</li>
<li>关机：shutdown</li>
<li>重启：reboot</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
        <category>鸟哥的Linux私房菜</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS安装win7</title>
    <url>/2020/10/03/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h1><p>今天被差遣去给太上皇装双系统，macOS加个Win7</p>
<h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul>
<li><p>电脑：Mac mini 2014，系统10.14.6，四核i5 4G，500G机械硬盘</p>
</li>
<li><p>系统iso镜像–GHOST win7</p>
</li>
<li><p>PE：给系统分区，重要是分成NTFS格式以供Win使用</p>
</li>
<li><p>磁盘：需要NTFS格式</p>
</li>
<li><p>u盘：主流以UEFI方式安装</p>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>按实际步骤来：</p>
<ol>
<li>将PE安装到U盘上，将系统镜像ISO放到U盘，这次使用的是16G的u盘，微PE格式化U盘，第一次使用exFAT格式格式化失败了，第二次用NTFS才成功，可能因为原格式是NTFS的</li>
<li>接下来将U盘插入主机，重启电脑按Alt(即苹果的options)，进入u盘系统</li>
<li>因为可以将mac os抹除，而且原mac os分区老是失败，故直接将硬盘重新分区，用diskgenius格式化</li>
<li><strong><em>此时为重点！：因为win10、win8是GPT分区的，而win7是MBR分区的，所以此时需要将硬盘格式转化为MBR分区才能装上win7！然后重建主引导记录</em></strong></li>
<li>分了一个C一个D盘均为NTFS格式，紧接着使用ghost一键安装win7</li>
<li>因为前几次老是引导出错，所以在结束以后修复了一下引导，成功！</li>
<li>重启电脑，按Alt进入新出现的硬盘图标下面写着windows</li>
<li>开始写入驱动，后面按着程序来就行了，安装win7成功！</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次因为是在另一个主机上所以没有截图，刚开始准备用boot camp装双系统比较稳健，但是后面硬盘总是不让分区，又说可以直接抹除硬盘，所以直接重新分区。之前以为只要将盘分NTFS格式就行，但是后来老是进不去系统，搜了一下发现还要将硬盘设为MBR分区才可以，重新设置以后就可以成功进入win7了</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩</title>
    <url>/2020/10/03/%E8%89%B2%E5%BD%A9/</url>
    <content><![CDATA[<h1 id="色彩基础"><a href="#色彩基础" class="headerlink" title="色彩基础"></a>色彩基础</h1><h2 id="HSB色彩属性"><a href="#HSB色彩属性" class="headerlink" title="HSB色彩属性"></a>HSB色彩属性</h2><p>颜色具有三大属性</p>
<p>H：色相，颜色的名字，如红色色相</p>
<p>S：饱和度</p>
<p>B：明度</p>
<p><img src="/.com//2.jpg"></p>
<p>红色0°，蓝色240°，绿色120°</p>
<h3 id="色相搭配"><a href="#色相搭配" class="headerlink" title="色相搭配"></a>色相搭配</h3><p>同类色搭配</p>
<p>以0°为基准，夹角在15°以内的颜色视为同类色，取出三个颜色形成同类色搭配</p>
<p>邻近色搭配</p>
<p>夹角在45°以内的颜色视为邻近色，取三个形成邻近色搭配</p>
<p>对比色搭配</p>
<p>夹角在120°以内的视为对比色，形成对比色搭配</p>
<p>互补色搭配</p>
<p>夹角在180°内取两种颜色为互补色</p>
<h2 id="七大色调"><a href="#七大色调" class="headerlink" title="七大色调"></a>七大色调</h2><ul>
<li><p>色调：由饱和度和明度结合产生</p>
</li>
<li><p>饱和度，也称为纯度，指的是一个颜色的纯净程度</p>
</li>
<li><p>明度：亮度</p>
</li>
</ul>
<p><img src="/.com//3.png"></p>
<p>白色调</p>
<p>优点：素雅，文艺，干净，极简</p>
<p>缺点：乏味，单调</p>
<p>粉色调</p>
<p>优点：清秀，天真，可爱</p>
<p>缺点：软弱，无力</p>
<p>明色调</p>
<p>优点：年轻，活力，阳光</p>
<p>缺点：廉价，缺乏品质感</p>
<p>鲜色调</p>
<p>优点：刺激，活力，强力</p>
<p>缺点：生硬，廉价</p>
<p>灰色调(高级灰)</p>
<p>优点：品质，高端</p>
<p>缺点：缺少活力</p>
<p>深色调</p>
<p>优点：成熟，稳重，大气</p>
<p>缺点：压抑，阴暗，不透气</p>
<p>黑色调</p>
<p>优点：神秘，厚重</p>
<p>缺点：压抑</p>
<h2 id="六大搭配原则"><a href="#六大搭配原则" class="headerlink" title="六大搭配原则"></a>六大搭配原则</h2><p>互补色平衡</p>
<p>找到主色后，在色环上找到这个颜色的互补色即180°</p>
<p>对比色平衡</p>
<p>找到主色后，在色环上找到这个颜色的互补色即120°</p>
<p>冷暖平衡</p>
<p>红黄橙为暖色系，绿青蓝蓝色系</p>
<p>当大面积为暖色(冷色)时，需要冷色(暖色)来平衡画面</p>
<p>深浅平衡</p>
<p>主色调是浅色(深色)，需要辅以深色(浅色)来平衡</p>
<p>色彩面积平衡</p>
<p>大概为：</p>
<p>主色占70%</p>
<p>辅助色占25%</p>
<p>点缀色占5%</p>
<p>有彩色和无彩色平衡</p>
<p>有彩色和无彩色搭配</p>
<p>花色和纯色平衡</p>
<p>较为复杂的画面需要辅以纯色，一部分为花色，则需要辅以纯色搭配</p>
]]></content>
      <categories>
        <category>DLife</category>
        <category>knowLedge</category>
      </categories>
      <tags>
        <tag>knowLedge</tag>
      </tags>
  </entry>
  <entry>
    <title>Authentication</title>
    <url>/2020/10/02/Authentication/</url>
    <content><![CDATA[<h1 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h1><p><img src="/.com//1.png"></p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>认证中心简而言之用于身份识别</p>
<ol>
<li>登陆Post/login{“登陆信息”}</li>
<li>创建token</li>
<li>调用接口时在header里有token</li>
<li>服务器检查token，验证</li>
<li>返回结果给浏览器</li>
</ol>
<h3 id="创建Token"><a href="#创建Token" class="headerlink" title="创建Token"></a>创建Token</h3><p>在最初登陆阶段，需要用户**<em>主动**</em>提供身份证明如账号密码、二维码等登陆信息</p>
<p>服务器收到信息后与数据库进行比对</p>
<h4 id="传输密码"><a href="#传输密码" class="headerlink" title="传输密码"></a>传输密码</h4><p>在用户注册时，会将用户密码加密，再存储到数据库中，此过程<em>不可逆</em>。如MD5算法即将密码生成hash值，一个hash值可以对应多个密码。</p>
<p>而验证过程则是对前端传来的密码再次进行加密，比对值是否相同。因为前端传输过程中密码也可能被截获，故传给后端前需要再加密一次。</p>
<p>验证通过后会生成token返回给前端，目前使用jwt即json web token，在token中隐藏json信息，使用字符串密钥加密，后端拿到token使用这个密钥解密，此过程<em>可逆</em>。</p>
<h3 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h3><ol>
<li>判断当前接口是否在白名单</li>
<li>浏览器是否传递token</li>
<li>token签名认证</li>
<li>解密出的信息与后端存储数据对比</li>
</ol>
<p>3、4步即可完成验证，一起执行更好保障</p>
<h2 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h2><h3 id="功能权限"><a href="#功能权限" class="headerlink" title="功能权限"></a>功能权限</h3><p>用户–角色–功能</p>
<p>为用户分配角色，为角色绑定功能</p>
<p>具体实现：</p>
<ol>
<li>查询角色拥有的角色</li>
<li>查询角色绑定功能</li>
<li>查询当前访问接口所属功能</li>
<li>判断用户是否拥有权限访问当前接口</li>
</ol>
<h3 id="数据权限"><a href="#数据权限" class="headerlink" title="数据权限"></a>数据权限</h3><p>将用户与角色绑定，角色与设备和对应操作绑定，如用户可以处理设备a进行123操作，及对设备b进行1操作…</p>
<p>分开绑定</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>back-Design</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>comRegEx</title>
    <url>/2020/10/01/comRegEx/</url>
    <content><![CDATA[<blockquote>
<p>^ 匹配输入字行首</p>
<p>$ 匹配输入行尾</p>
<p>* 匹配前面的子表达式任意次，等价于{0,}</p>
<p>+ 匹配前面的子表达式一次或多次，等价于{1,}</p>
<p>? 匹配前面的子表达式零次或一次，等价于{0,1}</p>
<p>{n},{n,m},{n,}</p>
<p>.匹配除\n，\r之外的任何字符</p>
<p>[xyz] 字符集合，匹配所包含的任意一个字符，如匹配”plain”中的a</p>
<p>[^xyz] 负值字符集合，匹配未包含的任意字符。匹配plain中的plin</p>
<p>\b 匹配一个单词边界，即一个单词第一个字母</p>
<p>\B 匹配非单词边界，即一个单词末尾</p>
<p>\cx 匹配由x指明的控制字符，如\cM匹配一个Control-M，x的值必须在A-Z或a-z之间</p>
<p>\d 匹配一个数字字符</p>
<p>\D 匹配一个非数字字符</p>
<p>\w 匹配包括下划线的任何单词字符</p>
<p>\W 匹配任何非单词字符</p>
</blockquote>
<p><img src="/.com//1.jpg"></p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Eggjs</title>
    <url>/2020/10/01/Eggjs/</url>
    <content><![CDATA[<h1 id="Eggjs"><a href="#Eggjs" class="headerlink" title="Eggjs"></a>Eggjs</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>app/router.js 用于配置URL路由规则</p>
<p>app/controller/** 用于解析用户的输入，处理后返回响应的结果</p>
<p>app/service/** 用于编写业务逻辑层</p>
<p>app/middleware/** 用于编写中间件</p>
<p>app/public/** 用于放置静态资源</p>
<p>app/extend/**用于框架的扩展</p>
<p>config/config.{env}.js 用于编写配置文件</p>
<p>config/plugin.js 用于配置需要加载的插件</p>
<p>test/** 用于单元测试</p>
<p>app.js和agent.js 用于自定义启动时的初始化工作</p>
<p><strong>由内置插件约定的目录:</strong></p>
<p>app/public/** 用于放置静态资源</p>
<p>app/schedule/** 用于定时任务</p>
<p><strong>若需自定义自己的目录规范，参见Loader API</strong></p>
<p>app/view/** 用于放置模板文件</p>
<p>app/model/** 用于放置领域模型</p>
<h2 id="框架内置对象"><a href="#框架内置对象" class="headerlink" title="框架内置对象"></a>框架内置对象</h2><p><strong>Application</strong></p>
<p>  Application是全局应用对象，在一个应用中只会实例化一个，在它上面我们可以挂载一些全局的方法和对象。</p>
<p>  <strong>事件</strong></p>
<p>  我们一般会在启动自定义脚本中监听事件。</p>
<p>  server(服务器):在HTTP完成启动后，会将HTTP server通过这个事件暴露出来给开发者。</p>
<p>  error:运行时有任何异常被捕获后都会触发error事件。</p>
<p>  request和response:应用受到请求和响应请求时会分别触发这两个事件，并将当前请示上下文暴露出来。</p>
<p><strong>获取方式</strong></p>
<p>  几乎所有被框架Loader加载的文件都可以export一个函数，这个函数会被Loader调用，并使用app作为参数:</p>
<p>  启动自定义脚本:</p>
<p>//app.js module.exports=app=&gt;{    app.cache=new Cache(); };</p>
<p>Controller文件:</p>
<p>//app/controller/user.js class UserController extends Controller{    async fetch(){        this.ctx.body=this.app.cache.get(this.ctx.query.id);    } }</p>
<p>在Context对象上，可以通过ctx.app访问到Application对象。</p>
<p>在继承于Controller，Service基类的实例中，可以通过this.app访问到Application对象，即上文中this.ctx,app可以改成this.app。</p>
<p><strong>Context</strong></p>
<p>  在每一次收到用户请求时，框架会实例化一个Context对象，这个对象封装了这次用户请求的信息，并提供了许多便捷的方法来获取请求参数或者响应信息。框架会将所有的Service挂载到Context实例上。</p>
<p><strong>获取方式</strong></p>
<p>  最常见Context实例获取方式是在Middleware，Controller以及Service中。</p>
<p><strong>Request&amp;Response</strong></p>
<p>  两者都是请求级别的对象。一个负责获取HTTP请求，一个负责HTTP响应。</p>
<p><strong>获取方式</strong></p>
<p>  可以在Context的实例上获取到当前请求的Request(ctx.request)和Response(ctx.response)实例。</p>
<p>//app/controller/user.js class UserController extends Controller{    async fetch(){        const {app,ctx}=this;        const id=ctx.request.query.id;        ctx.response.body=app.cache.get(id);    } }</p>
<p>  上面例子中ctx.request.query.id和ctx.query.id是等价的，ctx.response.body=和ctx.body=是等价的</p>
<p>  注意，获取POST的body应该使用ctx.request.body而不是ctx.body。</p>
<p><strong>Controller</strong></p>
<p>  框架提供了一个Controller基类，并推荐所有的Controller都基于该基类实现。该基类有以下属性</p>
<ul>
<li>ctx-当前请求的Context实例</li>
<li>app-应用的Application实例</li>
<li>config-应用的配置</li>
<li>service-应用所有的service</li>
<li>logger-为当前controller封装的logger对象</li>
</ul>
<p>在Controller文件中，可以通过两个方式来引用Controller基类:</p>
<p>//app/controller/user.js //从egg上获取(推荐) const Controller=require(‘egg’).Controller; class UserController extends Controller{    //implement } module.exports=UserController; //从app实例上获取 module.exports=app=&gt;{    return class UserController extends app.Controller{        //implement    }; };</p>
<p><strong>Service</strong></p>
<p>  Service基类的属性的基类和Controller基类属性一致，访问方式也类似:</p>
<p>//app/service/user.js //从egg上获取(推荐) const Service=require(‘egg’).Service; class UserService extends Service{    //implement } module.exports=UserService; //从app实例上获取 module.exports=app=&gt;{    return class UserService extends app.Service{        //implement    }; };</p>
<p><strong>Helper</strong></p>
<p>  Helper用来提供一些实用的utility函数。它的作用在于我们可以将一些常用的动作抽离在helper.js里面成为一个独立的函数，避免逻辑分散各处，同时可以更好的编写测试用例。</p>
<p>  Helper自身是类，有和Controller基类一样的属性，它也会在每次请求时进行实例化，故Helper上的所有函数也能用到ctx。</p>
<p>  <strong>获取方式</strong></p>
<p>  可以在Context实例上获取到当前请求的Helper(ctx.helper)实例</p>
<p><strong>Config</strong></p>
<p>  所有框架、插件和应用级别的配置都可以通过Config对象获取到。</p>
<p><strong>获取方式</strong></p>
<p>  我们可以通过app.config从Application实例上获取到config对象，也可以在Controller，Service，Helper的实例上通过this.config获取到config对象。</p>
<h2 id="基本骨架"><a href="#基本骨架" class="headerlink" title="基本骨架"></a>基本骨架</h2><h3 id="（1）简述"><a href="#（1）简述" class="headerlink" title="（1）简述"></a>（1）简述</h3><p>egg.js是以koa为底层的企业级应用解决方案。</p>
<h3 id="（2）简单层级关系"><a href="#（2）简单层级关系" class="headerlink" title="（2）简单层级关系"></a><strong>（2）简单层级关系</strong></h3><p>MVC(Model View Controller)是一种软件设计模式，早年间Controller层的代码量巨大</p>
<p><img src="/.com//1.png" alt="img"></p>
<p>后来分化出了Controller层的部分代码Service</p>
<p><img src="/.com//2.png"></p>
<p>View:作为视图部分</p>
<p>Controller:作为控制器层，控制用户界面(View)的数据流转途径，主要行为包含接受用户请求、发送请求至业务层(Service)、获取业务层(Service)数据响应，将相应数据发送至用户界面(View)，或生成响应的模板界面发送至用户。</p>
<p>Service:作为业务处理层部分，主要负责收集及对数据进行相应的运算处理，主要行为包含收集控制器请求数据、数据有效性验证、运算、请求数据模型(Model)、接受数据模型(Model)响应消息、响应结果至控制器等;</p>
<p>Model:作为数据模型层部分，主要用于数据持久化(OUT)、查询持久化数据(IN)、常见行为如对数据库进行操作、缓存数据库等。</p>
<h3 id="（3）路由-Router"><a href="#（3）路由-Router" class="headerlink" title="（3）路由(Router)"></a><strong>（3）路由(Router)</strong></h3><p><img src="/.com//3.png"></p>
<p>路由主要用于对数据流进行指引，并处理请求转发。</p>
<p>注:多WAN口路由器即具有多个广域网口的路由器</p>
<p>LAN接口即局域网接口</p>
<p>在Web进行前后端交互的过程中，路由起到了通过URL地址定位控制器函数的作用，即定位静态资源(无论是接口数据、页面。图片等其他文件)。如app/controller/home.ts中存在函数a()和b()，我们约定了跳转”<a href="http://luv-ui.com/a&quot;%E5%88%99%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0a();%E8%B7%B3%E8%BD%AC&quot;http://luv-ui.com/b&quot;%E5%88%99%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0b()%E3%80%82%E8%BF%99%E6%98%AFweb%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8-%E8%B7%AF%E7%94%B1%E7%9A%84%E5%B8%B8%E8%A7%81%E8%A1%A8%E7%8E%B0%E6%89%8B%E6%AE%B5">http://luv-ui.com/a&quot;则执行函数a();跳转&quot;http://luv-ui.com/b&quot;则执行函数b()。这是web应用中的控制器-路由的常见表现手段</a></p>
<p><img src="/.com//4.png"></p>
<h3 id="（4）内置对象"><a href="#（4）内置对象" class="headerlink" title="（4）内置对象"></a><strong>（4）内置对象</strong></h3><p>1.由Koa继承的对象:Application、Context、Request、Response</p>
<p>2.Egg自己扩展的对象:Controller、Service、Helper、Config、Logger</p>
<h4 id="（4-1）应用过程-Controller"><a href="#（4-1）应用过程-Controller" class="headerlink" title="（4.1）应用过程-Controller"></a><strong>（4.1）应用过程-Controller</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Context, Controller &#125; from &#39;egg&#39;; </span><br><span class="line">export default class HomeController extends Controller &#123;    constructor(ctx: Context) &#123;        super(ctx);        &#x2F;&#x2F; do something    </span><br><span class="line">&#125;        &#x2F;&#x2F; 具体的请求函数    </span><br><span class="line">public async foo() &#123;        const &#123; ctx &#125; &#x3D; this; &#x2F;&#x2F; this 代表当前 Controller 对象本身        const &#123; code &#125; &#x3D; ctx.query; &#x2F;&#x2F; 获取 Get 请求中的参数 code        </span><br><span class="line">ctx.body &#x3D; await ctx.service.home.foo( code ); </span><br><span class="line">&#x2F;&#x2F; 异步调用 Service 对象中的相应业务处理,并将结果对调用者响应    </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>ctx对象中包含service对象，囊括了所有app/service/层级下的service继承类</p>
<h4 id="（4-2）应用过程-Service"><a href="#（4-2）应用过程-Service" class="headerlink" title="（4.2）应用过程-Service"></a><strong>（4.2）应用过程-Service</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Context, Service &#125; from &#39;egg&#39;; </span><br><span class="line">export default class HomeService extends Service &#123;    constructor(ctx: Context) &#123;        super(ctx);&#x2F;&#x2F; do something    </span><br><span class="line">&#125;        &#x2F;&#x2F; 具体的业务处理函数    </span><br><span class="line">public async foo( code: string ) &#123;        </span><br><span class="line">const &#123; ctx &#125; &#x3D; this; &#x2F;&#x2F; this 代表当前 Service 对象本身        </span><br><span class="line">const where &#x3D; &#123; code &#125;;        </span><br><span class="line">return await ctx.model.user.findAll(&#123;where&#125;); </span><br><span class="line">&#x2F;&#x2F; 通过 Model(数据模型) 部分获取静态资源    </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.com//5.png" alt="img"></p>
<h3 id="（5）配置-Config"><a href="#（5）配置-Config" class="headerlink" title="（5）配置(Config)"></a><strong>（5）配置(Config)</strong></h3><p>  配置文件返回的是一个object对象，可以覆盖框架的一些配置</p>
<p><img src="/.com//6.png" alt="img"></p>
<h2 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由(Router)"></a>路由(Router)</h2><p>  Router主要用来描述和请求URL和具体承担执行动作的Controller的对应关系。框架约定了app/router.js文件用于统一所有路由规则。</p>
<p>  通过统一配置，我们可以更方便查看全局的路由规则。</p>
<p><strong>如何定义Router</strong></p>
<p>  app/router.js 里面定义 URL 路由规则</p>
<p>  app/controller 目录下面实现 Controller</p>
<p><strong>Router详细定义说明</strong></p>
<p>  路由的完整定义主要包括五个部分:</p>
<p>  1)verb-用户触发动作，支持get，post等所有HTTP方法</p>
<ul>
<li><p>router.head - HEAD</p>
</li>
<li><p>router.options - OPTIONS</p>
</li>
<li><p>router.get - GET</p>
</li>
<li><p>router.put - PUT</p>
</li>
<li><p>router.post - POST</p>
</li>
<li><p>router.patch - PATCH</p>
</li>
<li><p>router.delete - DELETE</p>
</li>
<li><p>router.del - 由于 delete 是一个保留字，所以提供了一个 delete 方法的别名。</p>
</li>
<li><p>router.redirect - 可以对 URL 进行重定向处理，比如我们最经常使用的可以把用户访问的根目录路由到某个主页。</p>
<p>2）router-name 给路由设定一个别名，可以通过Helper提供的辅助函数pathFor和urlFor来生成URL。（可选）</p>
<p>3）path-match -路由URL路径</p>
<p>4）middleware1-在Router里面配置多个Middleware。(可选)</p>
<p>5）controller-指定路由映射到具体的controller上</p>
</li>
</ul>
<p>注:Midlleware即中间件,只有在分布式系统中才能叫中间件，中间件处于操作系统软件与用户的应用软件系统之间。中间件在操作系统、网络和数据库之上，应用软件的下层，总的作用是为处于自己上层的应用软件提供运行和开发环境，帮助用户灵活、高效的开发和集成复杂的应用软件。</p>
<h2 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h2><p>  我们通过Router将用户的请求基于method和URL分发到了对应的Controller。</p>
<p>  Controller负责解析用户的输入，处理后返回相应的结果。例如</p>
<ul>
<li><p>在 <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> 接口中，Controller 接受用户的参数，从数据库中查找内容返回给用户或者将用户的请求更新到数据库中。</p>
</li>
<li><p>在 HTML 页面请求中，Controller 根据用户访问不同的 URL，渲染不同的模板得到 HTML 返回给用户。</p>
</li>
<li><p>在代理服务器中，Controller 将用户的请求转发到其他服务器上，并将其他服务器的处理结果返回给用户。</p>
<p>Controller层主要对用户的请求参数进行处理(校验、转换)，然后调用对应的service方法处理业务，得到业务结果后封装并返回:</p>
<p>1.获取用户通过HTTP传递过来的请求参数</p>
<p>2.校验、组装参数</p>
<p>3.调用service进行业务处理，必要时处理转换service的返回结果，让它适应用户的需求。</p>
<p>4.通过HTTP将结果响应给用户</p>
</li>
</ul>
<p><strong>如何编写Controller</strong></p>
<p>  所有的 Controller 文件都必须放在 app/controller 目录下，可以支持多级目录，访问的时候可以通过目录名级联访问。Controller 支持多种形式进行编写，可以根据不同的项目场景和开发习惯来选择。</p>
<p>  我们可以通过定义Controller类的方式来编写代码。每一个 Controller 都是一个 async function，它的入参为请求的上下文 <a href="https://eggjs.org/zh-cn/basics/extend.html#context">Context</a> 对象的实例，通过它我们可以拿到框架封装好的各种便捷属性和方法。</p>
<p><strong>HTTP基础</strong></p>
<p>  HTTP协议，如发起一个HTTP请求来访问Controller:curl -X POST <a href="http://localhost:3000/api/posts">http://localhost:3000/api/posts</a> –data ‘{“title”:”controller”, “content”: “what is controller”}’ –header ‘Content-Type:application/json; charset=UTF-8’</p>
<p>通过curl发出的HTTP请求如下:</p>
<p>POST /api/posts HTTP/1.1</p>
<p>Host: localhost:3000</p>
<p>Content-Type: application/json; charset=UTF-8</p>
<p>{“title”: “controller”, “content”: “what is controller”}</p>
<p>请求第一行包括:</p>
<ul>
<li>method:如这个请求中的method值是POST</li>
<li>path:值为/api/posts,如果用户的请求中包含query，也会在这里出现</li>
</ul>
<p>从第二行开始直到遇到的第一个空行位置，都是请求的 Headers 部分，这一部分中有许多常用的属性，包括这里看到的 Host，Content-Type，还有 Cookie，User-Agent 等等。在这个请求中有两个头：</p>
<ul>
<li>Host：我们在浏览器发起请求的时候，域名会用来通过 DNS 解析找到服务的 IP 地址，但是浏览器也会将域名和端口号放在 Host 头中一并发送给服务端。</li>
<li>Content-Type：当我们的请求有 body 的时候，都会有 Content-Type 来标明我们的请求体是什么格式的。</li>
</ul>
<p>之后的内容全部都是请求的 body，当请求是 POST, PUT, DELETE 等方法的时候，可以带上请求体，服务端会根据 Content-Type 来解析请求体。</p>
<p>在服务端处理完这个请求后，会发送一个 HTTP 响应给客户端</p>
<p>HTTP/1.1 201 Created</p>
<p>Content-Type: application/json; charset=utf-8</p>
<p>Content-Length: 8</p>
<p>Date: Mon, 09 Jan 2017 08:40:28 GMT</p>
<p>Connection: keep-alive</p>
<p>{“id”: 1}</p>
<p>第一行中也包含了三段，其中我们常用的主要是<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">响应状态码</a>，这个例子中它的值是 201，它的含义是在服务端成功创建了一条资源。</p>
<p>和请求一样，从第二行开始到下一个空行之间都是响应头，这里的 Content-Type, Content-Length 表示这个响应的格式是 JSON，长度为 8 个字节。</p>
<p>最后剩下的部分就是这次响应真正的内容。</p>
<p><strong>获取HTTP请求参数</strong></p>
<p>  <strong>query</strong></p>
<p>   在URL中？后面的部分是一个Query String，这一部分通常用于GET类型的请求中传递参数。我们可以通过ctx.query拿到解析过后的这个参数体。当 Query String 中的 key 重复时，ctx.query 只取 key 第一次出现时的值，后面再出现的都会被忽略。GET /posts?category=egg&amp;category=koa 通过 ctx.query 拿到的值是 { category: ‘egg’ }。有时候我们的系统会设计成让用户传递相同的 key，例如 GET /posts?category=egg&amp;id=1&amp;id=2&amp;id=3。针对此类情况，框架提供了 ctx.queries 对象，这个对象也解析了 Query String，但是它不会丢弃任何一个重复的数据，而是将他们都放到一个数组中。</p>
<p><strong>body</strong></p>
<p>  我们固然可以通过URL传递参数，但是还有以下限制:</p>
<p>  1)浏览器中会对URL的长度有所限制，如果需要传递的参数过多就会无法传递。  </p>
<p>  2）服务端经常会将访问的完整URL记录到日志文件中，有一些敏感数据通过URL传递不安全。</p>
<p>  body部分通常用来传递POST、PUT和DELETE等方法的参数。一般请求中有body的时候，客户端(浏览器)会同时发送Content-Type告诉服务端这次请求的body是什么格式的。Web开发中数据传递最常用的两类格式分别是JSON和Form。</p>
<p>  框架内置了bodyParser中间件来对这两类格式的请求body解析成object挂载到ctx.request.body上.HTTP协议中并不建议在通过GET、HEAD方法访问时传递body，所以我们无法在GET、HEAD方法中按照此方法获取到内容。</p>
<p>  框架对bodyParser设置了一些默认参数，一般来说我们最经常调整的配置项就是变更解析时允许的最大长度，可以在config/config.default.js中覆盖框架的默认值。注:在调整bodyParser支持的body长度时，如果我们应用前面还有一层反向代理(Nginx)，可能也需要调整它的配置，确保反向代理也支持同样长度的请求body。</p>
<p><strong>获取上传的文件</strong></p>
<p>  请求body除了可以带参数外，还可以发送文件，一般来说，浏览器上都是通过Mutipart/form-data 格式发送文件，框架通过内置Multipart插件来支持获取用户上传的文件。有两种方式:File模式与Stream模式。</p>
<p><strong>header</strong></p>
<p>  除了从URL和请求body上获取参数之外，还有许多参数请求header传递的。框架提供了一些辅助属性和方法来获取。</p>
<ul>
<li><p>ctx.headers，ctx.header，ctx.request.headers，ctx.request.header：这几个方法是等价的，都是获取整个 header 对象。</p>
</li>
<li><p>ctx.get(name)，ctx.request.get(name)：获取请求 header 中的一个字段的值，如果这个字段不存在，会返回空字符串。</p>
</li>
<li><p>我们建议用 ctx.get(name) 而不是 ctx.headers[‘name’]，因为前者会自动处理大小写。</p>
<p>详见官方文章。</p>
</li>
</ul>
<p><strong>Cookie</strong></p>
<p>  cookie是保存在客户机中的简单的文本文件，这个文件保留了该客户机访问这个web文档时的信息，当用户再次访问这个web文档时这些信息可供该文档使用。它可以帮助我们实现记录用户个人信息的功能。</p>
<p>  我们Web应用为了知道发起请求的人是谁，HTTP协议设计了一个特殊的请求头:Cookie(set-cookie)将少量数据响应给客户端，浏览器会遵循协议将数据保存，并在下次请求同一个服务的时候带上。</p>
<p>  通过ctx.cookies，我们可以在Controller中便捷、安全的设置和读取Cookie。</p>
<p>  Cookie在web应用中经常承担了传递客户端身份信息的作用，因此有许多安全相关的配置。</p>
<p><strong>Session</strong></p>
<p>  通过Cookie，我们可以给每一个用户设置一个session，用来存储用户身份相关的信息，这份信息会加密后存储在cookie中，实现跨请求的用户身份保持。</p>
<p>  框架内置了Seesion插件，给我们提供了ctx.session来提供或者修改当前用户Session。</p>
<p>  Session直接读取或者修改即可，如果要删除它，直接将它赋值为null。</p>
<p><strong>参数校验</strong></p>
<p>  在获取到用户请求的参数后，不可避免的要求参数进行一些校验。</p>
<p>  借助Validata插件提供的ctx.validata(rule,[body])直接对参数进行校验。</p>
<p>  当校验异常时，会直接抛出一个异常，异常状态码为422，errors字段包含了详细的验证不通过信息。如果想要自己处理检查的异常，可以通过try catch来自行捕捉。</p>
<p>  <strong>校验规则</strong></p>
<p>参数校验通过Parameter完成，支持的校验规则可以在该模块的文档中查阅到。除了内置检验类型外，有时候我们希望自定义一些奇偶碍眼规则，我们可以通过app.validator.addRule(type,check)的方式新增自定义规则。</p>
<p><strong>调用Service</strong></p>
<p>  egg提供了一个service层进行业务逻辑的封装。在Controller中可以调用任何一个service上的任何方法，同时service是懒加载的，只有当访问到它的时候框架才会去实例化它。</p>
<p><strong>发送HTTP响应</strong></p>
<p>  当业务逻辑完成后，Controller的最后一个职责就是将业务逻辑的处理结果通过HTTP响应发送给用户。</p>
<p><strong>设置status(状态码)</strong></p>
<p>  框架提供了一个便捷的setter来进行状态码的设置。</p>
<p><strong>设置body</strong></p>
<p>  在响应中发送的body，也需要配套的Content-Type告知客户端如何对数据进行解析。详见官方文件。</p>
<p>  框架也支持将body设置成一个Stream，并会同时处理好这个Stream上的错误事件。</p>
<p><strong>渲染模板</strong></p>
<p>  我们一般会通过模板引擎生成HTML页面。框架自身没有集成任何一个模板引擎，但是可以通过接入的模板引擎直接使用ctx.render(template)。</p>
<p><strong>JSONP</strong></p>
<p>  我们需要给非本域的页面提供接口服务时，可以通过JSONP进行响应。由于 JSONP 如果使用不当会导致非常多的安全问题，所以框架中提供了便捷的响应 JSONP 格式数据的方法，封装了 <a href="https://eggjs.org/zh-cn/core/security.html#jsonp-xss">JSONP XSS 相关的安全防范</a>，并支持进行 CSRF 校验和 referrer 校验。</p>
<p><strong>JSONP配置/跨站防御配置/referrer校验</strong></p>
<p>详见官方文档</p>
<p><strong>设置Header</strong></p>
<p>  我们通过状态码请求成功与否、状态如何，在body中设置响应的内容。而通过响应的Header，还可以设置一些扩展信息。</p>
<p><strong>重定向</strong></p>
<p>  框架通过security插件覆盖了koa原生的ctx.redirect实现，以提供更加安全的重定向。</p>
<h2 id="服务-Service"><a href="#服务-Service" class="headerlink" title="服务(Service)"></a>服务(Service)</h2><p>  service就是在复杂业务场景下用于做业务逻辑封装的一个抽象层，提供这个抽象的好处如下:</p>
<ul>
<li>保持Controller中的逻辑更加简洁</li>
<li>保持业务逻辑的独立性，抽象出来的service可以被多个Controller重复调用。</li>
<li>将逻辑和展现分离，更容易编写测试用例。</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>复杂数据的处理，比如调用数据库信息还要经过计算返回给用户</li>
<li>第三方服务的调用，比如GitHib信息获取等</li>
</ul>
<p><strong>属性</strong></p>
<p>  service有下列属性方便我们进行开发:</p>
<ul>
<li>this.ctx: 当前请求的上下文 <a href="https://eggjs.org/zh-cn/basics/extend.html#context">Context</a> 对象的实例，通过它我们可以拿到框架封装好的处理当前请求的各种便捷属性和方法。</li>
<li>this.app: 当前应用 <a href="https://eggjs.org/zh-cn/basics/extend.html#application">Application</a> 对象的实例，通过它我们可以拿到框架提供的全局对象和方法。</li>
<li>this.service：应用定义的 <a href="https://eggjs.org/zh-cn/basics/service.html">Service</a>，通过它我们可以访问到其他业务层，等价于 this.ctx.service 。</li>
<li>this.config：应用运行时的<a href="https://eggjs.org/zh-cn/basics/config.html">配置项</a>。</li>
<li>this.logger：logger 对象，上面有四个方法（debug，info，warn，error），分别代表打印四个不同级别的日志，使用方法和效果与 <a href="https://eggjs.org/zh-cn/core/logger.html#context-logger">context logger</a> 中介绍的一样，但是通过这个 logger 对象记录的日志，在日志前面会加上打印该日志的文件路径，以便快速定位日志打印位置。</li>
</ul>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>back-Design</category>
      </categories>
      <tags>
        <tag>back-design</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell/Mongo定时导出删除</title>
    <url>/2020/09/30/Shell&amp;Mongo%E5%AE%9A%E6%97%B6%E5%AF%BC%E5%87%BA%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<p>代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Shell</span></span><br><span class="line"></span><br><span class="line">log10=$(date +%s)<span class="comment">#先取当前时间</span></span><br><span class="line">t1=$((-<span class="number">3</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))<span class="comment">#三天</span></span><br><span class="line">log11=$((<span class="variable">$t1</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))<span class="comment">#时区转换为格林尼治时间</span></span><br><span class="line">log1=$(date -d <span class="string">&quot;<span class="variable">$date</span> UTC <span class="variable">$log11</span> seconds&quot;</span> <span class="string">&quot;+%Y-%m-%dT00:00:00.000Z&quot;</span> )<span class="comment">#直接用字符串锁死时分秒</span></span><br><span class="line"></span><br><span class="line">t2=$((-<span class="number">2</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">log12=$((<span class="variable">$t2</span>-<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>))</span><br><span class="line">log2=$(date -d <span class="string">&quot;<span class="variable">$date</span> UTC <span class="variable">$log12</span> seconds&quot;</span> <span class="string">&quot;+%FT00:00:00.000Z&quot;</span> )</span><br><span class="line"></span><br><span class="line">mongoexport --host ... --port 27017 --username ... -p ... --authenticationDatabase  admin --db  ...  --collection  ... --query <span class="string">&#x27;&#123; &quot;createdAt&quot; : &#123; &quot;$gte&quot; : &#123; &quot;$date&quot; : &quot;&#x27;</span><span class="variable">$&#123;log1&#125;</span><span class="string">&#x27;&quot; &#125;,&quot;$lte&quot;:&#123;&quot;$date&quot; : &quot;&#x27;</span><span class="variable">$&#123;log2&#125;</span><span class="string">&#x27;&quot;&#125;&#125;&#125;&#x27;</span> --out /home/ubuntu/...$(date -d <span class="string">&#x27;2 day ago&#x27;</span> <span class="string">&quot;+%Y%m%d&quot;</span>).json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mongo</span></span><br><span class="line">mongo 127.0.0.1:27017&lt;&lt;EOF</span><br><span class="line">use admin</span><br><span class="line">db.auth(账号,密码)</span><br><span class="line">use 库名</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>=new Date().valueOf()<span class="comment">#用时间戳的方式</span></span><br><span class="line">t1=-3*24*60*60*1000-1.5*60*60*1000<span class="comment">#因为要求在当天1.30</span></span><br><span class="line">t2=-2*24*60*60*1000-1.5*60*60*1000</span><br><span class="line">log1=<span class="built_in">log</span>+t1</span><br><span class="line">log2=<span class="built_in">log</span>+t2</span><br><span class="line">log1=new Date(log1)<span class="comment">#规格化时间</span></span><br><span class="line">log2=new Date(log2)</span><br><span class="line">db.表名.deleteMany(&#123;<span class="string">&quot;createdAt&quot;</span>:&#123;<span class="string">&quot;\$gte&quot;</span>:log1,<span class="string">&quot;\$lte&quot;</span>:log2&#125;&#125;)</span><br><span class="line">db.表名.deleteMany(&#123;<span class="string">&quot;createdAt&quot;</span>:&#123;<span class="string">&quot;\$gte&quot;</span>:log1,<span class="string">&quot;\$lte&quot;</span>:log2&#125;&#125;)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#月份	</span></span><br><span class="line"><span class="comment">#在月份使用的时候有一个问题就是怎么获取上上个月的月份才好使用时间戳确定时间</span></span><br><span class="line"><span class="comment">#想到可以用数组，本来是想用m[-1]==m[m.length-1]的思路，发现js不是这样，但是可以赋值-1</span></span><br><span class="line">var m=new Array()</span><br><span class="line">m[-2]=30</span><br><span class="line">m[-1]=31</span><br><span class="line">m[0]=31</span><br><span class="line">m[1]=28</span><br><span class="line">m[2]=31</span><br><span class="line">m[3]=30</span><br><span class="line">m[4]=31</span><br><span class="line">m[5]=30</span><br><span class="line">m[6]=31</span><br><span class="line">m[7]=31</span><br><span class="line">m[8]=30</span><br><span class="line">m[9]=31</span><br><span class="line">m[10]=30</span><br><span class="line">m[11]=31</span><br><span class="line">log4=new Date()</span><br><span class="line">log3=new Date().valueOf()</span><br><span class="line">t1=-(m[log4.getMonth()-1]+m[log4.getMonth()-2]+m[log4.getMonth()-3])*24*60*60*1000</span><br><span class="line">t2=-(m[log4.getMonth()-1]+m[log4.getMonth()-2])*24*60*60*1000</span><br><span class="line">log1=log3+t1-1.5*60*60*1000</span><br><span class="line">log2=log3+t2-1.5*60*60*1000</span><br><span class="line">log1=new Date(log1)</span><br><span class="line">log2=new Date(log2)</span><br></pre></td></tr></table></figure>





<p>目标：做一个定时运行对mongo数据库进行导出和删除数据的脚本</p>
<p>难点：对时间和shell、mongo命令行操作，及ISO和UTC的变换，Crontable定时</p>
<p>shell是使用${}取值，变量=${date}获取日期，如果是整数日期变换可以使用date -d里的类似3 day ago、8 hour ago进行变换，而如果涉及多个时间则只能先将时间变为秒加减后再格式化为时间</p>
<p>mongo可以直接使用变量名取值，变量=Date()取ISO时间值，使用valueOf()取秒，变换后再Date(变量)取值</p>
<p>后又发现在shell里面使用mongo出现问题：</p>
<p>问题一：使用mongo命令直接进入mongo界面不执行指令</p>
<p>解决方法：使用&lt;&lt;EOF和EOF输入即可</p>
<p>问题二：使用db.mange.deleteMany(“createdAt”:{“gte”:ISO()})时无法删除</p>
<p>解决方法：在gte前使用转义字符\即可，这个困扰了好几天</p>
<p>问题三：路径出问题</p>
<p>解决方案：~在命令行都能进故觉得是绝对路径，但是在shell不行，~表示/home/用户名</p>
]]></content>
      <categories>
        <category>PStudy</category>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Experience</tag>
      </tags>
  </entry>
</search>
